using SharpGram.Core.Conversions;using SharpGram.Tl.Constructors.HelpPeerColorOptionNs;using SharpGram.Tl.Constructors.HelpCountryCodeNs;using SharpGram.Tl.Constructors.HelpCountryNs; using SharpGram.Tl.Types;using SharpGram.Core.Contracts;using SharpGram.Core.Conversions;
// ReSharper disable IdentifierTypo PartialTypeWithSinglePart InconsistentNaming CheckNamespace MemberCanBePrivate.Global ClassNeverInstantiated.Global PropertyCanBeMadeInitOnly.Global UnusedAutoPropertyAccessor.Global CollectionNeverUpdated.Global

namespace SharpGram.Tl.Constructors.InputPeerNs {
    public class InputPeerEmpty : InputPeerBase, ITlSerializable, ITlDeserializable<InputPeerEmpty> {
        public static readonly byte[] Identifier = [234,24,59,127,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputPeerEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputPeerSelf : InputPeerBase, ITlSerializable, ITlDeserializable<InputPeerSelf> {
        public static readonly byte[] Identifier = [201,126,160,125,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputPeerSelf TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputPeerChat : InputPeerBase, ITlSerializable, ITlDeserializable<InputPeerChat> {
        public static readonly byte[] Identifier = [185,92,169,53,];
        public required long ChatId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChatId.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputPeerChat TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var chatIdLocal =  des.As<long>().Read();
            return new() {
            ChatId = chatIdLocal,
            };
        }
    }
    public class InputPeerUser : InputPeerBase, ITlSerializable, ITlDeserializable<InputPeerUser> {
        public static readonly byte[] Identifier = [76,165,232,221,];
        public required long UserId {get;set;}
        public required long AccessHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputPeerUser TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            return new() {
            UserId = userIdLocal,
            AccessHash = accessHashLocal,
            };
        }
    }
    public class InputPeerChannel : InputPeerBase, ITlSerializable, ITlDeserializable<InputPeerChannel> {
        public static readonly byte[] Identifier = [252,187,188,39,];
        public required long ChannelId {get;set;}
        public required long AccessHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChannelId.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputPeerChannel TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var channelIdLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            return new() {
            ChannelId = channelIdLocal,
            AccessHash = accessHashLocal,
            };
        }
    }
    public class InputPeerUserFromMessage : InputPeerBase, ITlSerializable, ITlDeserializable<InputPeerUserFromMessage> {
        public static readonly byte[] Identifier = [28,10,123,168,];
        public required InputPeerBase Peer {get;set;}
        public required int MsgId {get;set;}
        public required long UserId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(MsgId.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputPeerUserFromMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  InputPeerBase.TlDeserialize(des);
            var msgIdLocal =  des.As<int>().Read();
            var userIdLocal =  des.As<long>().Read();
            return new() {
            Peer = peerLocal,
            MsgId = msgIdLocal,
            UserId = userIdLocal,
            };
        }
    }
    public class InputPeerChannelFromMessage : InputPeerBase, ITlSerializable, ITlDeserializable<InputPeerChannelFromMessage> {
        public static readonly byte[] Identifier = [64,8,42,189,];
        public required InputPeerBase Peer {get;set;}
        public required int MsgId {get;set;}
        public required long ChannelId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(MsgId.TlSerialize());
            bytes.AddRange(ChannelId.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputPeerChannelFromMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  InputPeerBase.TlDeserialize(des);
            var msgIdLocal =  des.As<int>().Read();
            var channelIdLocal =  des.As<long>().Read();
            return new() {
            Peer = peerLocal,
            MsgId = msgIdLocal,
            ChannelId = channelIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputUserNs {
    public class InputUserEmpty : InputUserBase, ITlSerializable, ITlDeserializable<InputUserEmpty> {
        public static readonly byte[] Identifier = [207,134,136,185,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputUserEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputUserSelf : InputUserBase, ITlSerializable, ITlDeserializable<InputUserSelf> {
        public static readonly byte[] Identifier = [63,177,193,247,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputUserSelf TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputUser : InputUserBase, ITlSerializable, ITlDeserializable<InputUser> {
        public static readonly byte[] Identifier = [198,88,17,242,];
        public required long UserId {get;set;}
        public required long AccessHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputUser TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            return new() {
            UserId = userIdLocal,
            AccessHash = accessHashLocal,
            };
        }
    }
    public class InputUserFromMessage : InputUserBase, ITlSerializable, ITlDeserializable<InputUserFromMessage> {
        public static readonly byte[] Identifier = [226,72,164,29,];
        public required InputPeerBase Peer {get;set;}
        public required int MsgId {get;set;}
        public required long UserId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(MsgId.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputUserFromMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  InputPeerBase.TlDeserialize(des);
            var msgIdLocal =  des.As<int>().Read();
            var userIdLocal =  des.As<long>().Read();
            return new() {
            Peer = peerLocal,
            MsgId = msgIdLocal,
            UserId = userIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputContactNs {
    public class InputPhoneContact : InputContactBase, ITlSerializable, ITlDeserializable<InputPhoneContact> {
        public static readonly byte[] Identifier = [244,183,146,243,];
        public required long ClientId {get;set;}
        public required string Phone {get;set;}
        public required string FirstName {get;set;}
        public required string LastName {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ClientId.TlSerialize());
            bytes.AddRange(Phone.TlSerialize());
            bytes.AddRange(FirstName.TlSerialize());
            bytes.AddRange(LastName.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputPhoneContact TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var clientIdLocal =  des.As<long>().Read();
            var phoneLocal =  des.As<string>().Read();
            var firstNameLocal =  des.As<string>().Read();
            var lastNameLocal =  des.As<string>().Read();
            return new() {
            ClientId = clientIdLocal,
            Phone = phoneLocal,
            FirstName = firstNameLocal,
            LastName = lastNameLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputFileNs {
    public class InputFile : InputFileBase, ITlSerializable, ITlDeserializable<InputFile> {
        public static readonly byte[] Identifier = [127,242,47,245,];
        public required string Md5Checksum {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Parts.TlSerialize());
            bytes.AddRange(Name.TlSerialize());
            bytes.AddRange(Md5Checksum.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputFile TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var partsLocal =  des.As<int>().Read();
            var nameLocal =  des.As<string>().Read();
            var md5ChecksumLocal =  des.As<string>().Read();
            return new() {
            Id = idLocal,
            Parts = partsLocal,
            Name = nameLocal,
            Md5Checksum = md5ChecksumLocal,
            };
        }
    }
    public class InputFileBig : InputFileBase, ITlSerializable, ITlDeserializable<InputFileBig> {
        public static readonly byte[] Identifier = [181,11,79,250,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Parts.TlSerialize());
            bytes.AddRange(Name.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputFileBig TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var partsLocal =  des.As<int>().Read();
            var nameLocal =  des.As<string>().Read();
            return new() {
            Id = idLocal,
            Parts = partsLocal,
            Name = nameLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputMediaNs {
    public class InputMediaEmpty : InputMediaBase, ITlSerializable, ITlDeserializable<InputMediaEmpty> {
        public static readonly byte[] Identifier = [127,245,100,150,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputMediaEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputMediaUploadedPhoto : InputMediaBase, ITlSerializable, ITlDeserializable<InputMediaUploadedPhoto> {
        public static readonly byte[] Identifier = [4,125,40,30,];
        private int Flags;
        public bool Spoiler {get;set;}
        public required InputFileBase File {get;set;}
        public List<InputDocumentBase>? Stickers {get;set;}
        public int? TtlSeconds {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Stickers is not null ? 1 : 0) | (TtlSeconds is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(File.TlSerialize());
            if(Stickers is not null) bytes.AddRange(Stickers.TlSerialize());
            if(TtlSeconds is not null) bytes.AddRange(TtlSeconds.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMediaUploadedPhoto TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var spoilerLocal = (flagsLocal & 4) is 0 ? default : true ;
            var fileLocal =  InputFileBase.TlDeserialize(des);
            var stickersLocal = (flagsLocal & 1) is 0 ? default : des.Read<InputDocumentBase>() ;
            var ttlSecondsLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Spoiler = spoilerLocal,
            File = fileLocal,
            Stickers = stickersLocal,
            TtlSeconds = ttlSecondsLocal,
            };
        }
    }
    public class InputMediaPhoto : InputMediaBase, ITlSerializable, ITlDeserializable<InputMediaPhoto> {
        public static readonly byte[] Identifier = [53,6,186,179,];
        private int Flags;
        public bool Spoiler {get;set;}
        public required InputPhotoBase Id {get;set;}
        public int? TtlSeconds {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (TtlSeconds is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            if(TtlSeconds is not null) bytes.AddRange(TtlSeconds.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMediaPhoto TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var spoilerLocal = (flagsLocal & 2) is 0 ? default : true ;
            var idLocal =  InputPhotoBase.TlDeserialize(des);
            var ttlSecondsLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Spoiler = spoilerLocal,
            Id = idLocal,
            TtlSeconds = ttlSecondsLocal,
            };
        }
    }
    public class InputMediaGeoPoint : InputMediaBase, ITlSerializable, ITlDeserializable<InputMediaGeoPoint> {
        public static readonly byte[] Identifier = [68,65,196,249,];
        public required InputGeoPointBase GeoPoint {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(GeoPoint.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMediaGeoPoint TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var geoPointLocal =  InputGeoPointBase.TlDeserialize(des);
            return new() {
            GeoPoint = geoPointLocal,
            };
        }
    }
    public class InputMediaContact : InputMediaBase, ITlSerializable, ITlDeserializable<InputMediaContact> {
        public static readonly byte[] Identifier = [251,125,171,248,];
        public required string PhoneNumber {get;set;}
        public required string FirstName {get;set;}
        public required string LastName {get;set;}
        public required string Vcard {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PhoneNumber.TlSerialize());
            bytes.AddRange(FirstName.TlSerialize());
            bytes.AddRange(LastName.TlSerialize());
            bytes.AddRange(Vcard.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMediaContact TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var phoneNumberLocal =  des.As<string>().Read();
            var firstNameLocal =  des.As<string>().Read();
            var lastNameLocal =  des.As<string>().Read();
            var vcardLocal =  des.As<string>().Read();
            return new() {
            PhoneNumber = phoneNumberLocal,
            FirstName = firstNameLocal,
            LastName = lastNameLocal,
            Vcard = vcardLocal,
            };
        }
    }
    public class InputMediaUploadedDocument : InputMediaBase, ITlSerializable, ITlDeserializable<InputMediaUploadedDocument> {
        public static readonly byte[] Identifier = [193,198,56,91,];
        private int Flags;
        public bool NosoundVideo {get;set;}
        public bool ForceFile {get;set;}
        public bool Spoiler {get;set;}
        public required InputFileBase File {get;set;}
        public InputFileBase? Thumb {get;set;}
        public required string MimeType {get;set;}
        public required List<DocumentAttributeBase> Attributes {get;set;}
        public List<InputDocumentBase>? Stickers {get;set;}
        public int? TtlSeconds {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Thumb is not null ? 4 : 0) | (Stickers is not null ? 1 : 0) | (TtlSeconds is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(File.TlSerialize());
            if(Thumb is not null) bytes.AddRange(Thumb.TlSerialize());
            bytes.AddRange(MimeType.TlSerialize());
            bytes.AddRange(Attributes.TlSerialize());
            if(Stickers is not null) bytes.AddRange(Stickers.TlSerialize());
            if(TtlSeconds is not null) bytes.AddRange(TtlSeconds.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMediaUploadedDocument TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var nosoundVideoLocal = (flagsLocal & 8) is 0 ? default : true ;
            var forceFileLocal = (flagsLocal & 16) is 0 ? default : true ;
            var spoilerLocal = (flagsLocal & 32) is 0 ? default : true ;
            var fileLocal =  InputFileBase.TlDeserialize(des);
            var thumbLocal = (flagsLocal & 4) is 0 ? default : InputFileBase.TlDeserialize(des) ;
            var mimeTypeLocal =  des.As<string>().Read();
            var attributesLocal =  des.Read<DocumentAttributeBase>();
            var stickersLocal = (flagsLocal & 1) is 0 ? default : des.Read<InputDocumentBase>() ;
            var ttlSecondsLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            NosoundVideo = nosoundVideoLocal,
            ForceFile = forceFileLocal,
            Spoiler = spoilerLocal,
            File = fileLocal,
            Thumb = thumbLocal,
            MimeType = mimeTypeLocal,
            Attributes = attributesLocal,
            Stickers = stickersLocal,
            TtlSeconds = ttlSecondsLocal,
            };
        }
    }
    public class InputMediaDocument : InputMediaBase, ITlSerializable, ITlDeserializable<InputMediaDocument> {
        public static readonly byte[] Identifier = [88,48,71,51,];
        private int Flags;
        public bool Spoiler {get;set;}
        public required InputDocumentBase Id {get;set;}
        public int? TtlSeconds {get;set;}
        public string? Query {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (TtlSeconds is not null ? 1 : 0) | (Query is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            if(TtlSeconds is not null) bytes.AddRange(TtlSeconds.TlSerialize());
            if(Query is not null) bytes.AddRange(Query.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMediaDocument TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var spoilerLocal = (flagsLocal & 4) is 0 ? default : true ;
            var idLocal =  InputDocumentBase.TlDeserialize(des);
            var ttlSecondsLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var queryLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            Spoiler = spoilerLocal,
            Id = idLocal,
            TtlSeconds = ttlSecondsLocal,
            Query = queryLocal,
            };
        }
    }
    public class InputMediaVenue : InputMediaBase, ITlSerializable, ITlDeserializable<InputMediaVenue> {
        public static readonly byte[] Identifier = [17,28,61,193,];
        public required InputGeoPointBase GeoPoint {get;set;}
        public required string Title {get;set;}
        public required string Address {get;set;}
        public required string Provider {get;set;}
        public required string VenueId {get;set;}
        public required string VenueType {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(GeoPoint.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(Address.TlSerialize());
            bytes.AddRange(Provider.TlSerialize());
            bytes.AddRange(VenueId.TlSerialize());
            bytes.AddRange(VenueType.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMediaVenue TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var geoPointLocal =  InputGeoPointBase.TlDeserialize(des);
            var titleLocal =  des.As<string>().Read();
            var addressLocal =  des.As<string>().Read();
            var providerLocal =  des.As<string>().Read();
            var venueIdLocal =  des.As<string>().Read();
            var venueTypeLocal =  des.As<string>().Read();
            return new() {
            GeoPoint = geoPointLocal,
            Title = titleLocal,
            Address = addressLocal,
            Provider = providerLocal,
            VenueId = venueIdLocal,
            VenueType = venueTypeLocal,
            };
        }
    }
    public class InputMediaPhotoExternal : InputMediaBase, ITlSerializable, ITlDeserializable<InputMediaPhotoExternal> {
        public static readonly byte[] Identifier = [26,254,187,229,];
        private int Flags;
        public bool Spoiler {get;set;}
        public required string Url {get;set;}
        public int? TtlSeconds {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (TtlSeconds is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Url.TlSerialize());
            if(TtlSeconds is not null) bytes.AddRange(TtlSeconds.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMediaPhotoExternal TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var spoilerLocal = (flagsLocal & 2) is 0 ? default : true ;
            var urlLocal =  des.As<string>().Read();
            var ttlSecondsLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Spoiler = spoilerLocal,
            Url = urlLocal,
            TtlSeconds = ttlSecondsLocal,
            };
        }
    }
    public class InputMediaDocumentExternal : InputMediaBase, ITlSerializable, ITlDeserializable<InputMediaDocumentExternal> {
        public static readonly byte[] Identifier = [153,220,82,251,];
        private int Flags;
        public bool Spoiler {get;set;}
        public required string Url {get;set;}
        public int? TtlSeconds {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (TtlSeconds is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Url.TlSerialize());
            if(TtlSeconds is not null) bytes.AddRange(TtlSeconds.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMediaDocumentExternal TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var spoilerLocal = (flagsLocal & 2) is 0 ? default : true ;
            var urlLocal =  des.As<string>().Read();
            var ttlSecondsLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Spoiler = spoilerLocal,
            Url = urlLocal,
            TtlSeconds = ttlSecondsLocal,
            };
        }
    }
    public class InputMediaGame : InputMediaBase, ITlSerializable, ITlDeserializable<InputMediaGame> {
        public static readonly byte[] Identifier = [243,67,63,211,];
        public required InputGameBase Id {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMediaGame TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  InputGameBase.TlDeserialize(des);
            return new() {
            Id = idLocal,
            };
        }
    }
    public class InputMediaInvoice : InputMediaBase, ITlSerializable, ITlDeserializable<InputMediaInvoice> {
        public static readonly byte[] Identifier = [213,166,181,142,];
        private int Flags;
        public required string Title {get;set;}
        public required string Description {get;set;}
        public InputWebDocumentBase? Photo {get;set;}
        public required InvoiceBase Invoice {get;set;}
        public required byte[] Payload {get;set;}
        public required string Provider {get;set;}
        public required DataJSONBase ProviderData {get;set;}
        public string? StartParam {get;set;}
        public InputMediaBase? ExtendedMedia {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Photo is not null ? 1 : 0) | (StartParam is not null ? 2 : 0) | (ExtendedMedia is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(Description.TlSerialize());
            if(Photo is not null) bytes.AddRange(Photo.TlSerialize());
            bytes.AddRange(Invoice.TlSerialize());
            bytes.AddRange(Payload.TlSerialize());
            bytes.AddRange(Provider.TlSerialize());
            bytes.AddRange(ProviderData.TlSerialize());
            if(StartParam is not null) bytes.AddRange(StartParam.TlSerialize());
            if(ExtendedMedia is not null) bytes.AddRange(ExtendedMedia.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMediaInvoice TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var titleLocal =  des.As<string>().Read();
            var descriptionLocal =  des.As<string>().Read();
            var photoLocal = (flagsLocal & 1) is 0 ? default : InputWebDocumentBase.TlDeserialize(des) ;
            var invoiceLocal =  InvoiceBase.TlDeserialize(des);
            var payloadLocal =  des.As<byte[]>().Read();
            var providerLocal =  des.As<string>().Read();
            var providerDataLocal =  DataJSONBase.TlDeserialize(des);
            var startParamLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var extendedMediaLocal = (flagsLocal & 4) is 0 ? default : InputMediaBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Title = titleLocal,
            Description = descriptionLocal,
            Photo = photoLocal,
            Invoice = invoiceLocal,
            Payload = payloadLocal,
            Provider = providerLocal,
            ProviderData = providerDataLocal,
            StartParam = startParamLocal,
            ExtendedMedia = extendedMediaLocal,
            };
        }
    }
    public class InputMediaGeoLive : InputMediaBase, ITlSerializable, ITlDeserializable<InputMediaGeoLive> {
        public static readonly byte[] Identifier = [67,168,31,151,];
        private int Flags;
        public bool Stopped {get;set;}
        public required InputGeoPointBase GeoPoint {get;set;}
        public int? Heading {get;set;}
        public int? Period {get;set;}
        public int? ProximityNotificationRadius {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Heading is not null ? 4 : 0) | (Period is not null ? 2 : 0) | (ProximityNotificationRadius is not null ? 8 : 0) ).TlSerialize());
            bytes.AddRange(GeoPoint.TlSerialize());
            if(Heading is not null) bytes.AddRange(Heading.TlSerialize());
            if(Period is not null) bytes.AddRange(Period.TlSerialize());
            if(ProximityNotificationRadius is not null) bytes.AddRange(ProximityNotificationRadius.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMediaGeoLive TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var stoppedLocal = (flagsLocal & 1) is 0 ? default : true ;
            var geoPointLocal =  InputGeoPointBase.TlDeserialize(des);
            var headingLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            var periodLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            var proximityNotificationRadiusLocal = (flagsLocal & 8) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Stopped = stoppedLocal,
            GeoPoint = geoPointLocal,
            Heading = headingLocal,
            Period = periodLocal,
            ProximityNotificationRadius = proximityNotificationRadiusLocal,
            };
        }
    }
    public class InputMediaPoll : InputMediaBase, ITlSerializable, ITlDeserializable<InputMediaPoll> {
        public static readonly byte[] Identifier = [241,229,148,15,];
        private int Flags;
        public required PollBase Poll {get;set;}
        public List<byte[]>? CorrectAnswers {get;set;}
        public string? Solution {get;set;}
        public List<MessageEntityBase>? SolutionEntities {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (CorrectAnswers is not null ? 1 : 0) | (Solution is not null ? 2 : 0) | (SolutionEntities is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(Poll.TlSerialize());
            if(CorrectAnswers is not null) bytes.AddRange(CorrectAnswers.TlSerialize());
            if(Solution is not null) bytes.AddRange(Solution.TlSerialize());
            if(SolutionEntities is not null) bytes.AddRange(SolutionEntities.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMediaPoll TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var pollLocal =  PollBase.TlDeserialize(des);
            var correctAnswersLocal = (flagsLocal & 1) is 0 ? default : des.ReadByteArrayList() ;
            var solutionLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var solutionEntitiesLocal = (flagsLocal & 2) is 0 ? default : des.Read<MessageEntityBase>() ;
            return new() {
            Flags = flagsLocal,
            Poll = pollLocal,
            CorrectAnswers = correctAnswersLocal,
            Solution = solutionLocal,
            SolutionEntities = solutionEntitiesLocal,
            };
        }
    }
    public class InputMediaDice : InputMediaBase, ITlSerializable, ITlDeserializable<InputMediaDice> {
        public static readonly byte[] Identifier = [123,191,111,230,];
        public required string Emoticon {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Emoticon.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMediaDice TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var emoticonLocal =  des.As<string>().Read();
            return new() {
            Emoticon = emoticonLocal,
            };
        }
    }
    public class InputMediaStory : InputMediaBase, ITlSerializable, ITlDeserializable<InputMediaStory> {
        public static readonly byte[] Identifier = [120,215,253,137,];
        public required InputPeerBase Peer {get;set;}
        public required int Id {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMediaStory TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  InputPeerBase.TlDeserialize(des);
            var idLocal =  des.As<int>().Read();
            return new() {
            Peer = peerLocal,
            Id = idLocal,
            };
        }
    }
    public class InputMediaWebPage : InputMediaBase, ITlSerializable, ITlDeserializable<InputMediaWebPage> {
        public static readonly byte[] Identifier = [73,136,27,194,];
        private int Flags;
        public bool ForceLargeMedia {get;set;}
        public bool ForceSmallMedia {get;set;}
        public bool Optional {get;set;}
        public required string Url {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Url.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMediaWebPage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var forceLargeMediaLocal = (flagsLocal & 1) is 0 ? default : true ;
            var forceSmallMediaLocal = (flagsLocal & 2) is 0 ? default : true ;
            var optionalLocal = (flagsLocal & 4) is 0 ? default : true ;
            var urlLocal =  des.As<string>().Read();
            return new() {
            Flags = flagsLocal,
            ForceLargeMedia = forceLargeMediaLocal,
            ForceSmallMedia = forceSmallMediaLocal,
            Optional = optionalLocal,
            Url = urlLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputChatPhotoNs {
    public class InputChatPhotoEmpty : InputChatPhotoBase, ITlSerializable, ITlDeserializable<InputChatPhotoEmpty> {
        public static readonly byte[] Identifier = [87,143,164,28,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputChatPhotoEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputChatUploadedPhoto : InputChatPhotoBase, ITlSerializable, ITlDeserializable<InputChatUploadedPhoto> {
        public static readonly byte[] Identifier = [192,174,205,189,];
        private int Flags;
        public InputFileBase? File {get;set;}
        public InputFileBase? Video {get;set;}
        public double? VideoStartTs {get;set;}
        public VideoSizeBase? VideoEmojiMarkup {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (File is not null ? 1 : 0) | (Video is not null ? 2 : 0) | (VideoStartTs is not null ? 4 : 0) | (VideoEmojiMarkup is not null ? 8 : 0) ).TlSerialize());
            if(File is not null) bytes.AddRange(File.TlSerialize());
            if(Video is not null) bytes.AddRange(Video.TlSerialize());
            if(VideoStartTs is not null) bytes.AddRange(VideoStartTs.TlSerialize());
            if(VideoEmojiMarkup is not null) bytes.AddRange(VideoEmojiMarkup.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputChatUploadedPhoto TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var fileLocal = (flagsLocal & 1) is 0 ? default : InputFileBase.TlDeserialize(des) ;
            var videoLocal = (flagsLocal & 2) is 0 ? default : InputFileBase.TlDeserialize(des) ;
            var videoStartTsLocal = (flagsLocal & 4) is 0 ? default : des.As<double>().Read() ;
            var videoEmojiMarkupLocal = (flagsLocal & 8) is 0 ? default : VideoSizeBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            File = fileLocal,
            Video = videoLocal,
            VideoStartTs = videoStartTsLocal,
            VideoEmojiMarkup = videoEmojiMarkupLocal,
            };
        }
    }
    public class InputChatPhoto : InputChatPhotoBase, ITlSerializable, ITlDeserializable<InputChatPhoto> {
        public static readonly byte[] Identifier = [55,173,83,137,];
        public required InputPhotoBase Id {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputChatPhoto TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  InputPhotoBase.TlDeserialize(des);
            return new() {
            Id = idLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputGeoPointNs {
    public class InputGeoPointEmpty : InputGeoPointBase, ITlSerializable, ITlDeserializable<InputGeoPointEmpty> {
        public static readonly byte[] Identifier = [214,35,193,228,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputGeoPointEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputGeoPoint : InputGeoPointBase, ITlSerializable, ITlDeserializable<InputGeoPoint> {
        public static readonly byte[] Identifier = [175,47,34,72,];
        private int Flags;
        public required double Lat {get;set;}
        public required double Long {get;set;}
        public int? AccuracyRadius {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (AccuracyRadius is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Lat.TlSerialize());
            bytes.AddRange(Long.TlSerialize());
            if(AccuracyRadius is not null) bytes.AddRange(AccuracyRadius.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputGeoPoint TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var latLocal =  des.As<double>().Read();
            var longLocal =  des.As<double>().Read();
            var accuracyRadiusLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Lat = latLocal,
            Long = longLocal,
            AccuracyRadius = accuracyRadiusLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputPhotoNs {
    public class InputPhotoEmpty : InputPhotoBase, ITlSerializable, ITlDeserializable<InputPhotoEmpty> {
        public static readonly byte[] Identifier = [13,191,215,28,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputPhotoEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputPhoto : InputPhotoBase, ITlSerializable, ITlDeserializable<InputPhoto> {
        public static readonly byte[] Identifier = [74,185,179,59,];
        public required long Id {get;set;}
        public required long AccessHash {get;set;}
        public required byte[] FileReference {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(FileReference.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputPhoto TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var fileReferenceLocal =  des.As<byte[]>().Read();
            return new() {
            Id = idLocal,
            AccessHash = accessHashLocal,
            FileReference = fileReferenceLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputFileLocationNs {
    public class InputFileLocation : InputFileLocationBase, ITlSerializable, ITlDeserializable<InputFileLocation> {
        public static readonly byte[] Identifier = [225,171,218,223,];
        public required long VolumeId {get;set;}
        public required int LocalId {get;set;}
        public required long Secret {get;set;}
        public required byte[] FileReference {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(VolumeId.TlSerialize());
            bytes.AddRange(LocalId.TlSerialize());
            bytes.AddRange(Secret.TlSerialize());
            bytes.AddRange(FileReference.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputFileLocation TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var volumeIdLocal =  des.As<long>().Read();
            var localIdLocal =  des.As<int>().Read();
            var secretLocal =  des.As<long>().Read();
            var fileReferenceLocal =  des.As<byte[]>().Read();
            return new() {
            VolumeId = volumeIdLocal,
            LocalId = localIdLocal,
            Secret = secretLocal,
            FileReference = fileReferenceLocal,
            };
        }
    }
    public class InputEncryptedFileLocation : InputFileLocationBase, ITlSerializable, ITlDeserializable<InputEncryptedFileLocation> {
        public static readonly byte[] Identifier = [85,93,35,245,];
        public required long Id {get;set;}
        public required long AccessHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputEncryptedFileLocation TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            AccessHash = accessHashLocal,
            };
        }
    }
    public class InputDocumentFileLocation : InputFileLocationBase, ITlSerializable, ITlDeserializable<InputDocumentFileLocation> {
        public static readonly byte[] Identifier = [132,117,208,186,];
        public required long Id {get;set;}
        public required long AccessHash {get;set;}
        public required byte[] FileReference {get;set;}
        public required string ThumbSize {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(FileReference.TlSerialize());
            bytes.AddRange(ThumbSize.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputDocumentFileLocation TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var fileReferenceLocal =  des.As<byte[]>().Read();
            var thumbSizeLocal =  des.As<string>().Read();
            return new() {
            Id = idLocal,
            AccessHash = accessHashLocal,
            FileReference = fileReferenceLocal,
            ThumbSize = thumbSizeLocal,
            };
        }
    }
    public class InputSecureFileLocation : InputFileLocationBase, ITlSerializable, ITlDeserializable<InputSecureFileLocation> {
        public static readonly byte[] Identifier = [40,238,199,203,];
        public required long Id {get;set;}
        public required long AccessHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputSecureFileLocation TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            AccessHash = accessHashLocal,
            };
        }
    }
    public class InputTakeoutFileLocation : InputFileLocationBase, ITlSerializable, ITlDeserializable<InputTakeoutFileLocation> {
        public static readonly byte[] Identifier = [153,88,190,41,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputTakeoutFileLocation TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputPhotoFileLocation : InputFileLocationBase, ITlSerializable, ITlDeserializable<InputPhotoFileLocation> {
        public static readonly byte[] Identifier = [254,31,24,64,];
        public required long Id {get;set;}
        public required long AccessHash {get;set;}
        public required byte[] FileReference {get;set;}
        public required string ThumbSize {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(FileReference.TlSerialize());
            bytes.AddRange(ThumbSize.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputPhotoFileLocation TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var fileReferenceLocal =  des.As<byte[]>().Read();
            var thumbSizeLocal =  des.As<string>().Read();
            return new() {
            Id = idLocal,
            AccessHash = accessHashLocal,
            FileReference = fileReferenceLocal,
            ThumbSize = thumbSizeLocal,
            };
        }
    }
    public class InputPhotoLegacyFileLocation : InputFileLocationBase, ITlSerializable, ITlDeserializable<InputPhotoLegacyFileLocation> {
        public static readonly byte[] Identifier = [243,102,52,216,];
        public required long Id {get;set;}
        public required long AccessHash {get;set;}
        public required byte[] FileReference {get;set;}
        public required long VolumeId {get;set;}
        public required int LocalId {get;set;}
        public required long Secret {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(FileReference.TlSerialize());
            bytes.AddRange(VolumeId.TlSerialize());
            bytes.AddRange(LocalId.TlSerialize());
            bytes.AddRange(Secret.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputPhotoLegacyFileLocation TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var fileReferenceLocal =  des.As<byte[]>().Read();
            var volumeIdLocal =  des.As<long>().Read();
            var localIdLocal =  des.As<int>().Read();
            var secretLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            AccessHash = accessHashLocal,
            FileReference = fileReferenceLocal,
            VolumeId = volumeIdLocal,
            LocalId = localIdLocal,
            Secret = secretLocal,
            };
        }
    }
    public class InputPeerPhotoFileLocation : InputFileLocationBase, ITlSerializable, ITlDeserializable<InputPeerPhotoFileLocation> {
        public static readonly byte[] Identifier = [153,126,37,55,];
        private int Flags;
        public bool Big {get;set;}
        public required InputPeerBase Peer {get;set;}
        public required long PhotoId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(PhotoId.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputPeerPhotoFileLocation TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var bigLocal = (flagsLocal & 1) is 0 ? default : true ;
            var peerLocal =  InputPeerBase.TlDeserialize(des);
            var photoIdLocal =  des.As<long>().Read();
            return new() {
            Flags = flagsLocal,
            Big = bigLocal,
            Peer = peerLocal,
            PhotoId = photoIdLocal,
            };
        }
    }
    public class InputStickerSetThumb : InputFileLocationBase, ITlSerializable, ITlDeserializable<InputStickerSetThumb> {
        public static readonly byte[] Identifier = [219,243,132,157,];
        public required InputStickerSetBase Stickerset {get;set;}
        public required int ThumbVersion {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Stickerset.TlSerialize());
            bytes.AddRange(ThumbVersion.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputStickerSetThumb TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var stickersetLocal =  InputStickerSetBase.TlDeserialize(des);
            var thumbVersionLocal =  des.As<int>().Read();
            return new() {
            Stickerset = stickersetLocal,
            ThumbVersion = thumbVersionLocal,
            };
        }
    }
    public class InputGroupCallStream : InputFileLocationBase, ITlSerializable, ITlDeserializable<InputGroupCallStream> {
        public static readonly byte[] Identifier = [42,169,152,5,];
        private int Flags;
        public required InputGroupCallBase Call {get;set;}
        public required long TimeMs {get;set;}
        public required int Scale {get;set;}
        public int? VideoChannel {get;set;}
        public int? VideoQuality {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (VideoChannel is not null ? 1 : 0) | (VideoQuality is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Call.TlSerialize());
            bytes.AddRange(TimeMs.TlSerialize());
            bytes.AddRange(Scale.TlSerialize());
            if(VideoChannel is not null) bytes.AddRange(VideoChannel.TlSerialize());
            if(VideoQuality is not null) bytes.AddRange(VideoQuality.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputGroupCallStream TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var callLocal =  InputGroupCallBase.TlDeserialize(des);
            var timeMsLocal =  des.As<long>().Read();
            var scaleLocal =  des.As<int>().Read();
            var videoChannelLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var videoQualityLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Call = callLocal,
            TimeMs = timeMsLocal,
            Scale = scaleLocal,
            VideoChannel = videoChannelLocal,
            VideoQuality = videoQualityLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PeerNs {
    public class PeerUser : PeerBase, ITlSerializable, ITlDeserializable<PeerUser> {
        public static readonly byte[] Identifier = [34,23,81,89,];
        public required long UserId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            return bytes.ToArray();
        }

        public new static PeerUser TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            return new() {
            UserId = userIdLocal,
            };
        }
    }
    public class PeerChat : PeerBase, ITlSerializable, ITlDeserializable<PeerChat> {
        public static readonly byte[] Identifier = [154,1,198,54,];
        public required long ChatId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChatId.TlSerialize());
            return bytes.ToArray();
        }

        public new static PeerChat TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var chatIdLocal =  des.As<long>().Read();
            return new() {
            ChatId = chatIdLocal,
            };
        }
    }
    public class PeerChannel : PeerBase, ITlSerializable, ITlDeserializable<PeerChannel> {
        public static readonly byte[] Identifier = [30,55,165,162,];
        public required long ChannelId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChannelId.TlSerialize());
            return bytes.ToArray();
        }

        public new static PeerChannel TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var channelIdLocal =  des.As<long>().Read();
            return new() {
            ChannelId = channelIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StorageFileTypeNs {
    public class StorageFileUnknown : StorageFileTypeBase, ITlSerializable, ITlDeserializable<StorageFileUnknown> {
        public static readonly byte[] Identifier = [5,59,150,170,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static StorageFileUnknown TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class StorageFilePartial : StorageFileTypeBase, ITlSerializable, ITlDeserializable<StorageFilePartial> {
        public static readonly byte[] Identifier = [82,111,188,64,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static StorageFilePartial TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class StorageFileJpeg : StorageFileTypeBase, ITlSerializable, ITlDeserializable<StorageFileJpeg> {
        public static readonly byte[] Identifier = [14,254,126,0,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static StorageFileJpeg TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class StorageFileGif : StorageFileTypeBase, ITlSerializable, ITlDeserializable<StorageFileGif> {
        public static readonly byte[] Identifier = [223,170,225,202,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static StorageFileGif TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class StorageFilePng : StorageFileTypeBase, ITlSerializable, ITlDeserializable<StorageFilePng> {
        public static readonly byte[] Identifier = [192,99,79,10,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static StorageFilePng TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class StorageFilePdf : StorageFileTypeBase, ITlSerializable, ITlDeserializable<StorageFilePdf> {
        public static readonly byte[] Identifier = [141,80,30,174,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static StorageFilePdf TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class StorageFileMp3 : StorageFileTypeBase, ITlSerializable, ITlDeserializable<StorageFileMp3> {
        public static readonly byte[] Identifier = [119,6,138,82,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static StorageFileMp3 TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class StorageFileMov : StorageFileTypeBase, ITlSerializable, ITlDeserializable<StorageFileMov> {
        public static readonly byte[] Identifier = [188,235,9,75,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static StorageFileMov TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class StorageFileMp4 : StorageFileTypeBase, ITlSerializable, ITlDeserializable<StorageFileMp4> {
        public static readonly byte[] Identifier = [228,160,206,179,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static StorageFileMp4 TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class StorageFileWebp : StorageFileTypeBase, ITlSerializable, ITlDeserializable<StorageFileWebp> {
        public static readonly byte[] Identifier = [76,70,129,16,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static StorageFileWebp TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.UserNs {
    public class UserEmpty : UserBase, ITlSerializable, ITlDeserializable<UserEmpty> {
        public static readonly byte[] Identifier = [122,75,188,211,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            return bytes.ToArray();
        }

        public new static UserEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            };
        }
    }
    public class User : UserBase, ITlSerializable, ITlDeserializable<User> {
        public static readonly byte[] Identifier = [56,68,92,33,];
        private int Flags;
        public bool Self {get;set;}
        public bool Contact {get;set;}
        public bool MutualContact {get;set;}
        public bool Deleted {get;set;}
        public bool Bot {get;set;}
        public bool BotChatHistory {get;set;}
        public bool BotNochats {get;set;}
        public bool Verified {get;set;}
        public bool Restricted {get;set;}
        public bool Min {get;set;}
        public bool BotInlineGeo {get;set;}
        public bool Support {get;set;}
        public bool Scam {get;set;}
        public bool ApplyMinPhoto {get;set;}
        public bool Fake {get;set;}
        public bool BotAttachMenu {get;set;}
        public bool Premium {get;set;}
        public bool AttachMenuEnabled {get;set;}
        private int Flags2;
        public bool BotCanEdit {get;set;}
        public bool CloseFriend {get;set;}
        public bool StoriesHidden {get;set;}
        public bool StoriesUnavailable {get;set;}
        public long? AccessHash {get;set;}
        public string? FirstName {get;set;}
        public string? LastName {get;set;}
        public string? Username {get;set;}
        public string? Phone {get;set;}
        public UserProfilePhotoBase? Photo {get;set;}
        public UserStatusBase? Status {get;set;}
        public int? BotInfoVersion {get;set;}
        public List<RestrictionReasonBase>? RestrictionReason {get;set;}
        public string? BotInlinePlaceholder {get;set;}
        public string? LangCode {get;set;}
        public EmojiStatusBase? EmojiStatus {get;set;}
        public List<UsernameBase>? Usernames {get;set;}
        public int? StoriesMaxId {get;set;}
        public PeerColorBase? Color {get;set;}
        public PeerColorBase? ProfileColor {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (AccessHash is not null ? 1 : 0) | (FirstName is not null ? 2 : 0) | (LastName is not null ? 4 : 0) | (Username is not null ? 8 : 0) | (Phone is not null ? 16 : 0) | (Photo is not null ? 32 : 0) | (Status is not null ? 64 : 0) | (BotInfoVersion is not null ? 16384 : 0) | (RestrictionReason is not null ? 262144 : 0) | (BotInlinePlaceholder is not null ? 524288 : 0) | (LangCode is not null ? 4194304 : 0) | (EmojiStatus is not null ? 1073741824 : 0) | (Usernames is not null ? 1 : 0) | (StoriesMaxId is not null ? 32 : 0) | (Color is not null ? 256 : 0) | (ProfileColor is not null ? 512 : 0) ).TlSerialize());
            bytes.AddRange((0 | (AccessHash is not null ? 1 : 0) | (FirstName is not null ? 2 : 0) | (LastName is not null ? 4 : 0) | (Username is not null ? 8 : 0) | (Phone is not null ? 16 : 0) | (Photo is not null ? 32 : 0) | (Status is not null ? 64 : 0) | (BotInfoVersion is not null ? 16384 : 0) | (RestrictionReason is not null ? 262144 : 0) | (BotInlinePlaceholder is not null ? 524288 : 0) | (LangCode is not null ? 4194304 : 0) | (EmojiStatus is not null ? 1073741824 : 0) | (Usernames is not null ? 1 : 0) | (StoriesMaxId is not null ? 32 : 0) | (Color is not null ? 256 : 0) | (ProfileColor is not null ? 512 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            if(AccessHash is not null) bytes.AddRange(AccessHash.TlSerialize());
            if(FirstName is not null) bytes.AddRange(FirstName.TlSerialize());
            if(LastName is not null) bytes.AddRange(LastName.TlSerialize());
            if(Username is not null) bytes.AddRange(Username.TlSerialize());
            if(Phone is not null) bytes.AddRange(Phone.TlSerialize());
            if(Photo is not null) bytes.AddRange(Photo.TlSerialize());
            if(Status is not null) bytes.AddRange(Status.TlSerialize());
            if(BotInfoVersion is not null) bytes.AddRange(BotInfoVersion.TlSerialize());
            if(RestrictionReason is not null) bytes.AddRange(RestrictionReason.TlSerialize());
            if(BotInlinePlaceholder is not null) bytes.AddRange(BotInlinePlaceholder.TlSerialize());
            if(LangCode is not null) bytes.AddRange(LangCode.TlSerialize());
            if(EmojiStatus is not null) bytes.AddRange(EmojiStatus.TlSerialize());
            if(Usernames is not null) bytes.AddRange(Usernames.TlSerialize());
            if(StoriesMaxId is not null) bytes.AddRange(StoriesMaxId.TlSerialize());
            if(Color is not null) bytes.AddRange(Color.TlSerialize());
            if(ProfileColor is not null) bytes.AddRange(ProfileColor.TlSerialize());
            return bytes.ToArray();
        }

        public new static User TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var selfLocal = (flagsLocal & 1024) is 0 ? default : true ;
            var contactLocal = (flagsLocal & 2048) is 0 ? default : true ;
            var mutualContactLocal = (flagsLocal & 4096) is 0 ? default : true ;
            var deletedLocal = (flagsLocal & 8192) is 0 ? default : true ;
            var botLocal = (flagsLocal & 16384) is 0 ? default : true ;
            var botChatHistoryLocal = (flagsLocal & 32768) is 0 ? default : true ;
            var botNochatsLocal = (flagsLocal & 65536) is 0 ? default : true ;
            var verifiedLocal = (flagsLocal & 131072) is 0 ? default : true ;
            var restrictedLocal = (flagsLocal & 262144) is 0 ? default : true ;
            var minLocal = (flagsLocal & 1048576) is 0 ? default : true ;
            var botInlineGeoLocal = (flagsLocal & 2097152) is 0 ? default : true ;
            var supportLocal = (flagsLocal & 8388608) is 0 ? default : true ;
            var scamLocal = (flagsLocal & 16777216) is 0 ? default : true ;
            var applyMinPhotoLocal = (flagsLocal & 33554432) is 0 ? default : true ;
            var fakeLocal = (flagsLocal & 67108864) is 0 ? default : true ;
            var botAttachMenuLocal = (flagsLocal & 134217728) is 0 ? default : true ;
            var premiumLocal = (flagsLocal & 268435456) is 0 ? default : true ;
            var attachMenuEnabledLocal = (flagsLocal & 536870912) is 0 ? default : true ;
            var flags2Local =  des.As<int>().Read();
            var botCanEditLocal = (flags2Local & 2) is 0 ? default : true ;
            var closeFriendLocal = (flags2Local & 4) is 0 ? default : true ;
            var storiesHiddenLocal = (flags2Local & 8) is 0 ? default : true ;
            var storiesUnavailableLocal = (flags2Local & 16) is 0 ? default : true ;
            var idLocal =  des.As<long>().Read();
            var accessHashLocal = (flagsLocal & 1) is 0 ? default : des.As<long>().Read() ;
            var firstNameLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var lastNameLocal = (flagsLocal & 4) is 0 ? default : des.As<string>().Read() ;
            var usernameLocal = (flagsLocal & 8) is 0 ? default : des.As<string>().Read() ;
            var phoneLocal = (flagsLocal & 16) is 0 ? default : des.As<string>().Read() ;
            var photoLocal = (flagsLocal & 32) is 0 ? default : UserProfilePhotoBase.TlDeserialize(des) ;
            var statusLocal = (flagsLocal & 64) is 0 ? default : UserStatusBase.TlDeserialize(des) ;
            var botInfoVersionLocal = (flagsLocal & 16384) is 0 ? default : des.As<int>().Read() ;
            var restrictionReasonLocal = (flagsLocal & 262144) is 0 ? default : des.Read<RestrictionReasonBase>() ;
            var botInlinePlaceholderLocal = (flagsLocal & 524288) is 0 ? default : des.As<string>().Read() ;
            var langCodeLocal = (flagsLocal & 4194304) is 0 ? default : des.As<string>().Read() ;
            var emojiStatusLocal = (flagsLocal & 1073741824) is 0 ? default : EmojiStatusBase.TlDeserialize(des) ;
            var usernamesLocal = (flags2Local & 1) is 0 ? default : des.Read<UsernameBase>() ;
            var storiesMaxIdLocal = (flags2Local & 32) is 0 ? default : des.As<int>().Read() ;
            var colorLocal = (flags2Local & 256) is 0 ? default : PeerColorBase.TlDeserialize(des) ;
            var profileColorLocal = (flags2Local & 512) is 0 ? default : PeerColorBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Self = selfLocal,
            Contact = contactLocal,
            MutualContact = mutualContactLocal,
            Deleted = deletedLocal,
            Bot = botLocal,
            BotChatHistory = botChatHistoryLocal,
            BotNochats = botNochatsLocal,
            Verified = verifiedLocal,
            Restricted = restrictedLocal,
            Min = minLocal,
            BotInlineGeo = botInlineGeoLocal,
            Support = supportLocal,
            Scam = scamLocal,
            ApplyMinPhoto = applyMinPhotoLocal,
            Fake = fakeLocal,
            BotAttachMenu = botAttachMenuLocal,
            Premium = premiumLocal,
            AttachMenuEnabled = attachMenuEnabledLocal,
            Flags2 = flags2Local,
            BotCanEdit = botCanEditLocal,
            CloseFriend = closeFriendLocal,
            StoriesHidden = storiesHiddenLocal,
            StoriesUnavailable = storiesUnavailableLocal,
            Id = idLocal,
            AccessHash = accessHashLocal,
            FirstName = firstNameLocal,
            LastName = lastNameLocal,
            Username = usernameLocal,
            Phone = phoneLocal,
            Photo = photoLocal,
            Status = statusLocal,
            BotInfoVersion = botInfoVersionLocal,
            RestrictionReason = restrictionReasonLocal,
            BotInlinePlaceholder = botInlinePlaceholderLocal,
            LangCode = langCodeLocal,
            EmojiStatus = emojiStatusLocal,
            Usernames = usernamesLocal,
            StoriesMaxId = storiesMaxIdLocal,
            Color = colorLocal,
            ProfileColor = profileColorLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.UserProfilePhotoNs {
    public class UserProfilePhotoEmpty : UserProfilePhotoBase, ITlSerializable, ITlDeserializable<UserProfilePhotoEmpty> {
        public static readonly byte[] Identifier = [225,186,17,79,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static UserProfilePhotoEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class UserProfilePhoto : UserProfilePhotoBase, ITlSerializable, ITlDeserializable<UserProfilePhoto> {
        public static readonly byte[] Identifier = [6,247,209,130,];
        private int Flags;
        public bool HasVideo {get;set;}
        public bool Personal {get;set;}
        public required long PhotoId {get;set;}
        public byte[]? StrippedThumb {get;set;}
        public required int DcId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (StrippedThumb is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(PhotoId.TlSerialize());
            if(StrippedThumb is not null) bytes.AddRange(StrippedThumb.TlSerialize());
            bytes.AddRange(DcId.TlSerialize());
            return bytes.ToArray();
        }

        public new static UserProfilePhoto TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var hasVideoLocal = (flagsLocal & 1) is 0 ? default : true ;
            var personalLocal = (flagsLocal & 4) is 0 ? default : true ;
            var photoIdLocal =  des.As<long>().Read();
            var strippedThumbLocal = (flagsLocal & 2) is 0 ? default : des.As<byte[]>().Read() ;
            var dcIdLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            HasVideo = hasVideoLocal,
            Personal = personalLocal,
            PhotoId = photoIdLocal,
            StrippedThumb = strippedThumbLocal,
            DcId = dcIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.UserStatusNs {
    public class UserStatusEmpty : UserStatusBase, ITlSerializable, ITlDeserializable<UserStatusEmpty> {
        public static readonly byte[] Identifier = [73,80,208,9,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static UserStatusEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class UserStatusOnline : UserStatusBase, ITlSerializable, ITlDeserializable<UserStatusOnline> {
        public static readonly byte[] Identifier = [73,57,185,237,];
        public required int Expires {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Expires.TlSerialize());
            return bytes.ToArray();
        }

        public new static UserStatusOnline TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var expiresLocal =  des.As<int>().Read();
            return new() {
            Expires = expiresLocal,
            };
        }
    }
    public class UserStatusOffline : UserStatusBase, ITlSerializable, ITlDeserializable<UserStatusOffline> {
        public static readonly byte[] Identifier = [63,112,140,0,];
        public required int WasOnline {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(WasOnline.TlSerialize());
            return bytes.ToArray();
        }

        public new static UserStatusOffline TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var wasOnlineLocal =  des.As<int>().Read();
            return new() {
            WasOnline = wasOnlineLocal,
            };
        }
    }
    public class UserStatusRecently : UserStatusBase, ITlSerializable, ITlDeserializable<UserStatusRecently> {
        public static readonly byte[] Identifier = [241,66,111,226,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static UserStatusRecently TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class UserStatusLastWeek : UserStatusBase, ITlSerializable, ITlDeserializable<UserStatusLastWeek> {
        public static readonly byte[] Identifier = [252,9,191,7,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static UserStatusLastWeek TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class UserStatusLastMonth : UserStatusBase, ITlSerializable, ITlDeserializable<UserStatusLastMonth> {
        public static readonly byte[] Identifier = [66,199,235,119,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static UserStatusLastMonth TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChatNs {
    public class ChatEmpty : ChatBase, ITlSerializable, ITlDeserializable<ChatEmpty> {
        public static readonly byte[] Identifier = [101,40,86,41,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            };
        }
    }
    public class Chat : ChatBase, ITlSerializable, ITlDeserializable<Chat> {
        public static readonly byte[] Identifier = [86,242,203,65,];
        private int Flags;
        public bool Creator {get;set;}
        public bool Left {get;set;}
        public bool Deactivated {get;set;}
        public bool CallActive {get;set;}
        public bool CallNotEmpty {get;set;}
        public bool Noforwards {get;set;}
        public required string Title {get;set;}
        public required ChatPhotoBase Photo {get;set;}
        public required int ParticipantsCount {get;set;}
        public required int Date {get;set;}
        public required int Version {get;set;}
        public InputChannelBase? MigratedTo {get;set;}
        public ChatAdminRightsBase? AdminRights {get;set;}
        public ChatBannedRightsBase? DefaultBannedRights {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (MigratedTo is not null ? 64 : 0) | (AdminRights is not null ? 16384 : 0) | (DefaultBannedRights is not null ? 262144 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(Photo.TlSerialize());
            bytes.AddRange(ParticipantsCount.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(Version.TlSerialize());
            if(MigratedTo is not null) bytes.AddRange(MigratedTo.TlSerialize());
            if(AdminRights is not null) bytes.AddRange(AdminRights.TlSerialize());
            if(DefaultBannedRights is not null) bytes.AddRange(DefaultBannedRights.TlSerialize());
            return bytes.ToArray();
        }

        public new static Chat TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var creatorLocal = (flagsLocal & 1) is 0 ? default : true ;
            var leftLocal = (flagsLocal & 4) is 0 ? default : true ;
            var deactivatedLocal = (flagsLocal & 32) is 0 ? default : true ;
            var callActiveLocal = (flagsLocal & 8388608) is 0 ? default : true ;
            var callNotEmptyLocal = (flagsLocal & 16777216) is 0 ? default : true ;
            var noforwardsLocal = (flagsLocal & 33554432) is 0 ? default : true ;
            var idLocal =  des.As<long>().Read();
            var titleLocal =  des.As<string>().Read();
            var photoLocal =  ChatPhotoBase.TlDeserialize(des);
            var participantsCountLocal =  des.As<int>().Read();
            var dateLocal =  des.As<int>().Read();
            var versionLocal =  des.As<int>().Read();
            var migratedToLocal = (flagsLocal & 64) is 0 ? default : InputChannelBase.TlDeserialize(des) ;
            var adminRightsLocal = (flagsLocal & 16384) is 0 ? default : ChatAdminRightsBase.TlDeserialize(des) ;
            var defaultBannedRightsLocal = (flagsLocal & 262144) is 0 ? default : ChatBannedRightsBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Creator = creatorLocal,
            Left = leftLocal,
            Deactivated = deactivatedLocal,
            CallActive = callActiveLocal,
            CallNotEmpty = callNotEmptyLocal,
            Noforwards = noforwardsLocal,
            Id = idLocal,
            Title = titleLocal,
            Photo = photoLocal,
            ParticipantsCount = participantsCountLocal,
            Date = dateLocal,
            Version = versionLocal,
            MigratedTo = migratedToLocal,
            AdminRights = adminRightsLocal,
            DefaultBannedRights = defaultBannedRightsLocal,
            };
        }
    }
    public class ChatForbidden : ChatBase, ITlSerializable, ITlDeserializable<ChatForbidden> {
        public static readonly byte[] Identifier = [167,161,146,101,];
        public required string Title {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatForbidden TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var titleLocal =  des.As<string>().Read();
            return new() {
            Id = idLocal,
            Title = titleLocal,
            };
        }
    }
    public class Channel : ChatBase, ITlSerializable, ITlDeserializable<Channel> {
        public static readonly byte[] Identifier = [143,252,173,10,];
        private int Flags;
        public bool Creator {get;set;}
        public bool Left {get;set;}
        public bool Broadcast {get;set;}
        public bool Verified {get;set;}
        public bool Megagroup {get;set;}
        public bool Restricted {get;set;}
        public bool Signatures {get;set;}
        public bool Min {get;set;}
        public bool Scam {get;set;}
        public bool HasLink {get;set;}
        public bool HasGeo {get;set;}
        public bool SlowmodeEnabled {get;set;}
        public bool CallActive {get;set;}
        public bool CallNotEmpty {get;set;}
        public bool Fake {get;set;}
        public bool Gigagroup {get;set;}
        public bool Noforwards {get;set;}
        public bool JoinToSend {get;set;}
        public bool JoinRequest {get;set;}
        public bool Forum {get;set;}
        private int Flags2;
        public bool StoriesHidden {get;set;}
        public bool StoriesHiddenMin {get;set;}
        public bool StoriesUnavailable {get;set;}
        public long? AccessHash {get;set;}
        public required string Title {get;set;}
        public string? Username {get;set;}
        public required ChatPhotoBase Photo {get;set;}
        public required int Date {get;set;}
        public List<RestrictionReasonBase>? RestrictionReason {get;set;}
        public ChatAdminRightsBase? AdminRights {get;set;}
        public ChatBannedRightsBase? BannedRights {get;set;}
        public ChatBannedRightsBase? DefaultBannedRights {get;set;}
        public int? ParticipantsCount {get;set;}
        public List<UsernameBase>? Usernames {get;set;}
        public int? StoriesMaxId {get;set;}
        public PeerColorBase? Color {get;set;}
        public PeerColorBase? ProfileColor {get;set;}
        public EmojiStatusBase? EmojiStatus {get;set;}
        public int? Level {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (AccessHash is not null ? 8192 : 0) | (Username is not null ? 64 : 0) | (RestrictionReason is not null ? 512 : 0) | (AdminRights is not null ? 16384 : 0) | (BannedRights is not null ? 32768 : 0) | (DefaultBannedRights is not null ? 262144 : 0) | (ParticipantsCount is not null ? 131072 : 0) | (Usernames is not null ? 1 : 0) | (StoriesMaxId is not null ? 16 : 0) | (Color is not null ? 128 : 0) | (ProfileColor is not null ? 256 : 0) | (EmojiStatus is not null ? 512 : 0) | (Level is not null ? 1024 : 0) ).TlSerialize());
            bytes.AddRange((0 | (AccessHash is not null ? 8192 : 0) | (Username is not null ? 64 : 0) | (RestrictionReason is not null ? 512 : 0) | (AdminRights is not null ? 16384 : 0) | (BannedRights is not null ? 32768 : 0) | (DefaultBannedRights is not null ? 262144 : 0) | (ParticipantsCount is not null ? 131072 : 0) | (Usernames is not null ? 1 : 0) | (StoriesMaxId is not null ? 16 : 0) | (Color is not null ? 128 : 0) | (ProfileColor is not null ? 256 : 0) | (EmojiStatus is not null ? 512 : 0) | (Level is not null ? 1024 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            if(AccessHash is not null) bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            if(Username is not null) bytes.AddRange(Username.TlSerialize());
            bytes.AddRange(Photo.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            if(RestrictionReason is not null) bytes.AddRange(RestrictionReason.TlSerialize());
            if(AdminRights is not null) bytes.AddRange(AdminRights.TlSerialize());
            if(BannedRights is not null) bytes.AddRange(BannedRights.TlSerialize());
            if(DefaultBannedRights is not null) bytes.AddRange(DefaultBannedRights.TlSerialize());
            if(ParticipantsCount is not null) bytes.AddRange(ParticipantsCount.TlSerialize());
            if(Usernames is not null) bytes.AddRange(Usernames.TlSerialize());
            if(StoriesMaxId is not null) bytes.AddRange(StoriesMaxId.TlSerialize());
            if(Color is not null) bytes.AddRange(Color.TlSerialize());
            if(ProfileColor is not null) bytes.AddRange(ProfileColor.TlSerialize());
            if(EmojiStatus is not null) bytes.AddRange(EmojiStatus.TlSerialize());
            if(Level is not null) bytes.AddRange(Level.TlSerialize());
            return bytes.ToArray();
        }

        public new static Channel TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var creatorLocal = (flagsLocal & 1) is 0 ? default : true ;
            var leftLocal = (flagsLocal & 4) is 0 ? default : true ;
            var broadcastLocal = (flagsLocal & 32) is 0 ? default : true ;
            var verifiedLocal = (flagsLocal & 128) is 0 ? default : true ;
            var megagroupLocal = (flagsLocal & 256) is 0 ? default : true ;
            var restrictedLocal = (flagsLocal & 512) is 0 ? default : true ;
            var signaturesLocal = (flagsLocal & 2048) is 0 ? default : true ;
            var minLocal = (flagsLocal & 4096) is 0 ? default : true ;
            var scamLocal = (flagsLocal & 524288) is 0 ? default : true ;
            var hasLinkLocal = (flagsLocal & 1048576) is 0 ? default : true ;
            var hasGeoLocal = (flagsLocal & 2097152) is 0 ? default : true ;
            var slowmodeEnabledLocal = (flagsLocal & 4194304) is 0 ? default : true ;
            var callActiveLocal = (flagsLocal & 8388608) is 0 ? default : true ;
            var callNotEmptyLocal = (flagsLocal & 16777216) is 0 ? default : true ;
            var fakeLocal = (flagsLocal & 33554432) is 0 ? default : true ;
            var gigagroupLocal = (flagsLocal & 67108864) is 0 ? default : true ;
            var noforwardsLocal = (flagsLocal & 134217728) is 0 ? default : true ;
            var joinToSendLocal = (flagsLocal & 268435456) is 0 ? default : true ;
            var joinRequestLocal = (flagsLocal & 536870912) is 0 ? default : true ;
            var forumLocal = (flagsLocal & 1073741824) is 0 ? default : true ;
            var flags2Local =  des.As<int>().Read();
            var storiesHiddenLocal = (flags2Local & 2) is 0 ? default : true ;
            var storiesHiddenMinLocal = (flags2Local & 4) is 0 ? default : true ;
            var storiesUnavailableLocal = (flags2Local & 8) is 0 ? default : true ;
            var idLocal =  des.As<long>().Read();
            var accessHashLocal = (flagsLocal & 8192) is 0 ? default : des.As<long>().Read() ;
            var titleLocal =  des.As<string>().Read();
            var usernameLocal = (flagsLocal & 64) is 0 ? default : des.As<string>().Read() ;
            var photoLocal =  ChatPhotoBase.TlDeserialize(des);
            var dateLocal =  des.As<int>().Read();
            var restrictionReasonLocal = (flagsLocal & 512) is 0 ? default : des.Read<RestrictionReasonBase>() ;
            var adminRightsLocal = (flagsLocal & 16384) is 0 ? default : ChatAdminRightsBase.TlDeserialize(des) ;
            var bannedRightsLocal = (flagsLocal & 32768) is 0 ? default : ChatBannedRightsBase.TlDeserialize(des) ;
            var defaultBannedRightsLocal = (flagsLocal & 262144) is 0 ? default : ChatBannedRightsBase.TlDeserialize(des) ;
            var participantsCountLocal = (flagsLocal & 131072) is 0 ? default : des.As<int>().Read() ;
            var usernamesLocal = (flags2Local & 1) is 0 ? default : des.Read<UsernameBase>() ;
            var storiesMaxIdLocal = (flags2Local & 16) is 0 ? default : des.As<int>().Read() ;
            var colorLocal = (flags2Local & 128) is 0 ? default : PeerColorBase.TlDeserialize(des) ;
            var profileColorLocal = (flags2Local & 256) is 0 ? default : PeerColorBase.TlDeserialize(des) ;
            var emojiStatusLocal = (flags2Local & 512) is 0 ? default : EmojiStatusBase.TlDeserialize(des) ;
            var levelLocal = (flags2Local & 1024) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Creator = creatorLocal,
            Left = leftLocal,
            Broadcast = broadcastLocal,
            Verified = verifiedLocal,
            Megagroup = megagroupLocal,
            Restricted = restrictedLocal,
            Signatures = signaturesLocal,
            Min = minLocal,
            Scam = scamLocal,
            HasLink = hasLinkLocal,
            HasGeo = hasGeoLocal,
            SlowmodeEnabled = slowmodeEnabledLocal,
            CallActive = callActiveLocal,
            CallNotEmpty = callNotEmptyLocal,
            Fake = fakeLocal,
            Gigagroup = gigagroupLocal,
            Noforwards = noforwardsLocal,
            JoinToSend = joinToSendLocal,
            JoinRequest = joinRequestLocal,
            Forum = forumLocal,
            Flags2 = flags2Local,
            StoriesHidden = storiesHiddenLocal,
            StoriesHiddenMin = storiesHiddenMinLocal,
            StoriesUnavailable = storiesUnavailableLocal,
            Id = idLocal,
            AccessHash = accessHashLocal,
            Title = titleLocal,
            Username = usernameLocal,
            Photo = photoLocal,
            Date = dateLocal,
            RestrictionReason = restrictionReasonLocal,
            AdminRights = adminRightsLocal,
            BannedRights = bannedRightsLocal,
            DefaultBannedRights = defaultBannedRightsLocal,
            ParticipantsCount = participantsCountLocal,
            Usernames = usernamesLocal,
            StoriesMaxId = storiesMaxIdLocal,
            Color = colorLocal,
            ProfileColor = profileColorLocal,
            EmojiStatus = emojiStatusLocal,
            Level = levelLocal,
            };
        }
    }
    public class ChannelForbidden : ChatBase, ITlSerializable, ITlDeserializable<ChannelForbidden> {
        public static readonly byte[] Identifier = [213,147,212,23,];
        private int Flags;
        public bool Broadcast {get;set;}
        public bool Megagroup {get;set;}
        public required long AccessHash {get;set;}
        public required string Title {get;set;}
        public int? UntilDate {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (UntilDate is not null ? 65536 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            if(UntilDate is not null) bytes.AddRange(UntilDate.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelForbidden TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var broadcastLocal = (flagsLocal & 32) is 0 ? default : true ;
            var megagroupLocal = (flagsLocal & 256) is 0 ? default : true ;
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var titleLocal =  des.As<string>().Read();
            var untilDateLocal = (flagsLocal & 65536) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Broadcast = broadcastLocal,
            Megagroup = megagroupLocal,
            Id = idLocal,
            AccessHash = accessHashLocal,
            Title = titleLocal,
            UntilDate = untilDateLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChatFullNs {
    public class ChatFull : ChatFullBase, ITlSerializable, ITlDeserializable<ChatFull> {
        public static readonly byte[] Identifier = [56,17,211,201,];
        public required ChatParticipantsBase Participants {get;set;}
        public PhotoBase? ChatPhoto {get;set;}
        public List<BotInfoBase>? BotInfo {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (ChatPhoto is not null ? 4 : 0) | (ExportedInvite is not null ? 8192 : 0) | (BotInfo is not null ? 8 : 0) | (PinnedMsgId is not null ? 64 : 0) | (FolderId is not null ? 2048 : 0) | (Call is not null ? 4096 : 0) | (TtlPeriod is not null ? 16384 : 0) | (GroupcallDefaultJoinAs is not null ? 32768 : 0) | (ThemeEmoticon is not null ? 65536 : 0) | (RequestsPending is not null ? 131072 : 0) | (RecentRequesters is not null ? 131072 : 0) | (AvailableReactions is not null ? 262144 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(About.TlSerialize());
            bytes.AddRange(Participants.TlSerialize());
            if(ChatPhoto is not null) bytes.AddRange(ChatPhoto.TlSerialize());
            bytes.AddRange(NotifySettings.TlSerialize());
            if(ExportedInvite is not null) bytes.AddRange(ExportedInvite.TlSerialize());
            if(BotInfo is not null) bytes.AddRange(BotInfo.TlSerialize());
            if(PinnedMsgId is not null) bytes.AddRange(PinnedMsgId.TlSerialize());
            if(FolderId is not null) bytes.AddRange(FolderId.TlSerialize());
            if(Call is not null) bytes.AddRange(Call.TlSerialize());
            if(TtlPeriod is not null) bytes.AddRange(TtlPeriod.TlSerialize());
            if(GroupcallDefaultJoinAs is not null) bytes.AddRange(GroupcallDefaultJoinAs.TlSerialize());
            if(ThemeEmoticon is not null) bytes.AddRange(ThemeEmoticon.TlSerialize());
            if(RequestsPending is not null) bytes.AddRange(RequestsPending.TlSerialize());
            if(RecentRequesters is not null) bytes.AddRange(RecentRequesters.TlSerialize());
            if(AvailableReactions is not null) bytes.AddRange(AvailableReactions.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatFull TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var canSetUsernameLocal = (flagsLocal & 128) is 0 ? default : true ;
            var hasScheduledLocal = (flagsLocal & 256) is 0 ? default : true ;
            var translationsDisabledLocal = (flagsLocal & 524288) is 0 ? default : true ;
            var idLocal =  des.As<long>().Read();
            var aboutLocal =  des.As<string>().Read();
            var participantsLocal =  ChatParticipantsBase.TlDeserialize(des);
            var chatPhotoLocal = (flagsLocal & 4) is 0 ? default : PhotoBase.TlDeserialize(des) ;
            var notifySettingsLocal =  PeerNotifySettingsBase.TlDeserialize(des);
            var exportedInviteLocal = (flagsLocal & 8192) is 0 ? default : ExportedChatInviteBase.TlDeserialize(des) ;
            var botInfoLocal = (flagsLocal & 8) is 0 ? default : des.Read<BotInfoBase>() ;
            var pinnedMsgIdLocal = (flagsLocal & 64) is 0 ? default : des.As<int>().Read() ;
            var folderIdLocal = (flagsLocal & 2048) is 0 ? default : des.As<int>().Read() ;
            var callLocal = (flagsLocal & 4096) is 0 ? default : InputGroupCallBase.TlDeserialize(des) ;
            var ttlPeriodLocal = (flagsLocal & 16384) is 0 ? default : des.As<int>().Read() ;
            var groupcallDefaultJoinAsLocal = (flagsLocal & 32768) is 0 ? default : PeerBase.TlDeserialize(des) ;
            var themeEmoticonLocal = (flagsLocal & 65536) is 0 ? default : des.As<string>().Read() ;
            var requestsPendingLocal = (flagsLocal & 131072) is 0 ? default : des.As<int>().Read() ;
            var recentRequestersLocal = (flagsLocal & 131072) is 0 ? default : des.ReadNumbers<long>() ;
            var availableReactionsLocal = (flagsLocal & 262144) is 0 ? default : ChatReactionsBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            CanSetUsername = canSetUsernameLocal,
            HasScheduled = hasScheduledLocal,
            TranslationsDisabled = translationsDisabledLocal,
            Id = idLocal,
            About = aboutLocal,
            Participants = participantsLocal,
            ChatPhoto = chatPhotoLocal,
            NotifySettings = notifySettingsLocal,
            ExportedInvite = exportedInviteLocal,
            BotInfo = botInfoLocal,
            PinnedMsgId = pinnedMsgIdLocal,
            FolderId = folderIdLocal,
            Call = callLocal,
            TtlPeriod = ttlPeriodLocal,
            GroupcallDefaultJoinAs = groupcallDefaultJoinAsLocal,
            ThemeEmoticon = themeEmoticonLocal,
            RequestsPending = requestsPendingLocal,
            RecentRequesters = recentRequestersLocal,
            AvailableReactions = availableReactionsLocal,
            };
        }
    }
    public class ChannelFull : ChatFullBase, ITlSerializable, ITlDeserializable<ChannelFull> {
        public static readonly byte[] Identifier = [111,203,43,15,];
        public bool CanViewParticipants {get;set;}
        public bool CanSetStickers {get;set;}
        public bool HiddenPrehistory {get;set;}
        public bool CanSetLocation {get;set;}
        public bool CanViewStats {get;set;}
        public bool Blocked {get;set;}
        private int Flags2;
        public bool CanDeleteChannel {get;set;}
        public bool Antispam {get;set;}
        public bool ParticipantsHidden {get;set;}
        public bool StoriesPinnedAvailable {get;set;}
        public bool ViewForumAsMessages {get;set;}
        public int? ParticipantsCount {get;set;}
        public int? AdminsCount {get;set;}
        public int? KickedCount {get;set;}
        public int? BannedCount {get;set;}
        public int? OnlineCount {get;set;}
        public required int ReadInboxMaxId {get;set;}
        public required int ReadOutboxMaxId {get;set;}
        public required int UnreadCount {get;set;}
        public required PhotoBase ChatPhoto {get;set;}
        public required List<BotInfoBase> BotInfo {get;set;}
        public long? MigratedFromChatId {get;set;}
        public int? MigratedFromMaxId {get;set;}
        public StickerSetBase? Stickerset {get;set;}
        public int? AvailableMinId {get;set;}
        public long? LinkedChatId {get;set;}
        public ChannelLocationBase? Location {get;set;}
        public int? SlowmodeSeconds {get;set;}
        public int? SlowmodeNextSendDate {get;set;}
        public int? StatsDc {get;set;}
        public required int Pts {get;set;}
        public List<string>? PendingSuggestions {get;set;}
        public PeerBase? DefaultSendAs {get;set;}
        public PeerStoriesBase? Stories {get;set;}
        public WallPaperBase? Wallpaper {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (ParticipantsCount is not null ? 1 : 0) | (AdminsCount is not null ? 2 : 0) | (KickedCount is not null ? 4 : 0) | (BannedCount is not null ? 4 : 0) | (OnlineCount is not null ? 8192 : 0) | (ExportedInvite is not null ? 8388608 : 0) | (MigratedFromChatId is not null ? 16 : 0) | (MigratedFromMaxId is not null ? 16 : 0) | (PinnedMsgId is not null ? 32 : 0) | (Stickerset is not null ? 256 : 0) | (AvailableMinId is not null ? 512 : 0) | (FolderId is not null ? 2048 : 0) | (LinkedChatId is not null ? 16384 : 0) | (Location is not null ? 32768 : 0) | (SlowmodeSeconds is not null ? 131072 : 0) | (SlowmodeNextSendDate is not null ? 262144 : 0) | (StatsDc is not null ? 4096 : 0) | (Call is not null ? 2097152 : 0) | (TtlPeriod is not null ? 16777216 : 0) | (PendingSuggestions is not null ? 33554432 : 0) | (GroupcallDefaultJoinAs is not null ? 67108864 : 0) | (ThemeEmoticon is not null ? 134217728 : 0) | (RequestsPending is not null ? 268435456 : 0) | (RecentRequesters is not null ? 268435456 : 0) | (DefaultSendAs is not null ? 536870912 : 0) | (AvailableReactions is not null ? 1073741824 : 0) | (Stories is not null ? 16 : 0) | (Wallpaper is not null ? 128 : 0) ).TlSerialize());
            bytes.AddRange((0 | (ParticipantsCount is not null ? 1 : 0) | (AdminsCount is not null ? 2 : 0) | (KickedCount is not null ? 4 : 0) | (BannedCount is not null ? 4 : 0) | (OnlineCount is not null ? 8192 : 0) | (ExportedInvite is not null ? 8388608 : 0) | (MigratedFromChatId is not null ? 16 : 0) | (MigratedFromMaxId is not null ? 16 : 0) | (PinnedMsgId is not null ? 32 : 0) | (Stickerset is not null ? 256 : 0) | (AvailableMinId is not null ? 512 : 0) | (FolderId is not null ? 2048 : 0) | (LinkedChatId is not null ? 16384 : 0) | (Location is not null ? 32768 : 0) | (SlowmodeSeconds is not null ? 131072 : 0) | (SlowmodeNextSendDate is not null ? 262144 : 0) | (StatsDc is not null ? 4096 : 0) | (Call is not null ? 2097152 : 0) | (TtlPeriod is not null ? 16777216 : 0) | (PendingSuggestions is not null ? 33554432 : 0) | (GroupcallDefaultJoinAs is not null ? 67108864 : 0) | (ThemeEmoticon is not null ? 134217728 : 0) | (RequestsPending is not null ? 268435456 : 0) | (RecentRequesters is not null ? 268435456 : 0) | (DefaultSendAs is not null ? 536870912 : 0) | (AvailableReactions is not null ? 1073741824 : 0) | (Stories is not null ? 16 : 0) | (Wallpaper is not null ? 128 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(About.TlSerialize());
            if(ParticipantsCount is not null) bytes.AddRange(ParticipantsCount.TlSerialize());
            if(AdminsCount is not null) bytes.AddRange(AdminsCount.TlSerialize());
            if(KickedCount is not null) bytes.AddRange(KickedCount.TlSerialize());
            if(BannedCount is not null) bytes.AddRange(BannedCount.TlSerialize());
            if(OnlineCount is not null) bytes.AddRange(OnlineCount.TlSerialize());
            bytes.AddRange(ReadInboxMaxId.TlSerialize());
            bytes.AddRange(ReadOutboxMaxId.TlSerialize());
            bytes.AddRange(UnreadCount.TlSerialize());
            bytes.AddRange(ChatPhoto.TlSerialize());
            bytes.AddRange(NotifySettings.TlSerialize());
            if(ExportedInvite is not null) bytes.AddRange(ExportedInvite.TlSerialize());
            bytes.AddRange(BotInfo.TlSerialize());
            if(MigratedFromChatId is not null) bytes.AddRange(MigratedFromChatId.TlSerialize());
            if(MigratedFromMaxId is not null) bytes.AddRange(MigratedFromMaxId.TlSerialize());
            if(PinnedMsgId is not null) bytes.AddRange(PinnedMsgId.TlSerialize());
            if(Stickerset is not null) bytes.AddRange(Stickerset.TlSerialize());
            if(AvailableMinId is not null) bytes.AddRange(AvailableMinId.TlSerialize());
            if(FolderId is not null) bytes.AddRange(FolderId.TlSerialize());
            if(LinkedChatId is not null) bytes.AddRange(LinkedChatId.TlSerialize());
            if(Location is not null) bytes.AddRange(Location.TlSerialize());
            if(SlowmodeSeconds is not null) bytes.AddRange(SlowmodeSeconds.TlSerialize());
            if(SlowmodeNextSendDate is not null) bytes.AddRange(SlowmodeNextSendDate.TlSerialize());
            if(StatsDc is not null) bytes.AddRange(StatsDc.TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            if(Call is not null) bytes.AddRange(Call.TlSerialize());
            if(TtlPeriod is not null) bytes.AddRange(TtlPeriod.TlSerialize());
            if(PendingSuggestions is not null) bytes.AddRange(PendingSuggestions.TlSerialize());
            if(GroupcallDefaultJoinAs is not null) bytes.AddRange(GroupcallDefaultJoinAs.TlSerialize());
            if(ThemeEmoticon is not null) bytes.AddRange(ThemeEmoticon.TlSerialize());
            if(RequestsPending is not null) bytes.AddRange(RequestsPending.TlSerialize());
            if(RecentRequesters is not null) bytes.AddRange(RecentRequesters.TlSerialize());
            if(DefaultSendAs is not null) bytes.AddRange(DefaultSendAs.TlSerialize());
            if(AvailableReactions is not null) bytes.AddRange(AvailableReactions.TlSerialize());
            if(Stories is not null) bytes.AddRange(Stories.TlSerialize());
            if(Wallpaper is not null) bytes.AddRange(Wallpaper.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelFull TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var canViewParticipantsLocal = (flagsLocal & 8) is 0 ? default : true ;
            var canSetUsernameLocal = (flagsLocal & 64) is 0 ? default : true ;
            var canSetStickersLocal = (flagsLocal & 128) is 0 ? default : true ;
            var hiddenPrehistoryLocal = (flagsLocal & 1024) is 0 ? default : true ;
            var canSetLocationLocal = (flagsLocal & 65536) is 0 ? default : true ;
            var hasScheduledLocal = (flagsLocal & 524288) is 0 ? default : true ;
            var canViewStatsLocal = (flagsLocal & 1048576) is 0 ? default : true ;
            var blockedLocal = (flagsLocal & 4194304) is 0 ? default : true ;
            var flags2Local =  des.As<int>().Read();
            var canDeleteChannelLocal = (flags2Local & 1) is 0 ? default : true ;
            var antispamLocal = (flags2Local & 2) is 0 ? default : true ;
            var participantsHiddenLocal = (flags2Local & 4) is 0 ? default : true ;
            var translationsDisabledLocal = (flags2Local & 8) is 0 ? default : true ;
            var storiesPinnedAvailableLocal = (flags2Local & 32) is 0 ? default : true ;
            var viewForumAsMessagesLocal = (flags2Local & 64) is 0 ? default : true ;
            var idLocal =  des.As<long>().Read();
            var aboutLocal =  des.As<string>().Read();
            var participantsCountLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var adminsCountLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            var kickedCountLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            var bannedCountLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            var onlineCountLocal = (flagsLocal & 8192) is 0 ? default : des.As<int>().Read() ;
            var readInboxMaxIdLocal =  des.As<int>().Read();
            var readOutboxMaxIdLocal =  des.As<int>().Read();
            var unreadCountLocal =  des.As<int>().Read();
            var chatPhotoLocal =  PhotoBase.TlDeserialize(des);
            var notifySettingsLocal =  PeerNotifySettingsBase.TlDeserialize(des);
            var exportedInviteLocal = (flagsLocal & 8388608) is 0 ? default : ExportedChatInviteBase.TlDeserialize(des) ;
            var botInfoLocal =  des.Read<BotInfoBase>();
            var migratedFromChatIdLocal = (flagsLocal & 16) is 0 ? default : des.As<long>().Read() ;
            var migratedFromMaxIdLocal = (flagsLocal & 16) is 0 ? default : des.As<int>().Read() ;
            var pinnedMsgIdLocal = (flagsLocal & 32) is 0 ? default : des.As<int>().Read() ;
            var stickersetLocal = (flagsLocal & 256) is 0 ? default : StickerSetBase.TlDeserialize(des) ;
            var availableMinIdLocal = (flagsLocal & 512) is 0 ? default : des.As<int>().Read() ;
            var folderIdLocal = (flagsLocal & 2048) is 0 ? default : des.As<int>().Read() ;
            var linkedChatIdLocal = (flagsLocal & 16384) is 0 ? default : des.As<long>().Read() ;
            var locationLocal = (flagsLocal & 32768) is 0 ? default : ChannelLocationBase.TlDeserialize(des) ;
            var slowmodeSecondsLocal = (flagsLocal & 131072) is 0 ? default : des.As<int>().Read() ;
            var slowmodeNextSendDateLocal = (flagsLocal & 262144) is 0 ? default : des.As<int>().Read() ;
            var statsDcLocal = (flagsLocal & 4096) is 0 ? default : des.As<int>().Read() ;
            var ptsLocal =  des.As<int>().Read();
            var callLocal = (flagsLocal & 2097152) is 0 ? default : InputGroupCallBase.TlDeserialize(des) ;
            var ttlPeriodLocal = (flagsLocal & 16777216) is 0 ? default : des.As<int>().Read() ;
            var pendingSuggestionsLocal = (flagsLocal & 33554432) is 0 ? default : des.ReadStrings() ;
            var groupcallDefaultJoinAsLocal = (flagsLocal & 67108864) is 0 ? default : PeerBase.TlDeserialize(des) ;
            var themeEmoticonLocal = (flagsLocal & 134217728) is 0 ? default : des.As<string>().Read() ;
            var requestsPendingLocal = (flagsLocal & 268435456) is 0 ? default : des.As<int>().Read() ;
            var recentRequestersLocal = (flagsLocal & 268435456) is 0 ? default : des.ReadNumbers<long>() ;
            var defaultSendAsLocal = (flagsLocal & 536870912) is 0 ? default : PeerBase.TlDeserialize(des) ;
            var availableReactionsLocal = (flagsLocal & 1073741824) is 0 ? default : ChatReactionsBase.TlDeserialize(des) ;
            var storiesLocal = (flags2Local & 16) is 0 ? default : PeerStoriesBase.TlDeserialize(des) ;
            var wallpaperLocal = (flags2Local & 128) is 0 ? default : WallPaperBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            CanViewParticipants = canViewParticipantsLocal,
            CanSetUsername = canSetUsernameLocal,
            CanSetStickers = canSetStickersLocal,
            HiddenPrehistory = hiddenPrehistoryLocal,
            CanSetLocation = canSetLocationLocal,
            HasScheduled = hasScheduledLocal,
            CanViewStats = canViewStatsLocal,
            Blocked = blockedLocal,
            Flags2 = flags2Local,
            CanDeleteChannel = canDeleteChannelLocal,
            Antispam = antispamLocal,
            ParticipantsHidden = participantsHiddenLocal,
            TranslationsDisabled = translationsDisabledLocal,
            StoriesPinnedAvailable = storiesPinnedAvailableLocal,
            ViewForumAsMessages = viewForumAsMessagesLocal,
            Id = idLocal,
            About = aboutLocal,
            ParticipantsCount = participantsCountLocal,
            AdminsCount = adminsCountLocal,
            KickedCount = kickedCountLocal,
            BannedCount = bannedCountLocal,
            OnlineCount = onlineCountLocal,
            ReadInboxMaxId = readInboxMaxIdLocal,
            ReadOutboxMaxId = readOutboxMaxIdLocal,
            UnreadCount = unreadCountLocal,
            ChatPhoto = chatPhotoLocal,
            NotifySettings = notifySettingsLocal,
            ExportedInvite = exportedInviteLocal,
            BotInfo = botInfoLocal,
            MigratedFromChatId = migratedFromChatIdLocal,
            MigratedFromMaxId = migratedFromMaxIdLocal,
            PinnedMsgId = pinnedMsgIdLocal,
            Stickerset = stickersetLocal,
            AvailableMinId = availableMinIdLocal,
            FolderId = folderIdLocal,
            LinkedChatId = linkedChatIdLocal,
            Location = locationLocal,
            SlowmodeSeconds = slowmodeSecondsLocal,
            SlowmodeNextSendDate = slowmodeNextSendDateLocal,
            StatsDc = statsDcLocal,
            Pts = ptsLocal,
            Call = callLocal,
            TtlPeriod = ttlPeriodLocal,
            PendingSuggestions = pendingSuggestionsLocal,
            GroupcallDefaultJoinAs = groupcallDefaultJoinAsLocal,
            ThemeEmoticon = themeEmoticonLocal,
            RequestsPending = requestsPendingLocal,
            RecentRequesters = recentRequestersLocal,
            DefaultSendAs = defaultSendAsLocal,
            AvailableReactions = availableReactionsLocal,
            Stories = storiesLocal,
            Wallpaper = wallpaperLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChatParticipantNs {
    public class ChatParticipant : ChatParticipantBase, ITlSerializable, ITlDeserializable<ChatParticipant> {
        public static readonly byte[] Identifier = [7,64,45,192,];
        public required long InviterId {get;set;}
        public required int Date {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(InviterId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatParticipant TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            var inviterIdLocal =  des.As<long>().Read();
            var dateLocal =  des.As<int>().Read();
            return new() {
            UserId = userIdLocal,
            InviterId = inviterIdLocal,
            Date = dateLocal,
            };
        }
    }
    public class ChatParticipantCreator : ChatParticipantBase, ITlSerializable, ITlDeserializable<ChatParticipantCreator> {
        public static readonly byte[] Identifier = [228,206,107,228,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatParticipantCreator TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            return new() {
            UserId = userIdLocal,
            };
        }
    }
    public class ChatParticipantAdmin : ChatParticipantBase, ITlSerializable, ITlDeserializable<ChatParticipantAdmin> {
        public static readonly byte[] Identifier = [91,63,147,160,];
        public required long InviterId {get;set;}
        public required int Date {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(InviterId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatParticipantAdmin TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            var inviterIdLocal =  des.As<long>().Read();
            var dateLocal =  des.As<int>().Read();
            return new() {
            UserId = userIdLocal,
            InviterId = inviterIdLocal,
            Date = dateLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChatParticipantsNs {
    public class ChatParticipantsForbidden : ChatParticipantsBase, ITlSerializable, ITlDeserializable<ChatParticipantsForbidden> {
        public static readonly byte[] Identifier = [225,211,99,135,];
        private int Flags;
        public ChatParticipantBase? SelfParticipant {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (SelfParticipant is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(ChatId.TlSerialize());
            if(SelfParticipant is not null) bytes.AddRange(SelfParticipant.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatParticipantsForbidden TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var chatIdLocal =  des.As<long>().Read();
            var selfParticipantLocal = (flagsLocal & 1) is 0 ? default : ChatParticipantBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            ChatId = chatIdLocal,
            SelfParticipant = selfParticipantLocal,
            };
        }
    }
    public class ChatParticipants : ChatParticipantsBase, ITlSerializable, ITlDeserializable<ChatParticipants> {
        public static readonly byte[] Identifier = [248,147,188,60,];
        public required List<ChatParticipantBase> Participants {get;set;}
        public required int Version {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChatId.TlSerialize());
            bytes.AddRange(Participants.TlSerialize());
            bytes.AddRange(Version.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatParticipants TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var chatIdLocal =  des.As<long>().Read();
            var participantsLocal =  des.Read<ChatParticipantBase>();
            var versionLocal =  des.As<int>().Read();
            return new() {
            ChatId = chatIdLocal,
            Participants = participantsLocal,
            Version = versionLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChatPhotoNs {
    public class ChatPhotoEmpty : ChatPhotoBase, ITlSerializable, ITlDeserializable<ChatPhotoEmpty> {
        public static readonly byte[] Identifier = [28,1,193,55,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static ChatPhotoEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class ChatPhoto : ChatPhotoBase, ITlSerializable, ITlDeserializable<ChatPhoto> {
        public static readonly byte[] Identifier = [17,28,110,28,];
        private int Flags;
        public bool HasVideo {get;set;}
        public required long PhotoId {get;set;}
        public byte[]? StrippedThumb {get;set;}
        public required int DcId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (StrippedThumb is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(PhotoId.TlSerialize());
            if(StrippedThumb is not null) bytes.AddRange(StrippedThumb.TlSerialize());
            bytes.AddRange(DcId.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatPhoto TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var hasVideoLocal = (flagsLocal & 1) is 0 ? default : true ;
            var photoIdLocal =  des.As<long>().Read();
            var strippedThumbLocal = (flagsLocal & 2) is 0 ? default : des.As<byte[]>().Read() ;
            var dcIdLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            HasVideo = hasVideoLocal,
            PhotoId = photoIdLocal,
            StrippedThumb = strippedThumbLocal,
            DcId = dcIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessageNs {
    public class MessageEmpty : MessageBase, ITlSerializable, ITlDeserializable<MessageEmpty> {
        public static readonly byte[] Identifier = [132,202,166,144,];
        public PeerBase? PeerId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (PeerId is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            if(PeerId is not null) bytes.AddRange(PeerId.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var idLocal =  des.As<int>().Read();
            var peerIdLocal = (flagsLocal & 1) is 0 ? default : PeerBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Id = idLocal,
            PeerId = peerIdLocal,
            };
        }
    }
    public class Message : MessageBase, ITlSerializable, ITlDeserializable<Message> {
        public static readonly byte[] Identifier = [17,194,190,118,];
        public bool Out {get;set;}
        public bool Mentioned {get;set;}
        public bool MediaUnread {get;set;}
        public bool Silent {get;set;}
        public bool Post {get;set;}
        public bool FromScheduled {get;set;}
        public bool Legacy {get;set;}
        public bool EditHide {get;set;}
        public bool Pinned {get;set;}
        public bool Noforwards {get;set;}
        public bool InvertMedia {get;set;}
        public PeerBase? FromId {get;set;}
        public required PeerBase PeerId {get;set;}
        public PeerBase? SavedPeerId {get;set;}
        public MessageFwdHeaderBase? FwdFrom {get;set;}
        public long? ViaBotId {get;set;}
        public MessageReplyHeaderBase? ReplyTo {get;set;}
        public required int Date {get;set;}
        public required string MessageInner {get;set;}
        public MessageMediaBase? Media {get;set;}
        public ReplyMarkupBase? ReplyMarkup {get;set;}
        public List<MessageEntityBase>? Entities {get;set;}
        public int? Views {get;set;}
        public int? Forwards {get;set;}
        public MessageRepliesBase? Replies {get;set;}
        public int? EditDate {get;set;}
        public string? PostAuthor {get;set;}
        public long? GroupedId {get;set;}
        public MessageReactionsBase? Reactions {get;set;}
        public List<RestrictionReasonBase>? RestrictionReason {get;set;}
        public int? TtlPeriod {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (FromId is not null ? 256 : 0) | (SavedPeerId is not null ? 268435456 : 0) | (FwdFrom is not null ? 4 : 0) | (ViaBotId is not null ? 2048 : 0) | (ReplyTo is not null ? 8 : 0) | (Media is not null ? 512 : 0) | (ReplyMarkup is not null ? 64 : 0) | (Entities is not null ? 128 : 0) | (Views is not null ? 1024 : 0) | (Forwards is not null ? 1024 : 0) | (Replies is not null ? 8388608 : 0) | (EditDate is not null ? 32768 : 0) | (PostAuthor is not null ? 65536 : 0) | (GroupedId is not null ? 131072 : 0) | (Reactions is not null ? 1048576 : 0) | (RestrictionReason is not null ? 4194304 : 0) | (TtlPeriod is not null ? 33554432 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            if(FromId is not null) bytes.AddRange(FromId.TlSerialize());
            bytes.AddRange(PeerId.TlSerialize());
            if(SavedPeerId is not null) bytes.AddRange(SavedPeerId.TlSerialize());
            if(FwdFrom is not null) bytes.AddRange(FwdFrom.TlSerialize());
            if(ViaBotId is not null) bytes.AddRange(ViaBotId.TlSerialize());
            if(ReplyTo is not null) bytes.AddRange(ReplyTo.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(MessageInner.TlSerialize());
            if(Media is not null) bytes.AddRange(Media.TlSerialize());
            if(ReplyMarkup is not null) bytes.AddRange(ReplyMarkup.TlSerialize());
            if(Entities is not null) bytes.AddRange(Entities.TlSerialize());
            if(Views is not null) bytes.AddRange(Views.TlSerialize());
            if(Forwards is not null) bytes.AddRange(Forwards.TlSerialize());
            if(Replies is not null) bytes.AddRange(Replies.TlSerialize());
            if(EditDate is not null) bytes.AddRange(EditDate.TlSerialize());
            if(PostAuthor is not null) bytes.AddRange(PostAuthor.TlSerialize());
            if(GroupedId is not null) bytes.AddRange(GroupedId.TlSerialize());
            if(Reactions is not null) bytes.AddRange(Reactions.TlSerialize());
            if(RestrictionReason is not null) bytes.AddRange(RestrictionReason.TlSerialize());
            if(TtlPeriod is not null) bytes.AddRange(TtlPeriod.TlSerialize());
            return bytes.ToArray();
        }

        public new static Message TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var outLocal = (flagsLocal & 2) is 0 ? default : true ;
            var mentionedLocal = (flagsLocal & 16) is 0 ? default : true ;
            var mediaUnreadLocal = (flagsLocal & 32) is 0 ? default : true ;
            var silentLocal = (flagsLocal & 8192) is 0 ? default : true ;
            var postLocal = (flagsLocal & 16384) is 0 ? default : true ;
            var fromScheduledLocal = (flagsLocal & 262144) is 0 ? default : true ;
            var legacyLocal = (flagsLocal & 524288) is 0 ? default : true ;
            var editHideLocal = (flagsLocal & 2097152) is 0 ? default : true ;
            var pinnedLocal = (flagsLocal & 16777216) is 0 ? default : true ;
            var noforwardsLocal = (flagsLocal & 67108864) is 0 ? default : true ;
            var invertMediaLocal = (flagsLocal & 134217728) is 0 ? default : true ;
            var idLocal =  des.As<int>().Read();
            var fromIdLocal = (flagsLocal & 256) is 0 ? default : PeerBase.TlDeserialize(des) ;
            var peerIdLocal =  PeerBase.TlDeserialize(des);
            var savedPeerIdLocal = (flagsLocal & 268435456) is 0 ? default : PeerBase.TlDeserialize(des) ;
            var fwdFromLocal = (flagsLocal & 4) is 0 ? default : MessageFwdHeaderBase.TlDeserialize(des) ;
            var viaBotIdLocal = (flagsLocal & 2048) is 0 ? default : des.As<long>().Read() ;
            var replyToLocal = (flagsLocal & 8) is 0 ? default : MessageReplyHeaderBase.TlDeserialize(des) ;
            var dateLocal =  des.As<int>().Read();
            var messageInnerLocal =  des.As<string>().Read();
            var mediaLocal = (flagsLocal & 512) is 0 ? default : MessageMediaBase.TlDeserialize(des) ;
            var replyMarkupLocal = (flagsLocal & 64) is 0 ? default : ReplyMarkupBase.TlDeserialize(des) ;
            var entitiesLocal = (flagsLocal & 128) is 0 ? default : des.Read<MessageEntityBase>() ;
            var viewsLocal = (flagsLocal & 1024) is 0 ? default : des.As<int>().Read() ;
            var forwardsLocal = (flagsLocal & 1024) is 0 ? default : des.As<int>().Read() ;
            var repliesLocal = (flagsLocal & 8388608) is 0 ? default : MessageRepliesBase.TlDeserialize(des) ;
            var editDateLocal = (flagsLocal & 32768) is 0 ? default : des.As<int>().Read() ;
            var postAuthorLocal = (flagsLocal & 65536) is 0 ? default : des.As<string>().Read() ;
            var groupedIdLocal = (flagsLocal & 131072) is 0 ? default : des.As<long>().Read() ;
            var reactionsLocal = (flagsLocal & 1048576) is 0 ? default : MessageReactionsBase.TlDeserialize(des) ;
            var restrictionReasonLocal = (flagsLocal & 4194304) is 0 ? default : des.Read<RestrictionReasonBase>() ;
            var ttlPeriodLocal = (flagsLocal & 33554432) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Out = outLocal,
            Mentioned = mentionedLocal,
            MediaUnread = mediaUnreadLocal,
            Silent = silentLocal,
            Post = postLocal,
            FromScheduled = fromScheduledLocal,
            Legacy = legacyLocal,
            EditHide = editHideLocal,
            Pinned = pinnedLocal,
            Noforwards = noforwardsLocal,
            InvertMedia = invertMediaLocal,
            Id = idLocal,
            FromId = fromIdLocal,
            PeerId = peerIdLocal,
            SavedPeerId = savedPeerIdLocal,
            FwdFrom = fwdFromLocal,
            ViaBotId = viaBotIdLocal,
            ReplyTo = replyToLocal,
            Date = dateLocal,
            MessageInner = messageInnerLocal,
            Media = mediaLocal,
            ReplyMarkup = replyMarkupLocal,
            Entities = entitiesLocal,
            Views = viewsLocal,
            Forwards = forwardsLocal,
            Replies = repliesLocal,
            EditDate = editDateLocal,
            PostAuthor = postAuthorLocal,
            GroupedId = groupedIdLocal,
            Reactions = reactionsLocal,
            RestrictionReason = restrictionReasonLocal,
            TtlPeriod = ttlPeriodLocal,
            };
        }
    }
    public class MessageService : MessageBase, ITlSerializable, ITlDeserializable<MessageService> {
        public static readonly byte[] Identifier = [98,88,8,43,];
        public bool Out {get;set;}
        public bool Mentioned {get;set;}
        public bool MediaUnread {get;set;}
        public bool Silent {get;set;}
        public bool Post {get;set;}
        public bool Legacy {get;set;}
        public PeerBase? FromId {get;set;}
        public required PeerBase PeerId {get;set;}
        public MessageReplyHeaderBase? ReplyTo {get;set;}
        public required int Date {get;set;}
        public required MessageActionBase Action {get;set;}
        public int? TtlPeriod {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (FromId is not null ? 256 : 0) | (ReplyTo is not null ? 8 : 0) | (TtlPeriod is not null ? 33554432 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            if(FromId is not null) bytes.AddRange(FromId.TlSerialize());
            bytes.AddRange(PeerId.TlSerialize());
            if(ReplyTo is not null) bytes.AddRange(ReplyTo.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(Action.TlSerialize());
            if(TtlPeriod is not null) bytes.AddRange(TtlPeriod.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageService TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var outLocal = (flagsLocal & 2) is 0 ? default : true ;
            var mentionedLocal = (flagsLocal & 16) is 0 ? default : true ;
            var mediaUnreadLocal = (flagsLocal & 32) is 0 ? default : true ;
            var silentLocal = (flagsLocal & 8192) is 0 ? default : true ;
            var postLocal = (flagsLocal & 16384) is 0 ? default : true ;
            var legacyLocal = (flagsLocal & 524288) is 0 ? default : true ;
            var idLocal =  des.As<int>().Read();
            var fromIdLocal = (flagsLocal & 256) is 0 ? default : PeerBase.TlDeserialize(des) ;
            var peerIdLocal =  PeerBase.TlDeserialize(des);
            var replyToLocal = (flagsLocal & 8) is 0 ? default : MessageReplyHeaderBase.TlDeserialize(des) ;
            var dateLocal =  des.As<int>().Read();
            var actionLocal =  MessageActionBase.TlDeserialize(des);
            var ttlPeriodLocal = (flagsLocal & 33554432) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Out = outLocal,
            Mentioned = mentionedLocal,
            MediaUnread = mediaUnreadLocal,
            Silent = silentLocal,
            Post = postLocal,
            Legacy = legacyLocal,
            Id = idLocal,
            FromId = fromIdLocal,
            PeerId = peerIdLocal,
            ReplyTo = replyToLocal,
            Date = dateLocal,
            Action = actionLocal,
            TtlPeriod = ttlPeriodLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessageMediaNs {
    public class MessageMediaEmpty : MessageMediaBase, ITlSerializable, ITlDeserializable<MessageMediaEmpty> {
        public static readonly byte[] Identifier = [32,99,237,61,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static MessageMediaEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class MessageMediaPhoto : MessageMediaBase, ITlSerializable, ITlDeserializable<MessageMediaPhoto> {
        public static readonly byte[] Identifier = [215,80,81,105,];
        private int Flags;
        public bool Spoiler {get;set;}
        public PhotoBase? Photo {get;set;}
        public int? TtlSeconds {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Photo is not null ? 1 : 0) | (TtlSeconds is not null ? 4 : 0) ).TlSerialize());
            if(Photo is not null) bytes.AddRange(Photo.TlSerialize());
            if(TtlSeconds is not null) bytes.AddRange(TtlSeconds.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageMediaPhoto TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var spoilerLocal = (flagsLocal & 8) is 0 ? default : true ;
            var photoLocal = (flagsLocal & 1) is 0 ? default : PhotoBase.TlDeserialize(des) ;
            var ttlSecondsLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Spoiler = spoilerLocal,
            Photo = photoLocal,
            TtlSeconds = ttlSecondsLocal,
            };
        }
    }
    public class MessageMediaGeo : MessageMediaBase, ITlSerializable, ITlDeserializable<MessageMediaGeo> {
        public static readonly byte[] Identifier = [116,212,224,86,];
        public required GeoPointBase Geo {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Geo.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageMediaGeo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var geoLocal =  GeoPointBase.TlDeserialize(des);
            return new() {
            Geo = geoLocal,
            };
        }
    }
    public class MessageMediaContact : MessageMediaBase, ITlSerializable, ITlDeserializable<MessageMediaContact> {
        public static readonly byte[] Identifier = [73,41,50,112,];
        public required string PhoneNumber {get;set;}
        public required string FirstName {get;set;}
        public required string LastName {get;set;}
        public required string Vcard {get;set;}
        public required long UserId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PhoneNumber.TlSerialize());
            bytes.AddRange(FirstName.TlSerialize());
            bytes.AddRange(LastName.TlSerialize());
            bytes.AddRange(Vcard.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageMediaContact TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var phoneNumberLocal =  des.As<string>().Read();
            var firstNameLocal =  des.As<string>().Read();
            var lastNameLocal =  des.As<string>().Read();
            var vcardLocal =  des.As<string>().Read();
            var userIdLocal =  des.As<long>().Read();
            return new() {
            PhoneNumber = phoneNumberLocal,
            FirstName = firstNameLocal,
            LastName = lastNameLocal,
            Vcard = vcardLocal,
            UserId = userIdLocal,
            };
        }
    }
    public class MessageMediaUnsupported : MessageMediaBase, ITlSerializable, ITlDeserializable<MessageMediaUnsupported> {
        public static readonly byte[] Identifier = [158,244,132,159,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static MessageMediaUnsupported TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class MessageMediaDocument : MessageMediaBase, ITlSerializable, ITlDeserializable<MessageMediaDocument> {
        public static readonly byte[] Identifier = [45,215,244,76,];
        private int Flags;
        public bool Nopremium {get;set;}
        public bool Spoiler {get;set;}
        public bool Video {get;set;}
        public bool Round {get;set;}
        public bool Voice {get;set;}
        public DocumentBase? Document {get;set;}
        public DocumentBase? AltDocument {get;set;}
        public int? TtlSeconds {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Document is not null ? 1 : 0) | (AltDocument is not null ? 32 : 0) | (TtlSeconds is not null ? 4 : 0) ).TlSerialize());
            if(Document is not null) bytes.AddRange(Document.TlSerialize());
            if(AltDocument is not null) bytes.AddRange(AltDocument.TlSerialize());
            if(TtlSeconds is not null) bytes.AddRange(TtlSeconds.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageMediaDocument TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var nopremiumLocal = (flagsLocal & 8) is 0 ? default : true ;
            var spoilerLocal = (flagsLocal & 16) is 0 ? default : true ;
            var videoLocal = (flagsLocal & 64) is 0 ? default : true ;
            var roundLocal = (flagsLocal & 128) is 0 ? default : true ;
            var voiceLocal = (flagsLocal & 256) is 0 ? default : true ;
            var documentLocal = (flagsLocal & 1) is 0 ? default : DocumentBase.TlDeserialize(des) ;
            var altDocumentLocal = (flagsLocal & 32) is 0 ? default : DocumentBase.TlDeserialize(des) ;
            var ttlSecondsLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Nopremium = nopremiumLocal,
            Spoiler = spoilerLocal,
            Video = videoLocal,
            Round = roundLocal,
            Voice = voiceLocal,
            Document = documentLocal,
            AltDocument = altDocumentLocal,
            TtlSeconds = ttlSecondsLocal,
            };
        }
    }
    public class MessageMediaWebPage : MessageMediaBase, ITlSerializable, ITlDeserializable<MessageMediaWebPage> {
        public static readonly byte[] Identifier = [59,12,241,221,];
        private int Flags;
        public bool ForceLargeMedia {get;set;}
        public bool ForceSmallMedia {get;set;}
        public bool Manual {get;set;}
        public bool Safe {get;set;}
        public required WebPageBase Webpage {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Webpage.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageMediaWebPage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var forceLargeMediaLocal = (flagsLocal & 1) is 0 ? default : true ;
            var forceSmallMediaLocal = (flagsLocal & 2) is 0 ? default : true ;
            var manualLocal = (flagsLocal & 8) is 0 ? default : true ;
            var safeLocal = (flagsLocal & 16) is 0 ? default : true ;
            var webpageLocal =  WebPageBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            ForceLargeMedia = forceLargeMediaLocal,
            ForceSmallMedia = forceSmallMediaLocal,
            Manual = manualLocal,
            Safe = safeLocal,
            Webpage = webpageLocal,
            };
        }
    }
    public class MessageMediaVenue : MessageMediaBase, ITlSerializable, ITlDeserializable<MessageMediaVenue> {
        public static readonly byte[] Identifier = [63,83,192,46,];
        public required GeoPointBase Geo {get;set;}
        public required string Title {get;set;}
        public required string Address {get;set;}
        public required string Provider {get;set;}
        public required string VenueId {get;set;}
        public required string VenueType {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Geo.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(Address.TlSerialize());
            bytes.AddRange(Provider.TlSerialize());
            bytes.AddRange(VenueId.TlSerialize());
            bytes.AddRange(VenueType.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageMediaVenue TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var geoLocal =  GeoPointBase.TlDeserialize(des);
            var titleLocal =  des.As<string>().Read();
            var addressLocal =  des.As<string>().Read();
            var providerLocal =  des.As<string>().Read();
            var venueIdLocal =  des.As<string>().Read();
            var venueTypeLocal =  des.As<string>().Read();
            return new() {
            Geo = geoLocal,
            Title = titleLocal,
            Address = addressLocal,
            Provider = providerLocal,
            VenueId = venueIdLocal,
            VenueType = venueTypeLocal,
            };
        }
    }
    public class MessageMediaGame : MessageMediaBase, ITlSerializable, ITlDeserializable<MessageMediaGame> {
        public static readonly byte[] Identifier = [8,144,177,253,];
        public required GameBase Game {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Game.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageMediaGame TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var gameLocal =  GameBase.TlDeserialize(des);
            return new() {
            Game = gameLocal,
            };
        }
    }
    public class MessageMediaInvoice : MessageMediaBase, ITlSerializable, ITlDeserializable<MessageMediaInvoice> {
        public static readonly byte[] Identifier = [211,72,165,246,];
        private int Flags;
        public bool ShippingAddressRequested {get;set;}
        public bool Test {get;set;}
        public required string Title {get;set;}
        public required string Description {get;set;}
        public WebDocumentBase? Photo {get;set;}
        public int? ReceiptMsgId {get;set;}
        public required string Currency {get;set;}
        public required long TotalAmount {get;set;}
        public required string StartParam {get;set;}
        public MessageExtendedMediaBase? ExtendedMedia {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Photo is not null ? 1 : 0) | (ReceiptMsgId is not null ? 4 : 0) | (ExtendedMedia is not null ? 16 : 0) ).TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(Description.TlSerialize());
            if(Photo is not null) bytes.AddRange(Photo.TlSerialize());
            if(ReceiptMsgId is not null) bytes.AddRange(ReceiptMsgId.TlSerialize());
            bytes.AddRange(Currency.TlSerialize());
            bytes.AddRange(TotalAmount.TlSerialize());
            bytes.AddRange(StartParam.TlSerialize());
            if(ExtendedMedia is not null) bytes.AddRange(ExtendedMedia.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageMediaInvoice TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var shippingAddressRequestedLocal = (flagsLocal & 2) is 0 ? default : true ;
            var testLocal = (flagsLocal & 8) is 0 ? default : true ;
            var titleLocal =  des.As<string>().Read();
            var descriptionLocal =  des.As<string>().Read();
            var photoLocal = (flagsLocal & 1) is 0 ? default : WebDocumentBase.TlDeserialize(des) ;
            var receiptMsgIdLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            var currencyLocal =  des.As<string>().Read();
            var totalAmountLocal =  des.As<long>().Read();
            var startParamLocal =  des.As<string>().Read();
            var extendedMediaLocal = (flagsLocal & 16) is 0 ? default : MessageExtendedMediaBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            ShippingAddressRequested = shippingAddressRequestedLocal,
            Test = testLocal,
            Title = titleLocal,
            Description = descriptionLocal,
            Photo = photoLocal,
            ReceiptMsgId = receiptMsgIdLocal,
            Currency = currencyLocal,
            TotalAmount = totalAmountLocal,
            StartParam = startParamLocal,
            ExtendedMedia = extendedMediaLocal,
            };
        }
    }
    public class MessageMediaGeoLive : MessageMediaBase, ITlSerializable, ITlDeserializable<MessageMediaGeoLive> {
        public static readonly byte[] Identifier = [102,198,64,185,];
        private int Flags;
        public required GeoPointBase Geo {get;set;}
        public int? Heading {get;set;}
        public required int Period {get;set;}
        public int? ProximityNotificationRadius {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Heading is not null ? 1 : 0) | (ProximityNotificationRadius is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(Geo.TlSerialize());
            if(Heading is not null) bytes.AddRange(Heading.TlSerialize());
            bytes.AddRange(Period.TlSerialize());
            if(ProximityNotificationRadius is not null) bytes.AddRange(ProximityNotificationRadius.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageMediaGeoLive TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var geoLocal =  GeoPointBase.TlDeserialize(des);
            var headingLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var periodLocal =  des.As<int>().Read();
            var proximityNotificationRadiusLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Geo = geoLocal,
            Heading = headingLocal,
            Period = periodLocal,
            ProximityNotificationRadius = proximityNotificationRadiusLocal,
            };
        }
    }
    public class MessageMediaPoll : MessageMediaBase, ITlSerializable, ITlDeserializable<MessageMediaPoll> {
        public static readonly byte[] Identifier = [152,231,214,75,];
        public required PollBase Poll {get;set;}
        public required PollResultsBase Results {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Poll.TlSerialize());
            bytes.AddRange(Results.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageMediaPoll TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var pollLocal =  PollBase.TlDeserialize(des);
            var resultsLocal =  PollResultsBase.TlDeserialize(des);
            return new() {
            Poll = pollLocal,
            Results = resultsLocal,
            };
        }
    }
    public class MessageMediaDice : MessageMediaBase, ITlSerializable, ITlDeserializable<MessageMediaDice> {
        public static readonly byte[] Identifier = [139,229,126,63,];
        public required int Value {get;set;}
        public required string Emoticon {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Value.TlSerialize());
            bytes.AddRange(Emoticon.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageMediaDice TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var valueLocal =  des.As<int>().Read();
            var emoticonLocal =  des.As<string>().Read();
            return new() {
            Value = valueLocal,
            Emoticon = emoticonLocal,
            };
        }
    }
    public class MessageMediaStory : MessageMediaBase, ITlSerializable, ITlDeserializable<MessageMediaStory> {
        public static readonly byte[] Identifier = [131,98,203,104,];
        private int Flags;
        public bool ViaMention {get;set;}
        public required PeerBase Peer {get;set;}
        public required int Id {get;set;}
        public StoryItemBase? Story {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Story is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            if(Story is not null) bytes.AddRange(Story.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageMediaStory TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var viaMentionLocal = (flagsLocal & 2) is 0 ? default : true ;
            var peerLocal =  PeerBase.TlDeserialize(des);
            var idLocal =  des.As<int>().Read();
            var storyLocal = (flagsLocal & 1) is 0 ? default : StoryItemBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            ViaMention = viaMentionLocal,
            Peer = peerLocal,
            Id = idLocal,
            Story = storyLocal,
            };
        }
    }
    public class MessageMediaGiveaway : MessageMediaBase, ITlSerializable, ITlDeserializable<MessageMediaGiveaway> {
        public static readonly byte[] Identifier = [176,133,173,218,];
        private int Flags;
        public bool OnlyNewSubscribers {get;set;}
        public bool WinnersAreVisible {get;set;}
        public required List<long> Channels {get;set;}
        public List<string>? CountriesIso2 {get;set;}
        public string? PrizeDescription {get;set;}
        public required int Quantity {get;set;}
        public required int Months {get;set;}
        public required int UntilDate {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (CountriesIso2 is not null ? 2 : 0) | (PrizeDescription is not null ? 8 : 0) ).TlSerialize());
            bytes.AddRange(Channels.TlSerialize());
            if(CountriesIso2 is not null) bytes.AddRange(CountriesIso2.TlSerialize());
            if(PrizeDescription is not null) bytes.AddRange(PrizeDescription.TlSerialize());
            bytes.AddRange(Quantity.TlSerialize());
            bytes.AddRange(Months.TlSerialize());
            bytes.AddRange(UntilDate.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageMediaGiveaway TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var onlyNewSubscribersLocal = (flagsLocal & 1) is 0 ? default : true ;
            var winnersAreVisibleLocal = (flagsLocal & 4) is 0 ? default : true ;
            var channelsLocal =  des.ReadNumbers<long>();
            var countriesIso2Local = (flagsLocal & 2) is 0 ? default : des.ReadStrings() ;
            var prizeDescriptionLocal = (flagsLocal & 8) is 0 ? default : des.As<string>().Read() ;
            var quantityLocal =  des.As<int>().Read();
            var monthsLocal =  des.As<int>().Read();
            var untilDateLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            OnlyNewSubscribers = onlyNewSubscribersLocal,
            WinnersAreVisible = winnersAreVisibleLocal,
            Channels = channelsLocal,
            CountriesIso2 = countriesIso2Local,
            PrizeDescription = prizeDescriptionLocal,
            Quantity = quantityLocal,
            Months = monthsLocal,
            UntilDate = untilDateLocal,
            };
        }
    }
    public class MessageMediaGiveawayResults : MessageMediaBase, ITlSerializable, ITlDeserializable<MessageMediaGiveawayResults> {
        public static readonly byte[] Identifier = [104,16,153,198,];
        private int Flags;
        public bool OnlyNewSubscribers {get;set;}
        public bool Refunded {get;set;}
        public required long ChannelId {get;set;}
        public int? AdditionalPeersCount {get;set;}
        public required int LaunchMsgId {get;set;}
        public required int WinnersCount {get;set;}
        public required int UnclaimedCount {get;set;}
        public required List<long> Winners {get;set;}
        public required int Months {get;set;}
        public string? PrizeDescription {get;set;}
        public required int UntilDate {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (AdditionalPeersCount is not null ? 8 : 0) | (PrizeDescription is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(ChannelId.TlSerialize());
            if(AdditionalPeersCount is not null) bytes.AddRange(AdditionalPeersCount.TlSerialize());
            bytes.AddRange(LaunchMsgId.TlSerialize());
            bytes.AddRange(WinnersCount.TlSerialize());
            bytes.AddRange(UnclaimedCount.TlSerialize());
            bytes.AddRange(Winners.TlSerialize());
            bytes.AddRange(Months.TlSerialize());
            if(PrizeDescription is not null) bytes.AddRange(PrizeDescription.TlSerialize());
            bytes.AddRange(UntilDate.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageMediaGiveawayResults TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var onlyNewSubscribersLocal = (flagsLocal & 1) is 0 ? default : true ;
            var refundedLocal = (flagsLocal & 4) is 0 ? default : true ;
            var channelIdLocal =  des.As<long>().Read();
            var additionalPeersCountLocal = (flagsLocal & 8) is 0 ? default : des.As<int>().Read() ;
            var launchMsgIdLocal =  des.As<int>().Read();
            var winnersCountLocal =  des.As<int>().Read();
            var unclaimedCountLocal =  des.As<int>().Read();
            var winnersLocal =  des.ReadNumbers<long>();
            var monthsLocal =  des.As<int>().Read();
            var prizeDescriptionLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var untilDateLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            OnlyNewSubscribers = onlyNewSubscribersLocal,
            Refunded = refundedLocal,
            ChannelId = channelIdLocal,
            AdditionalPeersCount = additionalPeersCountLocal,
            LaunchMsgId = launchMsgIdLocal,
            WinnersCount = winnersCountLocal,
            UnclaimedCount = unclaimedCountLocal,
            Winners = winnersLocal,
            Months = monthsLocal,
            PrizeDescription = prizeDescriptionLocal,
            UntilDate = untilDateLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessageActionNs {
    public class MessageActionEmpty : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionEmpty> {
        public static readonly byte[] Identifier = [176,247,174,182,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static MessageActionEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class MessageActionChatCreate : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionChatCreate> {
        public static readonly byte[] Identifier = [173,203,71,189,];
        public required string Title {get;set;}
        public required List<long> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionChatCreate TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var titleLocal =  des.As<string>().Read();
            var usersLocal =  des.ReadNumbers<long>();
            return new() {
            Title = titleLocal,
            Users = usersLocal,
            };
        }
    }
    public class MessageActionChatEditTitle : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionChatEditTitle> {
        public static readonly byte[] Identifier = [90,206,161,181,];
        public required string Title {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Title.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionChatEditTitle TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var titleLocal =  des.As<string>().Read();
            return new() {
            Title = titleLocal,
            };
        }
    }
    public class MessageActionChatEditPhoto : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionChatEditPhoto> {
        public static readonly byte[] Identifier = [168,19,203,127,];
        public required PhotoBase Photo {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Photo.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionChatEditPhoto TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var photoLocal =  PhotoBase.TlDeserialize(des);
            return new() {
            Photo = photoLocal,
            };
        }
    }
    public class MessageActionChatDeletePhoto : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionChatDeletePhoto> {
        public static readonly byte[] Identifier = [239,251,227,149,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static MessageActionChatDeletePhoto TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class MessageActionChatAddUser : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionChatAddUser> {
        public static readonly byte[] Identifier = [0,253,206,21,];
        public required List<long> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionChatAddUser TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var usersLocal =  des.ReadNumbers<long>();
            return new() {
            Users = usersLocal,
            };
        }
    }
    public class MessageActionChatDeleteUser : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionChatDeleteUser> {
        public static readonly byte[] Identifier = [204,48,63,164,];
        public required long UserId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionChatDeleteUser TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            return new() {
            UserId = userIdLocal,
            };
        }
    }
    public class MessageActionChatJoinedByLink : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionChatJoinedByLink> {
        public static readonly byte[] Identifier = [195,36,18,3,];
        public required long InviterId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(InviterId.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionChatJoinedByLink TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var inviterIdLocal =  des.As<long>().Read();
            return new() {
            InviterId = inviterIdLocal,
            };
        }
    }
    public class MessageActionChannelCreate : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionChannelCreate> {
        public static readonly byte[] Identifier = [146,172,210,149,];
        public required string Title {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Title.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionChannelCreate TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var titleLocal =  des.As<string>().Read();
            return new() {
            Title = titleLocal,
            };
        }
    }
    public class MessageActionChatMigrateTo : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionChatMigrateTo> {
        public static readonly byte[] Identifier = [146,127,3,225,];
        public required long ChannelId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChannelId.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionChatMigrateTo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var channelIdLocal =  des.As<long>().Read();
            return new() {
            ChannelId = channelIdLocal,
            };
        }
    }
    public class MessageActionChannelMigrateFrom : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionChannelMigrateFrom> {
        public static readonly byte[] Identifier = [233,72,57,234,];
        public required string Title {get;set;}
        public required long ChatId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(ChatId.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionChannelMigrateFrom TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var titleLocal =  des.As<string>().Read();
            var chatIdLocal =  des.As<long>().Read();
            return new() {
            Title = titleLocal,
            ChatId = chatIdLocal,
            };
        }
    }
    public class MessageActionPinMessage : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionPinMessage> {
        public static readonly byte[] Identifier = [237,56,189,148,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static MessageActionPinMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class MessageActionHistoryClear : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionHistoryClear> {
        public static readonly byte[] Identifier = [4,182,186,159,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static MessageActionHistoryClear TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class MessageActionGameScore : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionGameScore> {
        public static readonly byte[] Identifier = [118,40,167,146,];
        public required long GameId {get;set;}
        public required int Score {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(GameId.TlSerialize());
            bytes.AddRange(Score.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionGameScore TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var gameIdLocal =  des.As<long>().Read();
            var scoreLocal =  des.As<int>().Read();
            return new() {
            GameId = gameIdLocal,
            Score = scoreLocal,
            };
        }
    }
    public class MessageActionPaymentSentMe : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionPaymentSentMe> {
        public static readonly byte[] Identifier = [39,179,49,143,];
        private int Flags;
        public bool RecurringInit {get;set;}
        public bool RecurringUsed {get;set;}
        public required string Currency {get;set;}
        public required long TotalAmount {get;set;}
        public required byte[] Payload {get;set;}
        public PaymentRequestedInfoBase? Info {get;set;}
        public string? ShippingOptionId {get;set;}
        public required PaymentChargeBase Charge {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Info is not null ? 1 : 0) | (ShippingOptionId is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(Currency.TlSerialize());
            bytes.AddRange(TotalAmount.TlSerialize());
            bytes.AddRange(Payload.TlSerialize());
            if(Info is not null) bytes.AddRange(Info.TlSerialize());
            if(ShippingOptionId is not null) bytes.AddRange(ShippingOptionId.TlSerialize());
            bytes.AddRange(Charge.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionPaymentSentMe TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var recurringInitLocal = (flagsLocal & 4) is 0 ? default : true ;
            var recurringUsedLocal = (flagsLocal & 8) is 0 ? default : true ;
            var currencyLocal =  des.As<string>().Read();
            var totalAmountLocal =  des.As<long>().Read();
            var payloadLocal =  des.As<byte[]>().Read();
            var infoLocal = (flagsLocal & 1) is 0 ? default : PaymentRequestedInfoBase.TlDeserialize(des) ;
            var shippingOptionIdLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var chargeLocal =  PaymentChargeBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            RecurringInit = recurringInitLocal,
            RecurringUsed = recurringUsedLocal,
            Currency = currencyLocal,
            TotalAmount = totalAmountLocal,
            Payload = payloadLocal,
            Info = infoLocal,
            ShippingOptionId = shippingOptionIdLocal,
            Charge = chargeLocal,
            };
        }
    }
    public class MessageActionPaymentSent : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionPaymentSent> {
        public static readonly byte[] Identifier = [86,63,22,150,];
        private int Flags;
        public bool RecurringInit {get;set;}
        public bool RecurringUsed {get;set;}
        public required string Currency {get;set;}
        public required long TotalAmount {get;set;}
        public string? InvoiceSlug {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (InvoiceSlug is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Currency.TlSerialize());
            bytes.AddRange(TotalAmount.TlSerialize());
            if(InvoiceSlug is not null) bytes.AddRange(InvoiceSlug.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionPaymentSent TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var recurringInitLocal = (flagsLocal & 4) is 0 ? default : true ;
            var recurringUsedLocal = (flagsLocal & 8) is 0 ? default : true ;
            var currencyLocal =  des.As<string>().Read();
            var totalAmountLocal =  des.As<long>().Read();
            var invoiceSlugLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            RecurringInit = recurringInitLocal,
            RecurringUsed = recurringUsedLocal,
            Currency = currencyLocal,
            TotalAmount = totalAmountLocal,
            InvoiceSlug = invoiceSlugLocal,
            };
        }
    }
    public class MessageActionPhoneCall : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionPhoneCall> {
        public static readonly byte[] Identifier = [127,26,225,128,];
        private int Flags;
        public bool Video {get;set;}
        public required long CallId {get;set;}
        public PhoneCallDiscardReasonBase? Reason {get;set;}
        public int? Duration {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Reason is not null ? 1 : 0) | (Duration is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(CallId.TlSerialize());
            if(Reason is not null) bytes.AddRange(Reason.TlSerialize());
            if(Duration is not null) bytes.AddRange(Duration.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionPhoneCall TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var videoLocal = (flagsLocal & 4) is 0 ? default : true ;
            var callIdLocal =  des.As<long>().Read();
            var reasonLocal = (flagsLocal & 1) is 0 ? default : PhoneCallDiscardReasonBase.TlDeserialize(des) ;
            var durationLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Video = videoLocal,
            CallId = callIdLocal,
            Reason = reasonLocal,
            Duration = durationLocal,
            };
        }
    }
    public class MessageActionScreenshotTaken : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionScreenshotTaken> {
        public static readonly byte[] Identifier = [155,146,146,71,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static MessageActionScreenshotTaken TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class MessageActionCustomAction : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionCustomAction> {
        public static readonly byte[] Identifier = [86,159,230,250,];
        public required string Message {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Message.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionCustomAction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var messageLocal =  des.As<string>().Read();
            return new() {
            Message = messageLocal,
            };
        }
    }
    public class MessageActionBotAllowed : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionBotAllowed> {
        public static readonly byte[] Identifier = [121,214,22,197,];
        private int Flags;
        public bool AttachMenu {get;set;}
        public bool FromRequest {get;set;}
        public string? Domain {get;set;}
        public BotAppBase? App {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Domain is not null ? 1 : 0) | (App is not null ? 4 : 0) ).TlSerialize());
            if(Domain is not null) bytes.AddRange(Domain.TlSerialize());
            if(App is not null) bytes.AddRange(App.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionBotAllowed TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var attachMenuLocal = (flagsLocal & 2) is 0 ? default : true ;
            var fromRequestLocal = (flagsLocal & 8) is 0 ? default : true ;
            var domainLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var appLocal = (flagsLocal & 4) is 0 ? default : BotAppBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            AttachMenu = attachMenuLocal,
            FromRequest = fromRequestLocal,
            Domain = domainLocal,
            App = appLocal,
            };
        }
    }
    public class MessageActionSecureValuesSentMe : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionSecureValuesSentMe> {
        public static readonly byte[] Identifier = [83,115,40,27,];
        public required List<SecureValueBase> Values {get;set;}
        public required SecureCredentialsEncryptedBase Credentials {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Values.TlSerialize());
            bytes.AddRange(Credentials.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionSecureValuesSentMe TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var valuesLocal =  des.Read<SecureValueBase>();
            var credentialsLocal =  SecureCredentialsEncryptedBase.TlDeserialize(des);
            return new() {
            Values = valuesLocal,
            Credentials = credentialsLocal,
            };
        }
    }
    public class MessageActionSecureValuesSent : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionSecureValuesSent> {
        public static readonly byte[] Identifier = [84,97,92,217,];
        public required List<SecureValueTypeBase> Types {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Types.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionSecureValuesSent TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var typesLocal =  des.Read<SecureValueTypeBase>();
            return new() {
            Types = typesLocal,
            };
        }
    }
    public class MessageActionContactSignUp : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionContactSignUp> {
        public static readonly byte[] Identifier = [118,95,242,243,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static MessageActionContactSignUp TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class MessageActionGeoProximityReached : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionGeoProximityReached> {
        public static readonly byte[] Identifier = [151,214,224,152,];
        public required PeerBase FromId {get;set;}
        public required PeerBase ToId {get;set;}
        public required int Distance {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(FromId.TlSerialize());
            bytes.AddRange(ToId.TlSerialize());
            bytes.AddRange(Distance.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionGeoProximityReached TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var fromIdLocal =  PeerBase.TlDeserialize(des);
            var toIdLocal =  PeerBase.TlDeserialize(des);
            var distanceLocal =  des.As<int>().Read();
            return new() {
            FromId = fromIdLocal,
            ToId = toIdLocal,
            Distance = distanceLocal,
            };
        }
    }
    public class MessageActionGroupCall : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionGroupCall> {
        public static readonly byte[] Identifier = [66,127,13,122,];
        private int Flags;
        public required InputGroupCallBase Call {get;set;}
        public int? Duration {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Duration is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Call.TlSerialize());
            if(Duration is not null) bytes.AddRange(Duration.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionGroupCall TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var callLocal =  InputGroupCallBase.TlDeserialize(des);
            var durationLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Call = callLocal,
            Duration = durationLocal,
            };
        }
    }
    public class MessageActionInviteToGroupCall : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionInviteToGroupCall> {
        public static readonly byte[] Identifier = [247,146,47,80,];
        public required InputGroupCallBase Call {get;set;}
        public required List<long> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Call.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionInviteToGroupCall TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var callLocal =  InputGroupCallBase.TlDeserialize(des);
            var usersLocal =  des.ReadNumbers<long>();
            return new() {
            Call = callLocal,
            Users = usersLocal,
            };
        }
    }
    public class MessageActionSetMessagesTTL : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionSetMessagesTTL> {
        public static readonly byte[] Identifier = [123,77,19,60,];
        private int Flags;
        public required int Period {get;set;}
        public long? AutoSettingFrom {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (AutoSettingFrom is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Period.TlSerialize());
            if(AutoSettingFrom is not null) bytes.AddRange(AutoSettingFrom.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionSetMessagesTTL TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var periodLocal =  des.As<int>().Read();
            var autoSettingFromLocal = (flagsLocal & 1) is 0 ? default : des.As<long>().Read() ;
            return new() {
            Flags = flagsLocal,
            Period = periodLocal,
            AutoSettingFrom = autoSettingFromLocal,
            };
        }
    }
    public class MessageActionGroupCallScheduled : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionGroupCallScheduled> {
        public static readonly byte[] Identifier = [97,118,160,179,];
        public required InputGroupCallBase Call {get;set;}
        public required int ScheduleDate {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Call.TlSerialize());
            bytes.AddRange(ScheduleDate.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionGroupCallScheduled TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var callLocal =  InputGroupCallBase.TlDeserialize(des);
            var scheduleDateLocal =  des.As<int>().Read();
            return new() {
            Call = callLocal,
            ScheduleDate = scheduleDateLocal,
            };
        }
    }
    public class MessageActionSetChatTheme : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionSetChatTheme> {
        public static readonly byte[] Identifier = [69,99,120,170,];
        public required string Emoticon {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Emoticon.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionSetChatTheme TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var emoticonLocal =  des.As<string>().Read();
            return new() {
            Emoticon = emoticonLocal,
            };
        }
    }
    public class MessageActionChatJoinedByRequest : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionChatJoinedByRequest> {
        public static readonly byte[] Identifier = [203,163,188,235,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static MessageActionChatJoinedByRequest TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class MessageActionWebViewDataSentMe : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionWebViewDataSentMe> {
        public static readonly byte[] Identifier = [121,128,221,71,];
        public required string Text {get;set;}
        public required string Data {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(Data.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionWebViewDataSentMe TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  des.As<string>().Read();
            var dataLocal =  des.As<string>().Read();
            return new() {
            Text = textLocal,
            Data = dataLocal,
            };
        }
    }
    public class MessageActionWebViewDataSent : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionWebViewDataSent> {
        public static readonly byte[] Identifier = [181,140,195,180,];
        public required string Text {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionWebViewDataSent TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  des.As<string>().Read();
            return new() {
            Text = textLocal,
            };
        }
    }
    public class MessageActionGiftPremium : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionGiftPremium> {
        public static readonly byte[] Identifier = [236,106,61,200,];
        private int Flags;
        public required string Currency {get;set;}
        public required long Amount {get;set;}
        public required int Months {get;set;}
        public string? CryptoCurrency {get;set;}
        public long? CryptoAmount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (CryptoCurrency is not null ? 1 : 0) | (CryptoAmount is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Currency.TlSerialize());
            bytes.AddRange(Amount.TlSerialize());
            bytes.AddRange(Months.TlSerialize());
            if(CryptoCurrency is not null) bytes.AddRange(CryptoCurrency.TlSerialize());
            if(CryptoAmount is not null) bytes.AddRange(CryptoAmount.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionGiftPremium TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var currencyLocal =  des.As<string>().Read();
            var amountLocal =  des.As<long>().Read();
            var monthsLocal =  des.As<int>().Read();
            var cryptoCurrencyLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var cryptoAmountLocal = (flagsLocal & 1) is 0 ? default : des.As<long>().Read() ;
            return new() {
            Flags = flagsLocal,
            Currency = currencyLocal,
            Amount = amountLocal,
            Months = monthsLocal,
            CryptoCurrency = cryptoCurrencyLocal,
            CryptoAmount = cryptoAmountLocal,
            };
        }
    }
    public class MessageActionTopicCreate : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionTopicCreate> {
        public static readonly byte[] Identifier = [86,146,153,13,];
        private int Flags;
        public required string Title {get;set;}
        public required int IconColor {get;set;}
        public long? IconEmojiId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (IconEmojiId is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(IconColor.TlSerialize());
            if(IconEmojiId is not null) bytes.AddRange(IconEmojiId.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionTopicCreate TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var titleLocal =  des.As<string>().Read();
            var iconColorLocal =  des.As<int>().Read();
            var iconEmojiIdLocal = (flagsLocal & 1) is 0 ? default : des.As<long>().Read() ;
            return new() {
            Flags = flagsLocal,
            Title = titleLocal,
            IconColor = iconColorLocal,
            IconEmojiId = iconEmojiIdLocal,
            };
        }
    }
    public class MessageActionTopicEdit : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionTopicEdit> {
        public static readonly byte[] Identifier = [32,72,148,192,];
        private int Flags;
        public string? Title {get;set;}
        public long? IconEmojiId {get;set;}
        public bool Closed {get;set;}
        public bool Hidden {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Title is not null ? 1 : 0) | (IconEmojiId is not null ? 2 : 0) ).TlSerialize());
            if(Title is not null) bytes.AddRange(Title.TlSerialize());
            if(IconEmojiId is not null) bytes.AddRange(IconEmojiId.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionTopicEdit TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var titleLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var iconEmojiIdLocal = (flagsLocal & 2) is 0 ? default : des.As<long>().Read() ;
            var closedLocal = (flagsLocal & 4) is 0 ? default : true ;
            var hiddenLocal = (flagsLocal & 8) is 0 ? default : true ;
            return new() {
            Flags = flagsLocal,
            Title = titleLocal,
            IconEmojiId = iconEmojiIdLocal,
            Closed = closedLocal,
            Hidden = hiddenLocal,
            };
        }
    }
    public class MessageActionSuggestProfilePhoto : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionSuggestProfilePhoto> {
        public static readonly byte[] Identifier = [94,99,222,87,];
        public required PhotoBase Photo {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Photo.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionSuggestProfilePhoto TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var photoLocal =  PhotoBase.TlDeserialize(des);
            return new() {
            Photo = photoLocal,
            };
        }
    }
    public class MessageActionRequestedPeer : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionRequestedPeer> {
        public static readonly byte[] Identifier = [155,142,81,49,];
        public required int ButtonId {get;set;}
        public required List<PeerBase> Peers {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ButtonId.TlSerialize());
            bytes.AddRange(Peers.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionRequestedPeer TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var buttonIdLocal =  des.As<int>().Read();
            var peersLocal =  des.Read<PeerBase>();
            return new() {
            ButtonId = buttonIdLocal,
            Peers = peersLocal,
            };
        }
    }
    public class MessageActionSetChatWallPaper : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionSetChatWallPaper> {
        public static readonly byte[] Identifier = [244,163,96,80,];
        private int Flags;
        public bool Same {get;set;}
        public bool ForBoth {get;set;}
        public required WallPaperBase Wallpaper {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Wallpaper.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionSetChatWallPaper TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var sameLocal = (flagsLocal & 1) is 0 ? default : true ;
            var forBothLocal = (flagsLocal & 2) is 0 ? default : true ;
            var wallpaperLocal =  WallPaperBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Same = sameLocal,
            ForBoth = forBothLocal,
            Wallpaper = wallpaperLocal,
            };
        }
    }
    public class MessageActionGiftCode : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionGiftCode> {
        public static readonly byte[] Identifier = [9,46,140,103,];
        private int Flags;
        public bool ViaGiveaway {get;set;}
        public bool Unclaimed {get;set;}
        public PeerBase? BoostPeer {get;set;}
        public required int Months {get;set;}
        public required string Slug {get;set;}
        public string? Currency {get;set;}
        public long? Amount {get;set;}
        public string? CryptoCurrency {get;set;}
        public long? CryptoAmount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (BoostPeer is not null ? 2 : 0) | (Currency is not null ? 4 : 0) | (Amount is not null ? 4 : 0) | (CryptoCurrency is not null ? 8 : 0) | (CryptoAmount is not null ? 8 : 0) ).TlSerialize());
            if(BoostPeer is not null) bytes.AddRange(BoostPeer.TlSerialize());
            bytes.AddRange(Months.TlSerialize());
            bytes.AddRange(Slug.TlSerialize());
            if(Currency is not null) bytes.AddRange(Currency.TlSerialize());
            if(Amount is not null) bytes.AddRange(Amount.TlSerialize());
            if(CryptoCurrency is not null) bytes.AddRange(CryptoCurrency.TlSerialize());
            if(CryptoAmount is not null) bytes.AddRange(CryptoAmount.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionGiftCode TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var viaGiveawayLocal = (flagsLocal & 1) is 0 ? default : true ;
            var unclaimedLocal = (flagsLocal & 4) is 0 ? default : true ;
            var boostPeerLocal = (flagsLocal & 2) is 0 ? default : PeerBase.TlDeserialize(des) ;
            var monthsLocal =  des.As<int>().Read();
            var slugLocal =  des.As<string>().Read();
            var currencyLocal = (flagsLocal & 4) is 0 ? default : des.As<string>().Read() ;
            var amountLocal = (flagsLocal & 4) is 0 ? default : des.As<long>().Read() ;
            var cryptoCurrencyLocal = (flagsLocal & 8) is 0 ? default : des.As<string>().Read() ;
            var cryptoAmountLocal = (flagsLocal & 8) is 0 ? default : des.As<long>().Read() ;
            return new() {
            Flags = flagsLocal,
            ViaGiveaway = viaGiveawayLocal,
            Unclaimed = unclaimedLocal,
            BoostPeer = boostPeerLocal,
            Months = monthsLocal,
            Slug = slugLocal,
            Currency = currencyLocal,
            Amount = amountLocal,
            CryptoCurrency = cryptoCurrencyLocal,
            CryptoAmount = cryptoAmountLocal,
            };
        }
    }
    public class MessageActionGiveawayLaunch : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionGiveawayLaunch> {
        public static readonly byte[] Identifier = [237,169,43,51,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static MessageActionGiveawayLaunch TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class MessageActionGiveawayResults : MessageActionBase, ITlSerializable, ITlDeserializable<MessageActionGiveawayResults> {
        public static readonly byte[] Identifier = [197,173,159,42,];
        public required int WinnersCount {get;set;}
        public required int UnclaimedCount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(WinnersCount.TlSerialize());
            bytes.AddRange(UnclaimedCount.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageActionGiveawayResults TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var winnersCountLocal =  des.As<int>().Read();
            var unclaimedCountLocal =  des.As<int>().Read();
            return new() {
            WinnersCount = winnersCountLocal,
            UnclaimedCount = unclaimedCountLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.DialogNs {
    public class Dialog : DialogBase, ITlSerializable, ITlDeserializable<Dialog> {
        public static readonly byte[] Identifier = [198,8,138,213,];
        public bool UnreadMark {get;set;}
        public bool ViewForumAsMessages {get;set;}
        public required int ReadInboxMaxId {get;set;}
        public required int ReadOutboxMaxId {get;set;}
        public required int UnreadCount {get;set;}
        public required int UnreadMentionsCount {get;set;}
        public required int UnreadReactionsCount {get;set;}
        public required PeerNotifySettingsBase NotifySettings {get;set;}
        public int? Pts {get;set;}
        public DraftMessageBase? Draft {get;set;}
        public int? FolderId {get;set;}
        public int? TtlPeriod {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Pts is not null ? 1 : 0) | (Draft is not null ? 2 : 0) | (FolderId is not null ? 16 : 0) | (TtlPeriod is not null ? 32 : 0) ).TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(TopMessage.TlSerialize());
            bytes.AddRange(ReadInboxMaxId.TlSerialize());
            bytes.AddRange(ReadOutboxMaxId.TlSerialize());
            bytes.AddRange(UnreadCount.TlSerialize());
            bytes.AddRange(UnreadMentionsCount.TlSerialize());
            bytes.AddRange(UnreadReactionsCount.TlSerialize());
            bytes.AddRange(NotifySettings.TlSerialize());
            if(Pts is not null) bytes.AddRange(Pts.TlSerialize());
            if(Draft is not null) bytes.AddRange(Draft.TlSerialize());
            if(FolderId is not null) bytes.AddRange(FolderId.TlSerialize());
            if(TtlPeriod is not null) bytes.AddRange(TtlPeriod.TlSerialize());
            return bytes.ToArray();
        }

        public new static Dialog TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var pinnedLocal = (flagsLocal & 4) is 0 ? default : true ;
            var unreadMarkLocal = (flagsLocal & 8) is 0 ? default : true ;
            var viewForumAsMessagesLocal = (flagsLocal & 64) is 0 ? default : true ;
            var peerLocal =  PeerBase.TlDeserialize(des);
            var topMessageLocal =  des.As<int>().Read();
            var readInboxMaxIdLocal =  des.As<int>().Read();
            var readOutboxMaxIdLocal =  des.As<int>().Read();
            var unreadCountLocal =  des.As<int>().Read();
            var unreadMentionsCountLocal =  des.As<int>().Read();
            var unreadReactionsCountLocal =  des.As<int>().Read();
            var notifySettingsLocal =  PeerNotifySettingsBase.TlDeserialize(des);
            var ptsLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var draftLocal = (flagsLocal & 2) is 0 ? default : DraftMessageBase.TlDeserialize(des) ;
            var folderIdLocal = (flagsLocal & 16) is 0 ? default : des.As<int>().Read() ;
            var ttlPeriodLocal = (flagsLocal & 32) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Pinned = pinnedLocal,
            UnreadMark = unreadMarkLocal,
            ViewForumAsMessages = viewForumAsMessagesLocal,
            Peer = peerLocal,
            TopMessage = topMessageLocal,
            ReadInboxMaxId = readInboxMaxIdLocal,
            ReadOutboxMaxId = readOutboxMaxIdLocal,
            UnreadCount = unreadCountLocal,
            UnreadMentionsCount = unreadMentionsCountLocal,
            UnreadReactionsCount = unreadReactionsCountLocal,
            NotifySettings = notifySettingsLocal,
            Pts = ptsLocal,
            Draft = draftLocal,
            FolderId = folderIdLocal,
            TtlPeriod = ttlPeriodLocal,
            };
        }
    }
    public class DialogFolder : DialogBase, ITlSerializable, ITlDeserializable<DialogFolder> {
        public static readonly byte[] Identifier = [76,19,189,113,];
        public required FolderBase Folder {get;set;}
        public required int UnreadMutedPeersCount {get;set;}
        public required int UnreadUnmutedPeersCount {get;set;}
        public required int UnreadMutedMessagesCount {get;set;}
        public required int UnreadUnmutedMessagesCount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Folder.TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(TopMessage.TlSerialize());
            bytes.AddRange(UnreadMutedPeersCount.TlSerialize());
            bytes.AddRange(UnreadUnmutedPeersCount.TlSerialize());
            bytes.AddRange(UnreadMutedMessagesCount.TlSerialize());
            bytes.AddRange(UnreadUnmutedMessagesCount.TlSerialize());
            return bytes.ToArray();
        }

        public new static DialogFolder TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var pinnedLocal = (flagsLocal & 4) is 0 ? default : true ;
            var folderLocal =  FolderBase.TlDeserialize(des);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var topMessageLocal =  des.As<int>().Read();
            var unreadMutedPeersCountLocal =  des.As<int>().Read();
            var unreadUnmutedPeersCountLocal =  des.As<int>().Read();
            var unreadMutedMessagesCountLocal =  des.As<int>().Read();
            var unreadUnmutedMessagesCountLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            Pinned = pinnedLocal,
            Folder = folderLocal,
            Peer = peerLocal,
            TopMessage = topMessageLocal,
            UnreadMutedPeersCount = unreadMutedPeersCountLocal,
            UnreadUnmutedPeersCount = unreadUnmutedPeersCountLocal,
            UnreadMutedMessagesCount = unreadMutedMessagesCountLocal,
            UnreadUnmutedMessagesCount = unreadUnmutedMessagesCountLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PhotoNs {
    public class PhotoEmpty : PhotoBase, ITlSerializable, ITlDeserializable<PhotoEmpty> {
        public static readonly byte[] Identifier = [45,178,49,35,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhotoEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            };
        }
    }
    public class Photo : PhotoBase, ITlSerializable, ITlDeserializable<Photo> {
        public static readonly byte[] Identifier = [101,122,25,251,];
        private int Flags;
        public bool HasStickers {get;set;}
        public required long AccessHash {get;set;}
        public required byte[] FileReference {get;set;}
        public required int Date {get;set;}
        public required List<PhotoSizeBase> Sizes {get;set;}
        public List<VideoSizeBase>? VideoSizes {get;set;}
        public required int DcId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (VideoSizes is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(FileReference.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(Sizes.TlSerialize());
            if(VideoSizes is not null) bytes.AddRange(VideoSizes.TlSerialize());
            bytes.AddRange(DcId.TlSerialize());
            return bytes.ToArray();
        }

        public new static Photo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var hasStickersLocal = (flagsLocal & 1) is 0 ? default : true ;
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var fileReferenceLocal =  des.As<byte[]>().Read();
            var dateLocal =  des.As<int>().Read();
            var sizesLocal =  des.Read<PhotoSizeBase>();
            var videoSizesLocal = (flagsLocal & 2) is 0 ? default : des.Read<VideoSizeBase>() ;
            var dcIdLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            HasStickers = hasStickersLocal,
            Id = idLocal,
            AccessHash = accessHashLocal,
            FileReference = fileReferenceLocal,
            Date = dateLocal,
            Sizes = sizesLocal,
            VideoSizes = videoSizesLocal,
            DcId = dcIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PhotoSizeNs {
    public class PhotoSizeEmpty : PhotoSizeBase, ITlSerializable, ITlDeserializable<PhotoSizeEmpty> {
        public static readonly byte[] Identifier = [60,226,23,14,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Type.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhotoSizeEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var typeLocal =  des.As<string>().Read();
            return new() {
            Type = typeLocal,
            };
        }
    }
    public class PhotoSize : PhotoSizeBase, ITlSerializable, ITlDeserializable<PhotoSize> {
        public static readonly byte[] Identifier = [96,142,199,117,];
        public required int W {get;set;}
        public required int H {get;set;}
        public required int Size {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Type.TlSerialize());
            bytes.AddRange(W.TlSerialize());
            bytes.AddRange(H.TlSerialize());
            bytes.AddRange(Size.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhotoSize TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var typeLocal =  des.As<string>().Read();
            var wLocal =  des.As<int>().Read();
            var hLocal =  des.As<int>().Read();
            var sizeLocal =  des.As<int>().Read();
            return new() {
            Type = typeLocal,
            W = wLocal,
            H = hLocal,
            Size = sizeLocal,
            };
        }
    }
    public class PhotoCachedSize : PhotoSizeBase, ITlSerializable, ITlDeserializable<PhotoCachedSize> {
        public static readonly byte[] Identifier = [214,26,30,2,];
        public required int W {get;set;}
        public required int H {get;set;}
        public required byte[] Bytes {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Type.TlSerialize());
            bytes.AddRange(W.TlSerialize());
            bytes.AddRange(H.TlSerialize());
            bytes.AddRange(Bytes.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhotoCachedSize TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var typeLocal =  des.As<string>().Read();
            var wLocal =  des.As<int>().Read();
            var hLocal =  des.As<int>().Read();
            var bytesLocal =  des.As<byte[]>().Read();
            return new() {
            Type = typeLocal,
            W = wLocal,
            H = hLocal,
            Bytes = bytesLocal,
            };
        }
    }
    public class PhotoStrippedSize : PhotoSizeBase, ITlSerializable, ITlDeserializable<PhotoStrippedSize> {
        public static readonly byte[] Identifier = [46,188,176,224,];
        public required byte[] Bytes {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Type.TlSerialize());
            bytes.AddRange(Bytes.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhotoStrippedSize TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var typeLocal =  des.As<string>().Read();
            var bytesLocal =  des.As<byte[]>().Read();
            return new() {
            Type = typeLocal,
            Bytes = bytesLocal,
            };
        }
    }
    public class PhotoSizeProgressive : PhotoSizeBase, ITlSerializable, ITlDeserializable<PhotoSizeProgressive> {
        public static readonly byte[] Identifier = [149,251,62,250,];
        public required int W {get;set;}
        public required int H {get;set;}
        public required List<int> Sizes {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Type.TlSerialize());
            bytes.AddRange(W.TlSerialize());
            bytes.AddRange(H.TlSerialize());
            bytes.AddRange(Sizes.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhotoSizeProgressive TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var typeLocal =  des.As<string>().Read();
            var wLocal =  des.As<int>().Read();
            var hLocal =  des.As<int>().Read();
            var sizesLocal =  des.ReadNumbers<int>();
            return new() {
            Type = typeLocal,
            W = wLocal,
            H = hLocal,
            Sizes = sizesLocal,
            };
        }
    }
    public class PhotoPathSize : PhotoSizeBase, ITlSerializable, ITlDeserializable<PhotoPathSize> {
        public static readonly byte[] Identifier = [65,77,33,216,];
        public required byte[] Bytes {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Type.TlSerialize());
            bytes.AddRange(Bytes.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhotoPathSize TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var typeLocal =  des.As<string>().Read();
            var bytesLocal =  des.As<byte[]>().Read();
            return new() {
            Type = typeLocal,
            Bytes = bytesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.GeoPointNs {
    public class GeoPointEmpty : GeoPointBase, ITlSerializable, ITlDeserializable<GeoPointEmpty> {
        public static readonly byte[] Identifier = [95,221,23,17,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static GeoPointEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class GeoPoint : GeoPointBase, ITlSerializable, ITlDeserializable<GeoPoint> {
        public static readonly byte[] Identifier = [99,246,162,178,];
        private int Flags;
        public required double Long {get;set;}
        public required double Lat {get;set;}
        public required long AccessHash {get;set;}
        public int? AccuracyRadius {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (AccuracyRadius is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Long.TlSerialize());
            bytes.AddRange(Lat.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            if(AccuracyRadius is not null) bytes.AddRange(AccuracyRadius.TlSerialize());
            return bytes.ToArray();
        }

        public new static GeoPoint TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var longLocal =  des.As<double>().Read();
            var latLocal =  des.As<double>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var accuracyRadiusLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Long = longLocal,
            Lat = latLocal,
            AccessHash = accessHashLocal,
            AccuracyRadius = accuracyRadiusLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AuthSentCodeNs {
    public class AuthSentCode : AuthSentCodeBase, ITlSerializable, ITlDeserializable<AuthSentCode> {
        public static readonly byte[] Identifier = [2,37,0,94,];
        private int Flags;
        public required AuthSentCodeTypeBase Type {get;set;}
        public required string PhoneCodeHash {get;set;}
        public AuthCodeTypeBase? NextType {get;set;}
        public int? Timeout {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (NextType is not null ? 2 : 0) | (Timeout is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(Type.TlSerialize());
            bytes.AddRange(PhoneCodeHash.TlSerialize());
            if(NextType is not null) bytes.AddRange(NextType.TlSerialize());
            if(Timeout is not null) bytes.AddRange(Timeout.TlSerialize());
            return bytes.ToArray();
        }

        public new static AuthSentCode TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var typeLocal =  AuthSentCodeTypeBase.TlDeserialize(des);
            var phoneCodeHashLocal =  des.As<string>().Read();
            var nextTypeLocal = (flagsLocal & 2) is 0 ? default : AuthCodeTypeBase.TlDeserialize(des) ;
            var timeoutLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Type = typeLocal,
            PhoneCodeHash = phoneCodeHashLocal,
            NextType = nextTypeLocal,
            Timeout = timeoutLocal,
            };
        }
    }
    public class AuthSentCodeSuccess : AuthSentCodeBase, ITlSerializable, ITlDeserializable<AuthSentCodeSuccess> {
        public static readonly byte[] Identifier = [68,254,144,35,];
        public required AuthAuthorizationBase Authorization {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Authorization.TlSerialize());
            return bytes.ToArray();
        }

        public new static AuthSentCodeSuccess TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var authorizationLocal =  AuthAuthorizationBase.TlDeserialize(des);
            return new() {
            Authorization = authorizationLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AuthAuthorizationNs {
    public class AuthAuthorization : AuthAuthorizationBase, ITlSerializable, ITlDeserializable<AuthAuthorization> {
        public static readonly byte[] Identifier = [212,192,162,46,];
        public bool SetupPasswordRequired {get;set;}
        public int? OtherwiseReloginDays {get;set;}
        public int? TmpSessions {get;set;}
        public byte[]? FutureAuthToken {get;set;}
        public required UserBase User {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (OtherwiseReloginDays is not null ? 2 : 0) | (TmpSessions is not null ? 1 : 0) | (FutureAuthToken is not null ? 4 : 0) ).TlSerialize());
            if(OtherwiseReloginDays is not null) bytes.AddRange(OtherwiseReloginDays.TlSerialize());
            if(TmpSessions is not null) bytes.AddRange(TmpSessions.TlSerialize());
            if(FutureAuthToken is not null) bytes.AddRange(FutureAuthToken.TlSerialize());
            bytes.AddRange(User.TlSerialize());
            return bytes.ToArray();
        }

        public new static AuthAuthorization TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var setupPasswordRequiredLocal = (flagsLocal & 2) is 0 ? default : true ;
            var otherwiseReloginDaysLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            var tmpSessionsLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var futureAuthTokenLocal = (flagsLocal & 4) is 0 ? default : des.As<byte[]>().Read() ;
            var userLocal =  UserBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            SetupPasswordRequired = setupPasswordRequiredLocal,
            OtherwiseReloginDays = otherwiseReloginDaysLocal,
            TmpSessions = tmpSessionsLocal,
            FutureAuthToken = futureAuthTokenLocal,
            User = userLocal,
            };
        }
    }
    public class AuthAuthorizationSignUpRequired : AuthAuthorizationBase, ITlSerializable, ITlDeserializable<AuthAuthorizationSignUpRequired> {
        public static readonly byte[] Identifier = [154,126,116,68,];
        public HelpTermsOfServiceBase? TermsOfService {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (TermsOfService is not null ? 1 : 0) ).TlSerialize());
            if(TermsOfService is not null) bytes.AddRange(TermsOfService.TlSerialize());
            return bytes.ToArray();
        }

        public new static AuthAuthorizationSignUpRequired TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var termsOfServiceLocal = (flagsLocal & 1) is 0 ? default : HelpTermsOfServiceBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            TermsOfService = termsOfServiceLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AuthExportedAuthorizationNs {
    public class AuthExportedAuthorization : AuthExportedAuthorizationBase, ITlSerializable, ITlDeserializable<AuthExportedAuthorization> {
        public static readonly byte[] Identifier = [184,226,52,180,];
        public required long Id {get;set;}
        public required byte[] Bytes {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Bytes.TlSerialize());
            return bytes.ToArray();
        }

        public new static AuthExportedAuthorization TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var bytesLocal =  des.As<byte[]>().Read();
            return new() {
            Id = idLocal,
            Bytes = bytesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputNotifyPeerNs {
    public class InputNotifyPeer : InputNotifyPeerBase, ITlSerializable, ITlDeserializable<InputNotifyPeer> {
        public static readonly byte[] Identifier = [12,91,188,184,];
        public required InputPeerBase Peer {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputNotifyPeer TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  InputPeerBase.TlDeserialize(des);
            return new() {
            Peer = peerLocal,
            };
        }
    }
    public class InputNotifyUsers : InputNotifyPeerBase, ITlSerializable, ITlDeserializable<InputNotifyUsers> {
        public static readonly byte[] Identifier = [23,68,59,25,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputNotifyUsers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputNotifyChats : InputNotifyPeerBase, ITlSerializable, ITlDeserializable<InputNotifyChats> {
        public static readonly byte[] Identifier = [78,232,149,74,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputNotifyChats TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputNotifyBroadcasts : InputNotifyPeerBase, ITlSerializable, ITlDeserializable<InputNotifyBroadcasts> {
        public static readonly byte[] Identifier = [126,124,219,177,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputNotifyBroadcasts TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputNotifyForumTopic : InputNotifyPeerBase, ITlSerializable, ITlDeserializable<InputNotifyForumTopic> {
        public static readonly byte[] Identifier = [146,121,70,92,];
        public required InputPeerBase Peer {get;set;}
        public required int TopMsgId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(TopMsgId.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputNotifyForumTopic TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  InputPeerBase.TlDeserialize(des);
            var topMsgIdLocal =  des.As<int>().Read();
            return new() {
            Peer = peerLocal,
            TopMsgId = topMsgIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputPeerNotifySettingsNs {
    public class InputPeerNotifySettings : InputPeerNotifySettingsBase, ITlSerializable, ITlDeserializable<InputPeerNotifySettings> {
        public static readonly byte[] Identifier = [226,106,203,202,];
        private int Flags;
        public bool ShowPreviews {get;set;}
        public bool Silent {get;set;}
        public int? MuteUntil {get;set;}
        public NotificationSoundBase? Sound {get;set;}
        public bool StoriesMuted {get;set;}
        public bool StoriesHideSender {get;set;}
        public NotificationSoundBase? StoriesSound {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (MuteUntil is not null ? 4 : 0) | (Sound is not null ? 8 : 0) | (StoriesSound is not null ? 256 : 0) ).TlSerialize());
            if(MuteUntil is not null) bytes.AddRange(MuteUntil.TlSerialize());
            if(Sound is not null) bytes.AddRange(Sound.TlSerialize());
            if(StoriesSound is not null) bytes.AddRange(StoriesSound.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputPeerNotifySettings TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var showPreviewsLocal = (flagsLocal & 1) is 0 ? default : true ;
            var silentLocal = (flagsLocal & 2) is 0 ? default : true ;
            var muteUntilLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            var soundLocal = (flagsLocal & 8) is 0 ? default : NotificationSoundBase.TlDeserialize(des) ;
            var storiesMutedLocal = (flagsLocal & 64) is 0 ? default : true ;
            var storiesHideSenderLocal = (flagsLocal & 128) is 0 ? default : true ;
            var storiesSoundLocal = (flagsLocal & 256) is 0 ? default : NotificationSoundBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            ShowPreviews = showPreviewsLocal,
            Silent = silentLocal,
            MuteUntil = muteUntilLocal,
            Sound = soundLocal,
            StoriesMuted = storiesMutedLocal,
            StoriesHideSender = storiesHideSenderLocal,
            StoriesSound = storiesSoundLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PeerNotifySettingsNs {
    public class PeerNotifySettings : PeerNotifySettingsBase, ITlSerializable, ITlDeserializable<PeerNotifySettings> {
        public static readonly byte[] Identifier = [12,44,98,153,];
        private int Flags;
        public bool ShowPreviews {get;set;}
        public bool Silent {get;set;}
        public int? MuteUntil {get;set;}
        public NotificationSoundBase? IosSound {get;set;}
        public NotificationSoundBase? AndroidSound {get;set;}
        public NotificationSoundBase? OtherSound {get;set;}
        public bool StoriesMuted {get;set;}
        public bool StoriesHideSender {get;set;}
        public NotificationSoundBase? StoriesIosSound {get;set;}
        public NotificationSoundBase? StoriesAndroidSound {get;set;}
        public NotificationSoundBase? StoriesOtherSound {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (MuteUntil is not null ? 4 : 0) | (IosSound is not null ? 8 : 0) | (AndroidSound is not null ? 16 : 0) | (OtherSound is not null ? 32 : 0) | (StoriesIosSound is not null ? 256 : 0) | (StoriesAndroidSound is not null ? 512 : 0) | (StoriesOtherSound is not null ? 1024 : 0) ).TlSerialize());
            if(MuteUntil is not null) bytes.AddRange(MuteUntil.TlSerialize());
            if(IosSound is not null) bytes.AddRange(IosSound.TlSerialize());
            if(AndroidSound is not null) bytes.AddRange(AndroidSound.TlSerialize());
            if(OtherSound is not null) bytes.AddRange(OtherSound.TlSerialize());
            if(StoriesIosSound is not null) bytes.AddRange(StoriesIosSound.TlSerialize());
            if(StoriesAndroidSound is not null) bytes.AddRange(StoriesAndroidSound.TlSerialize());
            if(StoriesOtherSound is not null) bytes.AddRange(StoriesOtherSound.TlSerialize());
            return bytes.ToArray();
        }

        public new static PeerNotifySettings TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var showPreviewsLocal = (flagsLocal & 1) is 0 ? default : true ;
            var silentLocal = (flagsLocal & 2) is 0 ? default : true ;
            var muteUntilLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            var iosSoundLocal = (flagsLocal & 8) is 0 ? default : NotificationSoundBase.TlDeserialize(des) ;
            var androidSoundLocal = (flagsLocal & 16) is 0 ? default : NotificationSoundBase.TlDeserialize(des) ;
            var otherSoundLocal = (flagsLocal & 32) is 0 ? default : NotificationSoundBase.TlDeserialize(des) ;
            var storiesMutedLocal = (flagsLocal & 64) is 0 ? default : true ;
            var storiesHideSenderLocal = (flagsLocal & 128) is 0 ? default : true ;
            var storiesIosSoundLocal = (flagsLocal & 256) is 0 ? default : NotificationSoundBase.TlDeserialize(des) ;
            var storiesAndroidSoundLocal = (flagsLocal & 512) is 0 ? default : NotificationSoundBase.TlDeserialize(des) ;
            var storiesOtherSoundLocal = (flagsLocal & 1024) is 0 ? default : NotificationSoundBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            ShowPreviews = showPreviewsLocal,
            Silent = silentLocal,
            MuteUntil = muteUntilLocal,
            IosSound = iosSoundLocal,
            AndroidSound = androidSoundLocal,
            OtherSound = otherSoundLocal,
            StoriesMuted = storiesMutedLocal,
            StoriesHideSender = storiesHideSenderLocal,
            StoriesIosSound = storiesIosSoundLocal,
            StoriesAndroidSound = storiesAndroidSoundLocal,
            StoriesOtherSound = storiesOtherSoundLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PeerSettingsNs {
    public class PeerSettings : PeerSettingsBase, ITlSerializable, ITlDeserializable<PeerSettings> {
        public static readonly byte[] Identifier = [13,17,24,165,];
        private int Flags;
        public bool ReportSpam {get;set;}
        public bool AddContact {get;set;}
        public bool BlockContact {get;set;}
        public bool ShareContact {get;set;}
        public bool NeedContactsException {get;set;}
        public bool ReportGeo {get;set;}
        public bool Autoarchived {get;set;}
        public bool InviteMembers {get;set;}
        public bool RequestChatBroadcast {get;set;}
        public int? GeoDistance {get;set;}
        public string? RequestChatTitle {get;set;}
        public int? RequestChatDate {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (GeoDistance is not null ? 64 : 0) | (RequestChatTitle is not null ? 512 : 0) | (RequestChatDate is not null ? 512 : 0) ).TlSerialize());
            if(GeoDistance is not null) bytes.AddRange(GeoDistance.TlSerialize());
            if(RequestChatTitle is not null) bytes.AddRange(RequestChatTitle.TlSerialize());
            if(RequestChatDate is not null) bytes.AddRange(RequestChatDate.TlSerialize());
            return bytes.ToArray();
        }

        public new static PeerSettings TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var reportSpamLocal = (flagsLocal & 1) is 0 ? default : true ;
            var addContactLocal = (flagsLocal & 2) is 0 ? default : true ;
            var blockContactLocal = (flagsLocal & 4) is 0 ? default : true ;
            var shareContactLocal = (flagsLocal & 8) is 0 ? default : true ;
            var needContactsExceptionLocal = (flagsLocal & 16) is 0 ? default : true ;
            var reportGeoLocal = (flagsLocal & 32) is 0 ? default : true ;
            var autoarchivedLocal = (flagsLocal & 128) is 0 ? default : true ;
            var inviteMembersLocal = (flagsLocal & 256) is 0 ? default : true ;
            var requestChatBroadcastLocal = (flagsLocal & 1024) is 0 ? default : true ;
            var geoDistanceLocal = (flagsLocal & 64) is 0 ? default : des.As<int>().Read() ;
            var requestChatTitleLocal = (flagsLocal & 512) is 0 ? default : des.As<string>().Read() ;
            var requestChatDateLocal = (flagsLocal & 512) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            ReportSpam = reportSpamLocal,
            AddContact = addContactLocal,
            BlockContact = blockContactLocal,
            ShareContact = shareContactLocal,
            NeedContactsException = needContactsExceptionLocal,
            ReportGeo = reportGeoLocal,
            Autoarchived = autoarchivedLocal,
            InviteMembers = inviteMembersLocal,
            RequestChatBroadcast = requestChatBroadcastLocal,
            GeoDistance = geoDistanceLocal,
            RequestChatTitle = requestChatTitleLocal,
            RequestChatDate = requestChatDateLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.WallPaperNs {
    public class WallPaper : WallPaperBase, ITlSerializable, ITlDeserializable<WallPaper> {
        public static readonly byte[] Identifier = [237,195,55,164,];
        public bool Creator {get;set;}
        public bool Pattern {get;set;}
        public required long AccessHash {get;set;}
        public required string Slug {get;set;}
        public required DocumentBase Document {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange((0 | (Settings is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(Slug.TlSerialize());
            bytes.AddRange(Document.TlSerialize());
            if(Settings is not null) bytes.AddRange(Settings.TlSerialize());
            return bytes.ToArray();
        }

        public new static WallPaper TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var flagsLocal =  des.As<int>().Read();
            var creatorLocal = (flagsLocal & 1) is 0 ? default : true ;
            var defaultLocal = (flagsLocal & 2) is 0 ? default : true ;
            var patternLocal = (flagsLocal & 8) is 0 ? default : true ;
            var darkLocal = (flagsLocal & 16) is 0 ? default : true ;
            var accessHashLocal =  des.As<long>().Read();
            var slugLocal =  des.As<string>().Read();
            var documentLocal =  DocumentBase.TlDeserialize(des);
            var settingsLocal = (flagsLocal & 4) is 0 ? default : WallPaperSettingsBase.TlDeserialize(des) ;
            return new() {
            Id = idLocal,
            Flags = flagsLocal,
            Creator = creatorLocal,
            Default = defaultLocal,
            Pattern = patternLocal,
            Dark = darkLocal,
            AccessHash = accessHashLocal,
            Slug = slugLocal,
            Document = documentLocal,
            Settings = settingsLocal,
            };
        }
    }
    public class WallPaperNoFile : WallPaperBase, ITlSerializable, ITlDeserializable<WallPaperNoFile> {
        public static readonly byte[] Identifier = [22,65,128,224,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange((0 | (Settings is not null ? 4 : 0) ).TlSerialize());
            if(Settings is not null) bytes.AddRange(Settings.TlSerialize());
            return bytes.ToArray();
        }

        public new static WallPaperNoFile TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var flagsLocal =  des.As<int>().Read();
            var defaultLocal = (flagsLocal & 2) is 0 ? default : true ;
            var darkLocal = (flagsLocal & 16) is 0 ? default : true ;
            var settingsLocal = (flagsLocal & 4) is 0 ? default : WallPaperSettingsBase.TlDeserialize(des) ;
            return new() {
            Id = idLocal,
            Flags = flagsLocal,
            Default = defaultLocal,
            Dark = darkLocal,
            Settings = settingsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ReportReasonNs {
    public class InputReportReasonSpam : ReportReasonBase, ITlSerializable, ITlDeserializable<InputReportReasonSpam> {
        public static readonly byte[] Identifier = [184,202,219,88,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputReportReasonSpam TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputReportReasonViolence : ReportReasonBase, ITlSerializable, ITlDeserializable<InputReportReasonViolence> {
        public static readonly byte[] Identifier = [141,199,34,30,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputReportReasonViolence TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputReportReasonPornography : ReportReasonBase, ITlSerializable, ITlDeserializable<InputReportReasonPornography> {
        public static readonly byte[] Identifier = [34,217,89,46,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputReportReasonPornography TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputReportReasonChildAbuse : ReportReasonBase, ITlSerializable, ITlDeserializable<InputReportReasonChildAbuse> {
        public static readonly byte[] Identifier = [227,78,244,173,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputReportReasonChildAbuse TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputReportReasonOther : ReportReasonBase, ITlSerializable, ITlDeserializable<InputReportReasonOther> {
        public static readonly byte[] Identifier = [177,162,228,193,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputReportReasonOther TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputReportReasonCopyright : ReportReasonBase, ITlSerializable, ITlDeserializable<InputReportReasonCopyright> {
        public static readonly byte[] Identifier = [58,249,137,155,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputReportReasonCopyright TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputReportReasonGeoIrrelevant : ReportReasonBase, ITlSerializable, ITlDeserializable<InputReportReasonGeoIrrelevant> {
        public static readonly byte[] Identifier = [237,254,212,219,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputReportReasonGeoIrrelevant TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputReportReasonFake : ReportReasonBase, ITlSerializable, ITlDeserializable<InputReportReasonFake> {
        public static readonly byte[] Identifier = [231,214,221,245,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputReportReasonFake TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputReportReasonIllegalDrugs : ReportReasonBase, ITlSerializable, ITlDeserializable<InputReportReasonIllegalDrugs> {
        public static readonly byte[] Identifier = [190,178,142,10,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputReportReasonIllegalDrugs TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputReportReasonPersonalDetails : ReportReasonBase, ITlSerializable, ITlDeserializable<InputReportReasonPersonalDetails> {
        public static readonly byte[] Identifier = [61,134,199,158,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputReportReasonPersonalDetails TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.UserFullNs {
    public class UserFull : UserFullBase, ITlSerializable, ITlDeserializable<UserFull> {
        public static readonly byte[] Identifier = [108,44,177,185,];
        private int Flags;
        public bool Blocked {get;set;}
        public bool PhoneCallsAvailable {get;set;}
        public bool PhoneCallsPrivate {get;set;}
        public bool CanPinMessage {get;set;}
        public bool HasScheduled {get;set;}
        public bool VideoCallsAvailable {get;set;}
        public bool VoiceMessagesForbidden {get;set;}
        public bool TranslationsDisabled {get;set;}
        public bool StoriesPinnedAvailable {get;set;}
        public bool BlockedMyStoriesFrom {get;set;}
        public bool WallpaperOverridden {get;set;}
        public required long Id {get;set;}
        public string? About {get;set;}
        public required PeerSettingsBase Settings {get;set;}
        public PhotoBase? PersonalPhoto {get;set;}
        public PhotoBase? ProfilePhoto {get;set;}
        public PhotoBase? FallbackPhoto {get;set;}
        public required PeerNotifySettingsBase NotifySettings {get;set;}
        public BotInfoBase? BotInfo {get;set;}
        public int? PinnedMsgId {get;set;}
        public required int CommonChatsCount {get;set;}
        public int? FolderId {get;set;}
        public int? TtlPeriod {get;set;}
        public string? ThemeEmoticon {get;set;}
        public string? PrivateForwardName {get;set;}
        public ChatAdminRightsBase? BotGroupAdminRights {get;set;}
        public ChatAdminRightsBase? BotBroadcastAdminRights {get;set;}
        public List<PremiumGiftOptionBase>? PremiumGifts {get;set;}
        public WallPaperBase? Wallpaper {get;set;}
        public PeerStoriesBase? Stories {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (About is not null ? 2 : 0) | (PersonalPhoto is not null ? 2097152 : 0) | (ProfilePhoto is not null ? 4 : 0) | (FallbackPhoto is not null ? 4194304 : 0) | (BotInfo is not null ? 8 : 0) | (PinnedMsgId is not null ? 64 : 0) | (FolderId is not null ? 2048 : 0) | (TtlPeriod is not null ? 16384 : 0) | (ThemeEmoticon is not null ? 32768 : 0) | (PrivateForwardName is not null ? 65536 : 0) | (BotGroupAdminRights is not null ? 131072 : 0) | (BotBroadcastAdminRights is not null ? 262144 : 0) | (PremiumGifts is not null ? 524288 : 0) | (Wallpaper is not null ? 16777216 : 0) | (Stories is not null ? 33554432 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            if(About is not null) bytes.AddRange(About.TlSerialize());
            bytes.AddRange(Settings.TlSerialize());
            if(PersonalPhoto is not null) bytes.AddRange(PersonalPhoto.TlSerialize());
            if(ProfilePhoto is not null) bytes.AddRange(ProfilePhoto.TlSerialize());
            if(FallbackPhoto is not null) bytes.AddRange(FallbackPhoto.TlSerialize());
            bytes.AddRange(NotifySettings.TlSerialize());
            if(BotInfo is not null) bytes.AddRange(BotInfo.TlSerialize());
            if(PinnedMsgId is not null) bytes.AddRange(PinnedMsgId.TlSerialize());
            bytes.AddRange(CommonChatsCount.TlSerialize());
            if(FolderId is not null) bytes.AddRange(FolderId.TlSerialize());
            if(TtlPeriod is not null) bytes.AddRange(TtlPeriod.TlSerialize());
            if(ThemeEmoticon is not null) bytes.AddRange(ThemeEmoticon.TlSerialize());
            if(PrivateForwardName is not null) bytes.AddRange(PrivateForwardName.TlSerialize());
            if(BotGroupAdminRights is not null) bytes.AddRange(BotGroupAdminRights.TlSerialize());
            if(BotBroadcastAdminRights is not null) bytes.AddRange(BotBroadcastAdminRights.TlSerialize());
            if(PremiumGifts is not null) bytes.AddRange(PremiumGifts.TlSerialize());
            if(Wallpaper is not null) bytes.AddRange(Wallpaper.TlSerialize());
            if(Stories is not null) bytes.AddRange(Stories.TlSerialize());
            return bytes.ToArray();
        }

        public new static UserFull TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var blockedLocal = (flagsLocal & 1) is 0 ? default : true ;
            var phoneCallsAvailableLocal = (flagsLocal & 16) is 0 ? default : true ;
            var phoneCallsPrivateLocal = (flagsLocal & 32) is 0 ? default : true ;
            var canPinMessageLocal = (flagsLocal & 128) is 0 ? default : true ;
            var hasScheduledLocal = (flagsLocal & 4096) is 0 ? default : true ;
            var videoCallsAvailableLocal = (flagsLocal & 8192) is 0 ? default : true ;
            var voiceMessagesForbiddenLocal = (flagsLocal & 1048576) is 0 ? default : true ;
            var translationsDisabledLocal = (flagsLocal & 8388608) is 0 ? default : true ;
            var storiesPinnedAvailableLocal = (flagsLocal & 67108864) is 0 ? default : true ;
            var blockedMyStoriesFromLocal = (flagsLocal & 134217728) is 0 ? default : true ;
            var wallpaperOverriddenLocal = (flagsLocal & 268435456) is 0 ? default : true ;
            var idLocal =  des.As<long>().Read();
            var aboutLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var settingsLocal =  PeerSettingsBase.TlDeserialize(des);
            var personalPhotoLocal = (flagsLocal & 2097152) is 0 ? default : PhotoBase.TlDeserialize(des) ;
            var profilePhotoLocal = (flagsLocal & 4) is 0 ? default : PhotoBase.TlDeserialize(des) ;
            var fallbackPhotoLocal = (flagsLocal & 4194304) is 0 ? default : PhotoBase.TlDeserialize(des) ;
            var notifySettingsLocal =  PeerNotifySettingsBase.TlDeserialize(des);
            var botInfoLocal = (flagsLocal & 8) is 0 ? default : BotInfoBase.TlDeserialize(des) ;
            var pinnedMsgIdLocal = (flagsLocal & 64) is 0 ? default : des.As<int>().Read() ;
            var commonChatsCountLocal =  des.As<int>().Read();
            var folderIdLocal = (flagsLocal & 2048) is 0 ? default : des.As<int>().Read() ;
            var ttlPeriodLocal = (flagsLocal & 16384) is 0 ? default : des.As<int>().Read() ;
            var themeEmoticonLocal = (flagsLocal & 32768) is 0 ? default : des.As<string>().Read() ;
            var privateForwardNameLocal = (flagsLocal & 65536) is 0 ? default : des.As<string>().Read() ;
            var botGroupAdminRightsLocal = (flagsLocal & 131072) is 0 ? default : ChatAdminRightsBase.TlDeserialize(des) ;
            var botBroadcastAdminRightsLocal = (flagsLocal & 262144) is 0 ? default : ChatAdminRightsBase.TlDeserialize(des) ;
            var premiumGiftsLocal = (flagsLocal & 524288) is 0 ? default : des.Read<PremiumGiftOptionBase>() ;
            var wallpaperLocal = (flagsLocal & 16777216) is 0 ? default : WallPaperBase.TlDeserialize(des) ;
            var storiesLocal = (flagsLocal & 33554432) is 0 ? default : PeerStoriesBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Blocked = blockedLocal,
            PhoneCallsAvailable = phoneCallsAvailableLocal,
            PhoneCallsPrivate = phoneCallsPrivateLocal,
            CanPinMessage = canPinMessageLocal,
            HasScheduled = hasScheduledLocal,
            VideoCallsAvailable = videoCallsAvailableLocal,
            VoiceMessagesForbidden = voiceMessagesForbiddenLocal,
            TranslationsDisabled = translationsDisabledLocal,
            StoriesPinnedAvailable = storiesPinnedAvailableLocal,
            BlockedMyStoriesFrom = blockedMyStoriesFromLocal,
            WallpaperOverridden = wallpaperOverriddenLocal,
            Id = idLocal,
            About = aboutLocal,
            Settings = settingsLocal,
            PersonalPhoto = personalPhotoLocal,
            ProfilePhoto = profilePhotoLocal,
            FallbackPhoto = fallbackPhotoLocal,
            NotifySettings = notifySettingsLocal,
            BotInfo = botInfoLocal,
            PinnedMsgId = pinnedMsgIdLocal,
            CommonChatsCount = commonChatsCountLocal,
            FolderId = folderIdLocal,
            TtlPeriod = ttlPeriodLocal,
            ThemeEmoticon = themeEmoticonLocal,
            PrivateForwardName = privateForwardNameLocal,
            BotGroupAdminRights = botGroupAdminRightsLocal,
            BotBroadcastAdminRights = botBroadcastAdminRightsLocal,
            PremiumGifts = premiumGiftsLocal,
            Wallpaper = wallpaperLocal,
            Stories = storiesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ContactNs {
    public class Contact : ContactBase, ITlSerializable, ITlDeserializable<Contact> {
        public static readonly byte[] Identifier = [11,222,90,20,];
        public required long UserId {get;set;}
        public bool Mutual {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            return bytes.ToArray();
        }

        public new static Contact TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            var mutualLocal =  des.As<bool>().Read();
            return new() {
            UserId = userIdLocal,
            Mutual = mutualLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ImportedContactNs {
    public class ImportedContact : ImportedContactBase, ITlSerializable, ITlDeserializable<ImportedContact> {
        public static readonly byte[] Identifier = [80,60,62,193,];
        public required long UserId {get;set;}
        public required long ClientId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(ClientId.TlSerialize());
            return bytes.ToArray();
        }

        public new static ImportedContact TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            var clientIdLocal =  des.As<long>().Read();
            return new() {
            UserId = userIdLocal,
            ClientId = clientIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ContactStatusNs {
    public class ContactStatus : ContactStatusBase, ITlSerializable, ITlDeserializable<ContactStatus> {
        public static readonly byte[] Identifier = [59,112,217,22,];
        public required long UserId {get;set;}
        public required UserStatusBase Status {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Status.TlSerialize());
            return bytes.ToArray();
        }

        public new static ContactStatus TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            var statusLocal =  UserStatusBase.TlDeserialize(des);
            return new() {
            UserId = userIdLocal,
            Status = statusLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ContactsContactsNs {
    public class ContactsContactsNotModified : ContactsContactsBase, ITlSerializable, ITlDeserializable<ContactsContactsNotModified> {
        public static readonly byte[] Identifier = [210,169,75,183,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static ContactsContactsNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class ContactsContacts : ContactsContactsBase, ITlSerializable, ITlDeserializable<ContactsContacts> {
        public static readonly byte[] Identifier = [66,126,232,234,];
        public required List<ContactBase> Contacts {get;set;}
        public required int SavedCount {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Contacts.TlSerialize());
            bytes.AddRange(SavedCount.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static ContactsContacts TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var contactsLocal =  des.Read<ContactBase>();
            var savedCountLocal =  des.As<int>().Read();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Contacts = contactsLocal,
            SavedCount = savedCountLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ContactsImportedContactsNs {
    public class ContactsImportedContacts : ContactsImportedContactsBase, ITlSerializable, ITlDeserializable<ContactsImportedContacts> {
        public static readonly byte[] Identifier = [59,28,208,119,];
        public required List<ImportedContactBase> Imported {get;set;}
        public required List<PopularContactBase> PopularInvites {get;set;}
        public required List<long> RetryContacts {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Imported.TlSerialize());
            bytes.AddRange(PopularInvites.TlSerialize());
            bytes.AddRange(RetryContacts.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static ContactsImportedContacts TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var importedLocal =  des.Read<ImportedContactBase>();
            var popularInvitesLocal =  des.Read<PopularContactBase>();
            var retryContactsLocal =  des.ReadNumbers<long>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Imported = importedLocal,
            PopularInvites = popularInvitesLocal,
            RetryContacts = retryContactsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ContactsBlockedNs {
    public class ContactsBlocked : ContactsBlockedBase, ITlSerializable, ITlDeserializable<ContactsBlocked> {
        public static readonly byte[] Identifier = [145,21,222,10,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Blocked.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static ContactsBlocked TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var blockedLocal =  des.Read<PeerBlockedBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Blocked = blockedLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }
    public class ContactsBlockedSlice : ContactsBlockedBase, ITlSerializable, ITlDeserializable<ContactsBlockedSlice> {
        public static readonly byte[] Identifier = [148,65,102,225,];
        public required int Count {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(Blocked.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static ContactsBlockedSlice TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var countLocal =  des.As<int>().Read();
            var blockedLocal =  des.Read<PeerBlockedBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Count = countLocal,
            Blocked = blockedLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesDialogsNs {
    public class MessagesDialogs : MessagesDialogsBase, ITlSerializable, ITlDeserializable<MessagesDialogs> {
        public static readonly byte[] Identifier = [64,108,186,21,];
        public required List<DialogBase> Dialogs {get;set;}
        public required List<MessageBase> Messages {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Dialogs.TlSerialize());
            bytes.AddRange(Messages.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesDialogs TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var dialogsLocal =  des.Read<DialogBase>();
            var messagesLocal =  des.Read<MessageBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Dialogs = dialogsLocal,
            Messages = messagesLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }
    public class MessagesDialogsSlice : MessagesDialogsBase, ITlSerializable, ITlDeserializable<MessagesDialogsSlice> {
        public static readonly byte[] Identifier = [243,148,224,113,];
        public required int Count {get;set;}
        public required List<DialogBase> Dialogs {get;set;}
        public required List<MessageBase> Messages {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(Dialogs.TlSerialize());
            bytes.AddRange(Messages.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesDialogsSlice TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var countLocal =  des.As<int>().Read();
            var dialogsLocal =  des.Read<DialogBase>();
            var messagesLocal =  des.Read<MessageBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Count = countLocal,
            Dialogs = dialogsLocal,
            Messages = messagesLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }
    public class MessagesDialogsNotModified : MessagesDialogsBase, ITlSerializable, ITlDeserializable<MessagesDialogsNotModified> {
        public static readonly byte[] Identifier = [150,229,227,240,];
        public required int Count {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Count.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesDialogsNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var countLocal =  des.As<int>().Read();
            return new() {
            Count = countLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesMessagesNs {
    public class MessagesMessages : MessagesMessagesBase, ITlSerializable, ITlDeserializable<MessagesMessages> {
        public static readonly byte[] Identifier = [135,142,113,140,];
        public required List<MessageBase> Messages {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Messages.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesMessages TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var messagesLocal =  des.Read<MessageBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Messages = messagesLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }
    public class MessagesMessagesSlice : MessagesMessagesBase, ITlSerializable, ITlDeserializable<MessagesMessagesSlice> {
        public static readonly byte[] Identifier = [94,104,84,58,];
        private int Flags;
        public bool Inexact {get;set;}
        public required int Count {get;set;}
        public int? NextRate {get;set;}
        public int? OffsetIdOffset {get;set;}
        public required List<MessageBase> Messages {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (NextRate is not null ? 1 : 0) | (OffsetIdOffset is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(Count.TlSerialize());
            if(NextRate is not null) bytes.AddRange(NextRate.TlSerialize());
            if(OffsetIdOffset is not null) bytes.AddRange(OffsetIdOffset.TlSerialize());
            bytes.AddRange(Messages.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesMessagesSlice TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var inexactLocal = (flagsLocal & 2) is 0 ? default : true ;
            var countLocal =  des.As<int>().Read();
            var nextRateLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var offsetIdOffsetLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            var messagesLocal =  des.Read<MessageBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Flags = flagsLocal,
            Inexact = inexactLocal,
            Count = countLocal,
            NextRate = nextRateLocal,
            OffsetIdOffset = offsetIdOffsetLocal,
            Messages = messagesLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }
    public class MessagesChannelMessages : MessagesMessagesBase, ITlSerializable, ITlDeserializable<MessagesChannelMessages> {
        public static readonly byte[] Identifier = [78,186,118,199,];
        private int Flags;
        public bool Inexact {get;set;}
        public required int Pts {get;set;}
        public required int Count {get;set;}
        public int? OffsetIdOffset {get;set;}
        public required List<MessageBase> Messages {get;set;}
        public required List<ForumTopicBase> Topics {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (OffsetIdOffset is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            bytes.AddRange(Count.TlSerialize());
            if(OffsetIdOffset is not null) bytes.AddRange(OffsetIdOffset.TlSerialize());
            bytes.AddRange(Messages.TlSerialize());
            bytes.AddRange(Topics.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesChannelMessages TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var inexactLocal = (flagsLocal & 2) is 0 ? default : true ;
            var ptsLocal =  des.As<int>().Read();
            var countLocal =  des.As<int>().Read();
            var offsetIdOffsetLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            var messagesLocal =  des.Read<MessageBase>();
            var topicsLocal =  des.Read<ForumTopicBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Flags = flagsLocal,
            Inexact = inexactLocal,
            Pts = ptsLocal,
            Count = countLocal,
            OffsetIdOffset = offsetIdOffsetLocal,
            Messages = messagesLocal,
            Topics = topicsLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }
    public class MessagesMessagesNotModified : MessagesMessagesBase, ITlSerializable, ITlDeserializable<MessagesMessagesNotModified> {
        public static readonly byte[] Identifier = [33,95,83,116,];
        public required int Count {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Count.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesMessagesNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var countLocal =  des.As<int>().Read();
            return new() {
            Count = countLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesChatsNs {
    public class MessagesChats : MessagesChatsBase, ITlSerializable, ITlDeserializable<MessagesChats> {
        public static readonly byte[] Identifier = [213,159,255,100,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Chats.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesChats TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var chatsLocal =  des.Read<ChatBase>();
            return new() {
            Chats = chatsLocal,
            };
        }
    }
    public class MessagesChatsSlice : MessagesChatsBase, ITlSerializable, ITlDeserializable<MessagesChatsSlice> {
        public static readonly byte[] Identifier = [68,17,216,156,];
        public required int Count {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesChatsSlice TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var countLocal =  des.As<int>().Read();
            var chatsLocal =  des.Read<ChatBase>();
            return new() {
            Count = countLocal,
            Chats = chatsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesChatFullNs {
    public class MessagesChatFull : MessagesChatFullBase, ITlSerializable, ITlDeserializable<MessagesChatFull> {
        public static readonly byte[] Identifier = [156,209,215,229,];
        public required ChatFullBase FullChat {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(FullChat.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesChatFull TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var fullChatLocal =  ChatFullBase.TlDeserialize(des);
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            FullChat = fullChatLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesAffectedHistoryNs {
    public class MessagesAffectedHistory : MessagesAffectedHistoryBase, ITlSerializable, ITlDeserializable<MessagesAffectedHistory> {
        public static readonly byte[] Identifier = [209,105,92,180,];
        public required int Pts {get;set;}
        public required int PtsCount {get;set;}
        public required int Offset {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Pts.TlSerialize());
            bytes.AddRange(PtsCount.TlSerialize());
            bytes.AddRange(Offset.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesAffectedHistory TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var ptsLocal =  des.As<int>().Read();
            var ptsCountLocal =  des.As<int>().Read();
            var offsetLocal =  des.As<int>().Read();
            return new() {
            Pts = ptsLocal,
            PtsCount = ptsCountLocal,
            Offset = offsetLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesFilterNs {
    public class InputMessagesFilterEmpty : MessagesFilterBase, ITlSerializable, ITlDeserializable<InputMessagesFilterEmpty> {
        public static readonly byte[] Identifier = [108,246,226,87,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputMessagesFilterEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputMessagesFilterPhotos : MessagesFilterBase, ITlSerializable, ITlDeserializable<InputMessagesFilterPhotos> {
        public static readonly byte[] Identifier = [28,165,9,150,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputMessagesFilterPhotos TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputMessagesFilterVideo : MessagesFilterBase, ITlSerializable, ITlDeserializable<InputMessagesFilterVideo> {
        public static readonly byte[] Identifier = [101,14,192,159,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputMessagesFilterVideo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputMessagesFilterPhotoVideo : MessagesFilterBase, ITlSerializable, ITlDeserializable<InputMessagesFilterPhotoVideo> {
        public static readonly byte[] Identifier = [228,240,233,86,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputMessagesFilterPhotoVideo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputMessagesFilterDocument : MessagesFilterBase, ITlSerializable, ITlDeserializable<InputMessagesFilterDocument> {
        public static readonly byte[] Identifier = [136,241,221,158,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputMessagesFilterDocument TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputMessagesFilterUrl : MessagesFilterBase, ITlSerializable, ITlDeserializable<InputMessagesFilterUrl> {
        public static readonly byte[] Identifier = [135,221,240,126,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputMessagesFilterUrl TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputMessagesFilterGif : MessagesFilterBase, ITlSerializable, ITlDeserializable<InputMessagesFilterGif> {
        public static readonly byte[] Identifier = [135,101,200,255,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputMessagesFilterGif TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputMessagesFilterVoice : MessagesFilterBase, ITlSerializable, ITlDeserializable<InputMessagesFilterVoice> {
        public static readonly byte[] Identifier = [146,195,245,80,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputMessagesFilterVoice TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputMessagesFilterMusic : MessagesFilterBase, ITlSerializable, ITlDeserializable<InputMessagesFilterMusic> {
        public static readonly byte[] Identifier = [158,180,81,55,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputMessagesFilterMusic TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputMessagesFilterChatPhotos : MessagesFilterBase, ITlSerializable, ITlDeserializable<InputMessagesFilterChatPhotos> {
        public static readonly byte[] Identifier = [184,236,32,58,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputMessagesFilterChatPhotos TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputMessagesFilterPhoneCalls : MessagesFilterBase, ITlSerializable, ITlDeserializable<InputMessagesFilterPhoneCalls> {
        public static readonly byte[] Identifier = [104,151,201,128,];
        private int Flags;
        public bool Missed {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMessagesFilterPhoneCalls TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var missedLocal = (flagsLocal & 1) is 0 ? default : true ;
            return new() {
            Flags = flagsLocal,
            Missed = missedLocal,
            };
        }
    }
    public class InputMessagesFilterRoundVoice : MessagesFilterBase, ITlSerializable, ITlDeserializable<InputMessagesFilterRoundVoice> {
        public static readonly byte[] Identifier = [164,23,124,122,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputMessagesFilterRoundVoice TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputMessagesFilterRoundVideo : MessagesFilterBase, ITlSerializable, ITlDeserializable<InputMessagesFilterRoundVideo> {
        public static readonly byte[] Identifier = [83,218,73,181,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputMessagesFilterRoundVideo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputMessagesFilterMyMentions : MessagesFilterBase, ITlSerializable, ITlDeserializable<InputMessagesFilterMyMentions> {
        public static readonly byte[] Identifier = [154,230,248,193,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputMessagesFilterMyMentions TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputMessagesFilterGeo : MessagesFilterBase, ITlSerializable, ITlDeserializable<InputMessagesFilterGeo> {
        public static readonly byte[] Identifier = [13,109,2,231,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputMessagesFilterGeo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputMessagesFilterContacts : MessagesFilterBase, ITlSerializable, ITlDeserializable<InputMessagesFilterContacts> {
        public static readonly byte[] Identifier = [131,219,98,224,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputMessagesFilterContacts TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputMessagesFilterPinned : MessagesFilterBase, ITlSerializable, ITlDeserializable<InputMessagesFilterPinned> {
        public static readonly byte[] Identifier = [81,4,176,27,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputMessagesFilterPinned TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.UpdateNs {
    public class UpdateNewMessage : UpdateBase, ITlSerializable, ITlDeserializable<UpdateNewMessage> {
        public static readonly byte[] Identifier = [253,10,43,31,];
        public required MessageBase Message {get;set;}
        public required int Pts {get;set;}
        public required int PtsCount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Message.TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            bytes.AddRange(PtsCount.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateNewMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var messageLocal =  MessageBase.TlDeserialize(des);
            var ptsLocal =  des.As<int>().Read();
            var ptsCountLocal =  des.As<int>().Read();
            return new() {
            Message = messageLocal,
            Pts = ptsLocal,
            PtsCount = ptsCountLocal,
            };
        }
    }
    public class UpdateMessageID : UpdateBase, ITlSerializable, ITlDeserializable<UpdateMessageID> {
        public static readonly byte[] Identifier = [214,191,144,78,];
        public required int Id {get;set;}
        public required long RandomId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(RandomId.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateMessageID TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<int>().Read();
            var randomIdLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            RandomId = randomIdLocal,
            };
        }
    }
    public class UpdateDeleteMessages : UpdateBase, ITlSerializable, ITlDeserializable<UpdateDeleteMessages> {
        public static readonly byte[] Identifier = [229,176,13,162,];
        public required List<int> Messages {get;set;}
        public required int Pts {get;set;}
        public required int PtsCount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Messages.TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            bytes.AddRange(PtsCount.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateDeleteMessages TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var messagesLocal =  des.ReadNumbers<int>();
            var ptsLocal =  des.As<int>().Read();
            var ptsCountLocal =  des.As<int>().Read();
            return new() {
            Messages = messagesLocal,
            Pts = ptsLocal,
            PtsCount = ptsCountLocal,
            };
        }
    }
    public class UpdateUserTyping : UpdateBase, ITlSerializable, ITlDeserializable<UpdateUserTyping> {
        public static readonly byte[] Identifier = [127,133,30,192,];
        public required long UserId {get;set;}
        public required SendMessageActionBase Action {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Action.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateUserTyping TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            var actionLocal =  SendMessageActionBase.TlDeserialize(des);
            return new() {
            UserId = userIdLocal,
            Action = actionLocal,
            };
        }
    }
    public class UpdateChatUserTyping : UpdateBase, ITlSerializable, ITlDeserializable<UpdateChatUserTyping> {
        public static readonly byte[] Identifier = [240,122,72,131,];
        public required long ChatId {get;set;}
        public required PeerBase FromId {get;set;}
        public required SendMessageActionBase Action {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChatId.TlSerialize());
            bytes.AddRange(FromId.TlSerialize());
            bytes.AddRange(Action.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateChatUserTyping TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var chatIdLocal =  des.As<long>().Read();
            var fromIdLocal =  PeerBase.TlDeserialize(des);
            var actionLocal =  SendMessageActionBase.TlDeserialize(des);
            return new() {
            ChatId = chatIdLocal,
            FromId = fromIdLocal,
            Action = actionLocal,
            };
        }
    }
    public class UpdateChatParticipants : UpdateBase, ITlSerializable, ITlDeserializable<UpdateChatParticipants> {
        public static readonly byte[] Identifier = [152,17,118,7,];
        public required ChatParticipantsBase Participants {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Participants.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateChatParticipants TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var participantsLocal =  ChatParticipantsBase.TlDeserialize(des);
            return new() {
            Participants = participantsLocal,
            };
        }
    }
    public class UpdateUserStatus : UpdateBase, ITlSerializable, ITlDeserializable<UpdateUserStatus> {
        public static readonly byte[] Identifier = [222,248,189,229,];
        public required long UserId {get;set;}
        public required UserStatusBase Status {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Status.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateUserStatus TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            var statusLocal =  UserStatusBase.TlDeserialize(des);
            return new() {
            UserId = userIdLocal,
            Status = statusLocal,
            };
        }
    }
    public class UpdateUserName : UpdateBase, ITlSerializable, ITlDeserializable<UpdateUserName> {
        public static readonly byte[] Identifier = [36,137,132,167,];
        public required long UserId {get;set;}
        public required string FirstName {get;set;}
        public required string LastName {get;set;}
        public required List<UsernameBase> Usernames {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(FirstName.TlSerialize());
            bytes.AddRange(LastName.TlSerialize());
            bytes.AddRange(Usernames.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateUserName TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            var firstNameLocal =  des.As<string>().Read();
            var lastNameLocal =  des.As<string>().Read();
            var usernamesLocal =  des.Read<UsernameBase>();
            return new() {
            UserId = userIdLocal,
            FirstName = firstNameLocal,
            LastName = lastNameLocal,
            Usernames = usernamesLocal,
            };
        }
    }
    public class UpdateNewAuthorization : UpdateBase, ITlSerializable, ITlDeserializable<UpdateNewAuthorization> {
        public static readonly byte[] Identifier = [239,171,81,137,];
        private int Flags;
        public bool Unconfirmed {get;set;}
        public required long Hash {get;set;}
        public int? Date {get;set;}
        public string? Device {get;set;}
        public string? Location {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Date is not null ? 1 : 0) | (Device is not null ? 1 : 0) | (Location is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Hash.TlSerialize());
            if(Date is not null) bytes.AddRange(Date.TlSerialize());
            if(Device is not null) bytes.AddRange(Device.TlSerialize());
            if(Location is not null) bytes.AddRange(Location.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateNewAuthorization TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var unconfirmedLocal = (flagsLocal & 1) is 0 ? default : true ;
            var hashLocal =  des.As<long>().Read();
            var dateLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var deviceLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var locationLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            Unconfirmed = unconfirmedLocal,
            Hash = hashLocal,
            Date = dateLocal,
            Device = deviceLocal,
            Location = locationLocal,
            };
        }
    }
    public class UpdateNewEncryptedMessage : UpdateBase, ITlSerializable, ITlDeserializable<UpdateNewEncryptedMessage> {
        public static readonly byte[] Identifier = [154,189,188,18,];
        public required EncryptedMessageBase Message {get;set;}
        public required int Qts {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Message.TlSerialize());
            bytes.AddRange(Qts.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateNewEncryptedMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var messageLocal =  EncryptedMessageBase.TlDeserialize(des);
            var qtsLocal =  des.As<int>().Read();
            return new() {
            Message = messageLocal,
            Qts = qtsLocal,
            };
        }
    }
    public class UpdateEncryptedChatTyping : UpdateBase, ITlSerializable, ITlDeserializable<UpdateEncryptedChatTyping> {
        public static readonly byte[] Identifier = [86,241,16,23,];
        public required int ChatId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChatId.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateEncryptedChatTyping TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var chatIdLocal =  des.As<int>().Read();
            return new() {
            ChatId = chatIdLocal,
            };
        }
    }
    public class UpdateEncryption : UpdateBase, ITlSerializable, ITlDeserializable<UpdateEncryption> {
        public static readonly byte[] Identifier = [141,232,162,180,];
        public required EncryptedChatBase Chat {get;set;}
        public required int Date {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Chat.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateEncryption TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var chatLocal =  EncryptedChatBase.TlDeserialize(des);
            var dateLocal =  des.As<int>().Read();
            return new() {
            Chat = chatLocal,
            Date = dateLocal,
            };
        }
    }
    public class UpdateEncryptedMessagesRead : UpdateBase, ITlSerializable, ITlDeserializable<UpdateEncryptedMessagesRead> {
        public static readonly byte[] Identifier = [183,37,254,56,];
        public required int ChatId {get;set;}
        public required int MaxDate {get;set;}
        public required int Date {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChatId.TlSerialize());
            bytes.AddRange(MaxDate.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateEncryptedMessagesRead TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var chatIdLocal =  des.As<int>().Read();
            var maxDateLocal =  des.As<int>().Read();
            var dateLocal =  des.As<int>().Read();
            return new() {
            ChatId = chatIdLocal,
            MaxDate = maxDateLocal,
            Date = dateLocal,
            };
        }
    }
    public class UpdateChatParticipantAdd : UpdateBase, ITlSerializable, ITlDeserializable<UpdateChatParticipantAdd> {
        public static readonly byte[] Identifier = [81,84,218,61,];
        public required long ChatId {get;set;}
        public required long UserId {get;set;}
        public required long InviterId {get;set;}
        public required int Date {get;set;}
        public required int Version {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChatId.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(InviterId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(Version.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateChatParticipantAdd TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var chatIdLocal =  des.As<long>().Read();
            var userIdLocal =  des.As<long>().Read();
            var inviterIdLocal =  des.As<long>().Read();
            var dateLocal =  des.As<int>().Read();
            var versionLocal =  des.As<int>().Read();
            return new() {
            ChatId = chatIdLocal,
            UserId = userIdLocal,
            InviterId = inviterIdLocal,
            Date = dateLocal,
            Version = versionLocal,
            };
        }
    }
    public class UpdateChatParticipantDelete : UpdateBase, ITlSerializable, ITlDeserializable<UpdateChatParticipantDelete> {
        public static readonly byte[] Identifier = [119,61,47,227,];
        public required long ChatId {get;set;}
        public required long UserId {get;set;}
        public required int Version {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChatId.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Version.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateChatParticipantDelete TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var chatIdLocal =  des.As<long>().Read();
            var userIdLocal =  des.As<long>().Read();
            var versionLocal =  des.As<int>().Read();
            return new() {
            ChatId = chatIdLocal,
            UserId = userIdLocal,
            Version = versionLocal,
            };
        }
    }
    public class UpdateDcOptions : UpdateBase, ITlSerializable, ITlDeserializable<UpdateDcOptions> {
        public static readonly byte[] Identifier = [115,152,94,142,];
        public required List<DcOptionBase> DcOptions {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(DcOptions.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateDcOptions TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var dcOptionsLocal =  des.Read<DcOptionBase>();
            return new() {
            DcOptions = dcOptionsLocal,
            };
        }
    }
    public class UpdateNotifySettings : UpdateBase, ITlSerializable, ITlDeserializable<UpdateNotifySettings> {
        public static readonly byte[] Identifier = [239,104,194,190,];
        public required NotifyPeerBase Peer {get;set;}
        public required PeerNotifySettingsBase NotifySettings {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(NotifySettings.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateNotifySettings TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  NotifyPeerBase.TlDeserialize(des);
            var notifySettingsLocal =  PeerNotifySettingsBase.TlDeserialize(des);
            return new() {
            Peer = peerLocal,
            NotifySettings = notifySettingsLocal,
            };
        }
    }
    public class UpdateServiceNotification : UpdateBase, ITlSerializable, ITlDeserializable<UpdateServiceNotification> {
        public static readonly byte[] Identifier = [25,104,228,235,];
        private int Flags;
        public bool Popup {get;set;}
        public bool InvertMedia {get;set;}
        public int? InboxDate {get;set;}
        public required string Type {get;set;}
        public required string Message {get;set;}
        public required MessageMediaBase Media {get;set;}
        public required List<MessageEntityBase> Entities {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (InboxDate is not null ? 2 : 0) ).TlSerialize());
            if(InboxDate is not null) bytes.AddRange(InboxDate.TlSerialize());
            bytes.AddRange(Type.TlSerialize());
            bytes.AddRange(Message.TlSerialize());
            bytes.AddRange(Media.TlSerialize());
            bytes.AddRange(Entities.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateServiceNotification TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var popupLocal = (flagsLocal & 1) is 0 ? default : true ;
            var invertMediaLocal = (flagsLocal & 4) is 0 ? default : true ;
            var inboxDateLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            var typeLocal =  des.As<string>().Read();
            var messageLocal =  des.As<string>().Read();
            var mediaLocal =  MessageMediaBase.TlDeserialize(des);
            var entitiesLocal =  des.Read<MessageEntityBase>();
            return new() {
            Flags = flagsLocal,
            Popup = popupLocal,
            InvertMedia = invertMediaLocal,
            InboxDate = inboxDateLocal,
            Type = typeLocal,
            Message = messageLocal,
            Media = mediaLocal,
            Entities = entitiesLocal,
            };
        }
    }
    public class UpdatePrivacy : UpdateBase, ITlSerializable, ITlDeserializable<UpdatePrivacy> {
        public static readonly byte[] Identifier = [42,39,59,238,];
        public required PrivacyKeyBase Key {get;set;}
        public required List<PrivacyRuleBase> Rules {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Key.TlSerialize());
            bytes.AddRange(Rules.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdatePrivacy TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var keyLocal =  PrivacyKeyBase.TlDeserialize(des);
            var rulesLocal =  des.Read<PrivacyRuleBase>();
            return new() {
            Key = keyLocal,
            Rules = rulesLocal,
            };
        }
    }
    public class UpdateUserPhone : UpdateBase, ITlSerializable, ITlDeserializable<UpdateUserPhone> {
        public static readonly byte[] Identifier = [19,42,73,5,];
        public required long UserId {get;set;}
        public required string Phone {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Phone.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateUserPhone TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            var phoneLocal =  des.As<string>().Read();
            return new() {
            UserId = userIdLocal,
            Phone = phoneLocal,
            };
        }
    }
    public class UpdateReadHistoryInbox : UpdateBase, ITlSerializable, ITlDeserializable<UpdateReadHistoryInbox> {
        public static readonly byte[] Identifier = [223,79,151,156,];
        private int Flags;
        public int? FolderId {get;set;}
        public required PeerBase Peer {get;set;}
        public required int MaxId {get;set;}
        public required int StillUnreadCount {get;set;}
        public required int Pts {get;set;}
        public required int PtsCount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (FolderId is not null ? 1 : 0) ).TlSerialize());
            if(FolderId is not null) bytes.AddRange(FolderId.TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(MaxId.TlSerialize());
            bytes.AddRange(StillUnreadCount.TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            bytes.AddRange(PtsCount.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateReadHistoryInbox TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var folderIdLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var peerLocal =  PeerBase.TlDeserialize(des);
            var maxIdLocal =  des.As<int>().Read();
            var stillUnreadCountLocal =  des.As<int>().Read();
            var ptsLocal =  des.As<int>().Read();
            var ptsCountLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            FolderId = folderIdLocal,
            Peer = peerLocal,
            MaxId = maxIdLocal,
            StillUnreadCount = stillUnreadCountLocal,
            Pts = ptsLocal,
            PtsCount = ptsCountLocal,
            };
        }
    }
    public class UpdateReadHistoryOutbox : UpdateBase, ITlSerializable, ITlDeserializable<UpdateReadHistoryOutbox> {
        public static readonly byte[] Identifier = [191,33,47,47,];
        public required PeerBase Peer {get;set;}
        public required int MaxId {get;set;}
        public required int Pts {get;set;}
        public required int PtsCount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(MaxId.TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            bytes.AddRange(PtsCount.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateReadHistoryOutbox TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var maxIdLocal =  des.As<int>().Read();
            var ptsLocal =  des.As<int>().Read();
            var ptsCountLocal =  des.As<int>().Read();
            return new() {
            Peer = peerLocal,
            MaxId = maxIdLocal,
            Pts = ptsLocal,
            PtsCount = ptsCountLocal,
            };
        }
    }
    public class UpdateWebPage : UpdateBase, ITlSerializable, ITlDeserializable<UpdateWebPage> {
        public static readonly byte[] Identifier = [19,18,137,127,];
        public required WebPageBase Webpage {get;set;}
        public required int Pts {get;set;}
        public required int PtsCount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Webpage.TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            bytes.AddRange(PtsCount.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateWebPage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var webpageLocal =  WebPageBase.TlDeserialize(des);
            var ptsLocal =  des.As<int>().Read();
            var ptsCountLocal =  des.As<int>().Read();
            return new() {
            Webpage = webpageLocal,
            Pts = ptsLocal,
            PtsCount = ptsCountLocal,
            };
        }
    }
    public class UpdateReadMessagesContents : UpdateBase, ITlSerializable, ITlDeserializable<UpdateReadMessagesContents> {
        public static readonly byte[] Identifier = [129,113,34,248,];
        private int Flags;
        public required List<int> Messages {get;set;}
        public required int Pts {get;set;}
        public required int PtsCount {get;set;}
        public int? Date {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Date is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Messages.TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            bytes.AddRange(PtsCount.TlSerialize());
            if(Date is not null) bytes.AddRange(Date.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateReadMessagesContents TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var messagesLocal =  des.ReadNumbers<int>();
            var ptsLocal =  des.As<int>().Read();
            var ptsCountLocal =  des.As<int>().Read();
            var dateLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Messages = messagesLocal,
            Pts = ptsLocal,
            PtsCount = ptsCountLocal,
            Date = dateLocal,
            };
        }
    }
    public class UpdateChannelTooLong : UpdateBase, ITlSerializable, ITlDeserializable<UpdateChannelTooLong> {
        public static readonly byte[] Identifier = [31,148,141,16,];
        private int Flags;
        public required long ChannelId {get;set;}
        public int? Pts {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Pts is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(ChannelId.TlSerialize());
            if(Pts is not null) bytes.AddRange(Pts.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateChannelTooLong TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var channelIdLocal =  des.As<long>().Read();
            var ptsLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            ChannelId = channelIdLocal,
            Pts = ptsLocal,
            };
        }
    }
    public class UpdateChannel : UpdateBase, ITlSerializable, ITlDeserializable<UpdateChannel> {
        public static readonly byte[] Identifier = [9,76,91,99,];
        public required long ChannelId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChannelId.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateChannel TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var channelIdLocal =  des.As<long>().Read();
            return new() {
            ChannelId = channelIdLocal,
            };
        }
    }
    public class UpdateNewChannelMessage : UpdateBase, ITlSerializable, ITlDeserializable<UpdateNewChannelMessage> {
        public static readonly byte[] Identifier = [217,4,186,98,];
        public required MessageBase Message {get;set;}
        public required int Pts {get;set;}
        public required int PtsCount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Message.TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            bytes.AddRange(PtsCount.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateNewChannelMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var messageLocal =  MessageBase.TlDeserialize(des);
            var ptsLocal =  des.As<int>().Read();
            var ptsCountLocal =  des.As<int>().Read();
            return new() {
            Message = messageLocal,
            Pts = ptsLocal,
            PtsCount = ptsCountLocal,
            };
        }
    }
    public class UpdateReadChannelInbox : UpdateBase, ITlSerializable, ITlDeserializable<UpdateReadChannelInbox> {
        public static readonly byte[] Identifier = [16,110,46,146,];
        private int Flags;
        public int? FolderId {get;set;}
        public required long ChannelId {get;set;}
        public required int MaxId {get;set;}
        public required int StillUnreadCount {get;set;}
        public required int Pts {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (FolderId is not null ? 1 : 0) ).TlSerialize());
            if(FolderId is not null) bytes.AddRange(FolderId.TlSerialize());
            bytes.AddRange(ChannelId.TlSerialize());
            bytes.AddRange(MaxId.TlSerialize());
            bytes.AddRange(StillUnreadCount.TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateReadChannelInbox TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var folderIdLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var channelIdLocal =  des.As<long>().Read();
            var maxIdLocal =  des.As<int>().Read();
            var stillUnreadCountLocal =  des.As<int>().Read();
            var ptsLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            FolderId = folderIdLocal,
            ChannelId = channelIdLocal,
            MaxId = maxIdLocal,
            StillUnreadCount = stillUnreadCountLocal,
            Pts = ptsLocal,
            };
        }
    }
    public class UpdateDeleteChannelMessages : UpdateBase, ITlSerializable, ITlDeserializable<UpdateDeleteChannelMessages> {
        public static readonly byte[] Identifier = [18,91,45,195,];
        public required long ChannelId {get;set;}
        public required List<int> Messages {get;set;}
        public required int Pts {get;set;}
        public required int PtsCount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChannelId.TlSerialize());
            bytes.AddRange(Messages.TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            bytes.AddRange(PtsCount.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateDeleteChannelMessages TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var channelIdLocal =  des.As<long>().Read();
            var messagesLocal =  des.ReadNumbers<int>();
            var ptsLocal =  des.As<int>().Read();
            var ptsCountLocal =  des.As<int>().Read();
            return new() {
            ChannelId = channelIdLocal,
            Messages = messagesLocal,
            Pts = ptsLocal,
            PtsCount = ptsCountLocal,
            };
        }
    }
    public class UpdateChannelMessageViews : UpdateBase, ITlSerializable, ITlDeserializable<UpdateChannelMessageViews> {
        public static readonly byte[] Identifier = [8,172,38,242,];
        public required long ChannelId {get;set;}
        public required int Id {get;set;}
        public required int Views {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChannelId.TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Views.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateChannelMessageViews TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var channelIdLocal =  des.As<long>().Read();
            var idLocal =  des.As<int>().Read();
            var viewsLocal =  des.As<int>().Read();
            return new() {
            ChannelId = channelIdLocal,
            Id = idLocal,
            Views = viewsLocal,
            };
        }
    }
    public class UpdateChatParticipantAdmin : UpdateBase, ITlSerializable, ITlDeserializable<UpdateChatParticipantAdmin> {
        public static readonly byte[] Identifier = [162,97,202,215,];
        public required long ChatId {get;set;}
        public required long UserId {get;set;}
        public bool IsAdmin {get;set;}
        public required int Version {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChatId.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Version.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateChatParticipantAdmin TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var chatIdLocal =  des.As<long>().Read();
            var userIdLocal =  des.As<long>().Read();
            var isAdminLocal =  des.As<bool>().Read();
            var versionLocal =  des.As<int>().Read();
            return new() {
            ChatId = chatIdLocal,
            UserId = userIdLocal,
            IsAdmin = isAdminLocal,
            Version = versionLocal,
            };
        }
    }
    public class UpdateNewStickerSet : UpdateBase, ITlSerializable, ITlDeserializable<UpdateNewStickerSet> {
        public static readonly byte[] Identifier = [170,48,138,104,];
        public required MessagesStickerSetBase Stickerset {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Stickerset.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateNewStickerSet TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var stickersetLocal =  MessagesStickerSetBase.TlDeserialize(des);
            return new() {
            Stickerset = stickersetLocal,
            };
        }
    }
    public class UpdateStickerSetsOrder : UpdateBase, ITlSerializable, ITlDeserializable<UpdateStickerSetsOrder> {
        public static readonly byte[] Identifier = [1,210,178,11,];
        private int Flags;
        public bool Masks {get;set;}
        public bool Emojis {get;set;}
        public required List<long> Order {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Order.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateStickerSetsOrder TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var masksLocal = (flagsLocal & 1) is 0 ? default : true ;
            var emojisLocal = (flagsLocal & 2) is 0 ? default : true ;
            var orderLocal =  des.ReadNumbers<long>();
            return new() {
            Flags = flagsLocal,
            Masks = masksLocal,
            Emojis = emojisLocal,
            Order = orderLocal,
            };
        }
    }
    public class UpdateStickerSets : UpdateBase, ITlSerializable, ITlDeserializable<UpdateStickerSets> {
        public static readonly byte[] Identifier = [8,72,194,49,];
        private int Flags;
        public bool Masks {get;set;}
        public bool Emojis {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateStickerSets TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var masksLocal = (flagsLocal & 1) is 0 ? default : true ;
            var emojisLocal = (flagsLocal & 2) is 0 ? default : true ;
            return new() {
            Flags = flagsLocal,
            Masks = masksLocal,
            Emojis = emojisLocal,
            };
        }
    }
    public class UpdateSavedGifs : UpdateBase, ITlSerializable, ITlDeserializable<UpdateSavedGifs> {
        public static readonly byte[] Identifier = [30,52,117,147,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static UpdateSavedGifs TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class UpdateBotInlineQuery : UpdateBase, ITlSerializable, ITlDeserializable<UpdateBotInlineQuery> {
        public static readonly byte[] Identifier = [156,55,111,73,];
        private int Flags;
        public required long QueryId {get;set;}
        public required long UserId {get;set;}
        public required string Query {get;set;}
        public GeoPointBase? Geo {get;set;}
        public InlineQueryPeerTypeBase? PeerType {get;set;}
        public required string Offset {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Geo is not null ? 1 : 0) | (PeerType is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(QueryId.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Query.TlSerialize());
            if(Geo is not null) bytes.AddRange(Geo.TlSerialize());
            if(PeerType is not null) bytes.AddRange(PeerType.TlSerialize());
            bytes.AddRange(Offset.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateBotInlineQuery TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var queryIdLocal =  des.As<long>().Read();
            var userIdLocal =  des.As<long>().Read();
            var queryLocal =  des.As<string>().Read();
            var geoLocal = (flagsLocal & 1) is 0 ? default : GeoPointBase.TlDeserialize(des) ;
            var peerTypeLocal = (flagsLocal & 2) is 0 ? default : InlineQueryPeerTypeBase.TlDeserialize(des) ;
            var offsetLocal =  des.As<string>().Read();
            return new() {
            Flags = flagsLocal,
            QueryId = queryIdLocal,
            UserId = userIdLocal,
            Query = queryLocal,
            Geo = geoLocal,
            PeerType = peerTypeLocal,
            Offset = offsetLocal,
            };
        }
    }
    public class UpdateBotInlineSend : UpdateBase, ITlSerializable, ITlDeserializable<UpdateBotInlineSend> {
        public static readonly byte[] Identifier = [7,42,241,18,];
        private int Flags;
        public required long UserId {get;set;}
        public required string Query {get;set;}
        public GeoPointBase? Geo {get;set;}
        public required string Id {get;set;}
        public InputBotInlineMessageIDBase? MsgId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Geo is not null ? 1 : 0) | (MsgId is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Query.TlSerialize());
            if(Geo is not null) bytes.AddRange(Geo.TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            if(MsgId is not null) bytes.AddRange(MsgId.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateBotInlineSend TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var userIdLocal =  des.As<long>().Read();
            var queryLocal =  des.As<string>().Read();
            var geoLocal = (flagsLocal & 1) is 0 ? default : GeoPointBase.TlDeserialize(des) ;
            var idLocal =  des.As<string>().Read();
            var msgIdLocal = (flagsLocal & 2) is 0 ? default : InputBotInlineMessageIDBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            UserId = userIdLocal,
            Query = queryLocal,
            Geo = geoLocal,
            Id = idLocal,
            MsgId = msgIdLocal,
            };
        }
    }
    public class UpdateEditChannelMessage : UpdateBase, ITlSerializable, ITlDeserializable<UpdateEditChannelMessage> {
        public static readonly byte[] Identifier = [247,77,63,27,];
        public required MessageBase Message {get;set;}
        public required int Pts {get;set;}
        public required int PtsCount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Message.TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            bytes.AddRange(PtsCount.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateEditChannelMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var messageLocal =  MessageBase.TlDeserialize(des);
            var ptsLocal =  des.As<int>().Read();
            var ptsCountLocal =  des.As<int>().Read();
            return new() {
            Message = messageLocal,
            Pts = ptsLocal,
            PtsCount = ptsCountLocal,
            };
        }
    }
    public class UpdateBotCallbackQuery : UpdateBase, ITlSerializable, ITlDeserializable<UpdateBotCallbackQuery> {
        public static readonly byte[] Identifier = [141,196,207,185,];
        private int Flags;
        public required long QueryId {get;set;}
        public required long UserId {get;set;}
        public required PeerBase Peer {get;set;}
        public required int MsgId {get;set;}
        public required long ChatInstance {get;set;}
        public byte[]? Data {get;set;}
        public string? GameShortName {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Data is not null ? 1 : 0) | (GameShortName is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(QueryId.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(MsgId.TlSerialize());
            bytes.AddRange(ChatInstance.TlSerialize());
            if(Data is not null) bytes.AddRange(Data.TlSerialize());
            if(GameShortName is not null) bytes.AddRange(GameShortName.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateBotCallbackQuery TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var queryIdLocal =  des.As<long>().Read();
            var userIdLocal =  des.As<long>().Read();
            var peerLocal =  PeerBase.TlDeserialize(des);
            var msgIdLocal =  des.As<int>().Read();
            var chatInstanceLocal =  des.As<long>().Read();
            var dataLocal = (flagsLocal & 1) is 0 ? default : des.As<byte[]>().Read() ;
            var gameShortNameLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            QueryId = queryIdLocal,
            UserId = userIdLocal,
            Peer = peerLocal,
            MsgId = msgIdLocal,
            ChatInstance = chatInstanceLocal,
            Data = dataLocal,
            GameShortName = gameShortNameLocal,
            };
        }
    }
    public class UpdateEditMessage : UpdateBase, ITlSerializable, ITlDeserializable<UpdateEditMessage> {
        public static readonly byte[] Identifier = [163,112,3,228,];
        public required MessageBase Message {get;set;}
        public required int Pts {get;set;}
        public required int PtsCount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Message.TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            bytes.AddRange(PtsCount.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateEditMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var messageLocal =  MessageBase.TlDeserialize(des);
            var ptsLocal =  des.As<int>().Read();
            var ptsCountLocal =  des.As<int>().Read();
            return new() {
            Message = messageLocal,
            Pts = ptsLocal,
            PtsCount = ptsCountLocal,
            };
        }
    }
    public class UpdateInlineBotCallbackQuery : UpdateBase, ITlSerializable, ITlDeserializable<UpdateInlineBotCallbackQuery> {
        public static readonly byte[] Identifier = [82,144,30,105,];
        private int Flags;
        public required long QueryId {get;set;}
        public required long UserId {get;set;}
        public required InputBotInlineMessageIDBase MsgId {get;set;}
        public required long ChatInstance {get;set;}
        public byte[]? Data {get;set;}
        public string? GameShortName {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Data is not null ? 1 : 0) | (GameShortName is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(QueryId.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(MsgId.TlSerialize());
            bytes.AddRange(ChatInstance.TlSerialize());
            if(Data is not null) bytes.AddRange(Data.TlSerialize());
            if(GameShortName is not null) bytes.AddRange(GameShortName.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateInlineBotCallbackQuery TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var queryIdLocal =  des.As<long>().Read();
            var userIdLocal =  des.As<long>().Read();
            var msgIdLocal =  InputBotInlineMessageIDBase.TlDeserialize(des);
            var chatInstanceLocal =  des.As<long>().Read();
            var dataLocal = (flagsLocal & 1) is 0 ? default : des.As<byte[]>().Read() ;
            var gameShortNameLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            QueryId = queryIdLocal,
            UserId = userIdLocal,
            MsgId = msgIdLocal,
            ChatInstance = chatInstanceLocal,
            Data = dataLocal,
            GameShortName = gameShortNameLocal,
            };
        }
    }
    public class UpdateReadChannelOutbox : UpdateBase, ITlSerializable, ITlDeserializable<UpdateReadChannelOutbox> {
        public static readonly byte[] Identifier = [169,153,95,183,];
        public required long ChannelId {get;set;}
        public required int MaxId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChannelId.TlSerialize());
            bytes.AddRange(MaxId.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateReadChannelOutbox TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var channelIdLocal =  des.As<long>().Read();
            var maxIdLocal =  des.As<int>().Read();
            return new() {
            ChannelId = channelIdLocal,
            MaxId = maxIdLocal,
            };
        }
    }
    public class UpdateDraftMessage : UpdateBase, ITlSerializable, ITlDeserializable<UpdateDraftMessage> {
        public static readonly byte[] Identifier = [109,236,73,27,];
        private int Flags;
        public required PeerBase Peer {get;set;}
        public int? TopMsgId {get;set;}
        public required DraftMessageBase Draft {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (TopMsgId is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            if(TopMsgId is not null) bytes.AddRange(TopMsgId.TlSerialize());
            bytes.AddRange(Draft.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateDraftMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var peerLocal =  PeerBase.TlDeserialize(des);
            var topMsgIdLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var draftLocal =  DraftMessageBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Peer = peerLocal,
            TopMsgId = topMsgIdLocal,
            Draft = draftLocal,
            };
        }
    }
    public class UpdateReadFeaturedStickers : UpdateBase, ITlSerializable, ITlDeserializable<UpdateReadFeaturedStickers> {
        public static readonly byte[] Identifier = [66,39,29,87,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static UpdateReadFeaturedStickers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class UpdateRecentStickers : UpdateBase, ITlSerializable, ITlDeserializable<UpdateRecentStickers> {
        public static readonly byte[] Identifier = [32,44,66,154,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static UpdateRecentStickers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class UpdateConfig : UpdateBase, ITlSerializable, ITlDeserializable<UpdateConfig> {
        public static readonly byte[] Identifier = [6,221,41,162,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static UpdateConfig TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class UpdatePtsChanged : UpdateBase, ITlSerializable, ITlDeserializable<UpdatePtsChanged> {
        public static readonly byte[] Identifier = [143,103,84,51,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static UpdatePtsChanged TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class UpdateChannelWebPage : UpdateBase, ITlSerializable, ITlDeserializable<UpdateChannelWebPage> {
        public static readonly byte[] Identifier = [159,169,43,47,];
        public required long ChannelId {get;set;}
        public required WebPageBase Webpage {get;set;}
        public required int Pts {get;set;}
        public required int PtsCount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChannelId.TlSerialize());
            bytes.AddRange(Webpage.TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            bytes.AddRange(PtsCount.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateChannelWebPage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var channelIdLocal =  des.As<long>().Read();
            var webpageLocal =  WebPageBase.TlDeserialize(des);
            var ptsLocal =  des.As<int>().Read();
            var ptsCountLocal =  des.As<int>().Read();
            return new() {
            ChannelId = channelIdLocal,
            Webpage = webpageLocal,
            Pts = ptsLocal,
            PtsCount = ptsCountLocal,
            };
        }
    }
    public class UpdateDialogPinned : UpdateBase, ITlSerializable, ITlDeserializable<UpdateDialogPinned> {
        public static readonly byte[] Identifier = [28,229,111,110,];
        private int Flags;
        public bool Pinned {get;set;}
        public int? FolderId {get;set;}
        public required DialogPeerBase Peer {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (FolderId is not null ? 2 : 0) ).TlSerialize());
            if(FolderId is not null) bytes.AddRange(FolderId.TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateDialogPinned TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var pinnedLocal = (flagsLocal & 1) is 0 ? default : true ;
            var folderIdLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            var peerLocal =  DialogPeerBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Pinned = pinnedLocal,
            FolderId = folderIdLocal,
            Peer = peerLocal,
            };
        }
    }
    public class UpdatePinnedDialogs : UpdateBase, ITlSerializable, ITlDeserializable<UpdatePinnedDialogs> {
        public static readonly byte[] Identifier = [162,60,15,250,];
        private int Flags;
        public int? FolderId {get;set;}
        public List<DialogPeerBase>? Order {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (FolderId is not null ? 2 : 0) | (Order is not null ? 1 : 0) ).TlSerialize());
            if(FolderId is not null) bytes.AddRange(FolderId.TlSerialize());
            if(Order is not null) bytes.AddRange(Order.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdatePinnedDialogs TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var folderIdLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            var orderLocal = (flagsLocal & 1) is 0 ? default : des.Read<DialogPeerBase>() ;
            return new() {
            Flags = flagsLocal,
            FolderId = folderIdLocal,
            Order = orderLocal,
            };
        }
    }
    public class UpdateBotWebhookJSON : UpdateBase, ITlSerializable, ITlDeserializable<UpdateBotWebhookJSON> {
        public static readonly byte[] Identifier = [195,192,23,131,];
        public required DataJSONBase Data {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Data.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateBotWebhookJSON TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var dataLocal =  DataJSONBase.TlDeserialize(des);
            return new() {
            Data = dataLocal,
            };
        }
    }
    public class UpdateBotWebhookJSONQuery : UpdateBase, ITlSerializable, ITlDeserializable<UpdateBotWebhookJSONQuery> {
        public static readonly byte[] Identifier = [166,64,146,155,];
        public required long QueryId {get;set;}
        public required DataJSONBase Data {get;set;}
        public required int Timeout {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(QueryId.TlSerialize());
            bytes.AddRange(Data.TlSerialize());
            bytes.AddRange(Timeout.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateBotWebhookJSONQuery TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var queryIdLocal =  des.As<long>().Read();
            var dataLocal =  DataJSONBase.TlDeserialize(des);
            var timeoutLocal =  des.As<int>().Read();
            return new() {
            QueryId = queryIdLocal,
            Data = dataLocal,
            Timeout = timeoutLocal,
            };
        }
    }
    public class UpdateBotShippingQuery : UpdateBase, ITlSerializable, ITlDeserializable<UpdateBotShippingQuery> {
        public static readonly byte[] Identifier = [125,253,174,181,];
        public required long QueryId {get;set;}
        public required long UserId {get;set;}
        public required byte[] Payload {get;set;}
        public required PostAddressBase ShippingAddress {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(QueryId.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Payload.TlSerialize());
            bytes.AddRange(ShippingAddress.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateBotShippingQuery TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var queryIdLocal =  des.As<long>().Read();
            var userIdLocal =  des.As<long>().Read();
            var payloadLocal =  des.As<byte[]>().Read();
            var shippingAddressLocal =  PostAddressBase.TlDeserialize(des);
            return new() {
            QueryId = queryIdLocal,
            UserId = userIdLocal,
            Payload = payloadLocal,
            ShippingAddress = shippingAddressLocal,
            };
        }
    }
    public class UpdateBotPrecheckoutQuery : UpdateBase, ITlSerializable, ITlDeserializable<UpdateBotPrecheckoutQuery> {
        public static readonly byte[] Identifier = [150,154,170,140,];
        private int Flags;
        public required long QueryId {get;set;}
        public required long UserId {get;set;}
        public required byte[] Payload {get;set;}
        public PaymentRequestedInfoBase? Info {get;set;}
        public string? ShippingOptionId {get;set;}
        public required string Currency {get;set;}
        public required long TotalAmount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Info is not null ? 1 : 0) | (ShippingOptionId is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(QueryId.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Payload.TlSerialize());
            if(Info is not null) bytes.AddRange(Info.TlSerialize());
            if(ShippingOptionId is not null) bytes.AddRange(ShippingOptionId.TlSerialize());
            bytes.AddRange(Currency.TlSerialize());
            bytes.AddRange(TotalAmount.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateBotPrecheckoutQuery TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var queryIdLocal =  des.As<long>().Read();
            var userIdLocal =  des.As<long>().Read();
            var payloadLocal =  des.As<byte[]>().Read();
            var infoLocal = (flagsLocal & 1) is 0 ? default : PaymentRequestedInfoBase.TlDeserialize(des) ;
            var shippingOptionIdLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var currencyLocal =  des.As<string>().Read();
            var totalAmountLocal =  des.As<long>().Read();
            return new() {
            Flags = flagsLocal,
            QueryId = queryIdLocal,
            UserId = userIdLocal,
            Payload = payloadLocal,
            Info = infoLocal,
            ShippingOptionId = shippingOptionIdLocal,
            Currency = currencyLocal,
            TotalAmount = totalAmountLocal,
            };
        }
    }
    public class UpdatePhoneCall : UpdateBase, ITlSerializable, ITlDeserializable<UpdatePhoneCall> {
        public static readonly byte[] Identifier = [30,107,15,171,];
        public required PhoneCallBase PhoneCall {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PhoneCall.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdatePhoneCall TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var phoneCallLocal =  PhoneCallBase.TlDeserialize(des);
            return new() {
            PhoneCall = phoneCallLocal,
            };
        }
    }
    public class UpdateLangPackTooLong : UpdateBase, ITlSerializable, ITlDeserializable<UpdateLangPackTooLong> {
        public static readonly byte[] Identifier = [100,2,86,70,];
        public required string LangCode {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(LangCode.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateLangPackTooLong TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var langCodeLocal =  des.As<string>().Read();
            return new() {
            LangCode = langCodeLocal,
            };
        }
    }
    public class UpdateLangPack : UpdateBase, ITlSerializable, ITlDeserializable<UpdateLangPack> {
        public static readonly byte[] Identifier = [77,47,2,86,];
        public required LangPackDifferenceBase Difference {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Difference.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateLangPack TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var differenceLocal =  LangPackDifferenceBase.TlDeserialize(des);
            return new() {
            Difference = differenceLocal,
            };
        }
    }
    public class UpdateFavedStickers : UpdateBase, ITlSerializable, ITlDeserializable<UpdateFavedStickers> {
        public static readonly byte[] Identifier = [109,153,17,229,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static UpdateFavedStickers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class UpdateChannelReadMessagesContents : UpdateBase, ITlSerializable, ITlDeserializable<UpdateChannelReadMessagesContents> {
        public static readonly byte[] Identifier = [93,5,41,234,];
        private int Flags;
        public required long ChannelId {get;set;}
        public int? TopMsgId {get;set;}
        public required List<int> Messages {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (TopMsgId is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(ChannelId.TlSerialize());
            if(TopMsgId is not null) bytes.AddRange(TopMsgId.TlSerialize());
            bytes.AddRange(Messages.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateChannelReadMessagesContents TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var channelIdLocal =  des.As<long>().Read();
            var topMsgIdLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var messagesLocal =  des.ReadNumbers<int>();
            return new() {
            Flags = flagsLocal,
            ChannelId = channelIdLocal,
            TopMsgId = topMsgIdLocal,
            Messages = messagesLocal,
            };
        }
    }
    public class UpdateContactsReset : UpdateBase, ITlSerializable, ITlDeserializable<UpdateContactsReset> {
        public static readonly byte[] Identifier = [190,167,132,112,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static UpdateContactsReset TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class UpdateChannelAvailableMessages : UpdateBase, ITlSerializable, ITlDeserializable<UpdateChannelAvailableMessages> {
        public static readonly byte[] Identifier = [152,198,63,178,];
        public required long ChannelId {get;set;}
        public required int AvailableMinId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChannelId.TlSerialize());
            bytes.AddRange(AvailableMinId.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateChannelAvailableMessages TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var channelIdLocal =  des.As<long>().Read();
            var availableMinIdLocal =  des.As<int>().Read();
            return new() {
            ChannelId = channelIdLocal,
            AvailableMinId = availableMinIdLocal,
            };
        }
    }
    public class UpdateDialogUnreadMark : UpdateBase, ITlSerializable, ITlDeserializable<UpdateDialogUnreadMark> {
        public static readonly byte[] Identifier = [195,89,100,225,];
        private int Flags;
        public bool Unread {get;set;}
        public required DialogPeerBase Peer {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateDialogUnreadMark TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var unreadLocal = (flagsLocal & 1) is 0 ? default : true ;
            var peerLocal =  DialogPeerBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Unread = unreadLocal,
            Peer = peerLocal,
            };
        }
    }
    public class UpdateMessagePoll : UpdateBase, ITlSerializable, ITlDeserializable<UpdateMessagePoll> {
        public static readonly byte[] Identifier = [123,101,161,172,];
        private int Flags;
        public required long PollId {get;set;}
        public PollBase? Poll {get;set;}
        public required PollResultsBase Results {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Poll is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(PollId.TlSerialize());
            if(Poll is not null) bytes.AddRange(Poll.TlSerialize());
            bytes.AddRange(Results.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateMessagePoll TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var pollIdLocal =  des.As<long>().Read();
            var pollLocal = (flagsLocal & 1) is 0 ? default : PollBase.TlDeserialize(des) ;
            var resultsLocal =  PollResultsBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            PollId = pollIdLocal,
            Poll = pollLocal,
            Results = resultsLocal,
            };
        }
    }
    public class UpdateChatDefaultBannedRights : UpdateBase, ITlSerializable, ITlDeserializable<UpdateChatDefaultBannedRights> {
        public static readonly byte[] Identifier = [80,24,192,84,];
        public required PeerBase Peer {get;set;}
        public required ChatBannedRightsBase DefaultBannedRights {get;set;}
        public required int Version {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(DefaultBannedRights.TlSerialize());
            bytes.AddRange(Version.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateChatDefaultBannedRights TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var defaultBannedRightsLocal =  ChatBannedRightsBase.TlDeserialize(des);
            var versionLocal =  des.As<int>().Read();
            return new() {
            Peer = peerLocal,
            DefaultBannedRights = defaultBannedRightsLocal,
            Version = versionLocal,
            };
        }
    }
    public class UpdateFolderPeers : UpdateBase, ITlSerializable, ITlDeserializable<UpdateFolderPeers> {
        public static readonly byte[] Identifier = [192,13,54,25,];
        public required List<FolderPeerBase> FolderPeers {get;set;}
        public required int Pts {get;set;}
        public required int PtsCount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(FolderPeers.TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            bytes.AddRange(PtsCount.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateFolderPeers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var folderPeersLocal =  des.Read<FolderPeerBase>();
            var ptsLocal =  des.As<int>().Read();
            var ptsCountLocal =  des.As<int>().Read();
            return new() {
            FolderPeers = folderPeersLocal,
            Pts = ptsLocal,
            PtsCount = ptsCountLocal,
            };
        }
    }
    public class UpdatePeerSettings : UpdateBase, ITlSerializable, ITlDeserializable<UpdatePeerSettings> {
        public static readonly byte[] Identifier = [102,115,126,106,];
        public required PeerBase Peer {get;set;}
        public required PeerSettingsBase Settings {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(Settings.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdatePeerSettings TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var settingsLocal =  PeerSettingsBase.TlDeserialize(des);
            return new() {
            Peer = peerLocal,
            Settings = settingsLocal,
            };
        }
    }
    public class UpdatePeerLocated : UpdateBase, ITlSerializable, ITlDeserializable<UpdatePeerLocated> {
        public static readonly byte[] Identifier = [176,207,175,180,];
        public required List<PeerLocatedBase> Peers {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peers.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdatePeerLocated TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peersLocal =  des.Read<PeerLocatedBase>();
            return new() {
            Peers = peersLocal,
            };
        }
    }
    public class UpdateNewScheduledMessage : UpdateBase, ITlSerializable, ITlDeserializable<UpdateNewScheduledMessage> {
        public static readonly byte[] Identifier = [251,29,165,57,];
        public required MessageBase Message {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Message.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateNewScheduledMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var messageLocal =  MessageBase.TlDeserialize(des);
            return new() {
            Message = messageLocal,
            };
        }
    }
    public class UpdateDeleteScheduledMessages : UpdateBase, ITlSerializable, ITlDeserializable<UpdateDeleteScheduledMessages> {
        public static readonly byte[] Identifier = [238,108,134,144,];
        public required PeerBase Peer {get;set;}
        public required List<int> Messages {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(Messages.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateDeleteScheduledMessages TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var messagesLocal =  des.ReadNumbers<int>();
            return new() {
            Peer = peerLocal,
            Messages = messagesLocal,
            };
        }
    }
    public class UpdateTheme : UpdateBase, ITlSerializable, ITlDeserializable<UpdateTheme> {
        public static readonly byte[] Identifier = [163,251,22,130,];
        public required ThemeBase Theme {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Theme.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateTheme TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var themeLocal =  ThemeBase.TlDeserialize(des);
            return new() {
            Theme = themeLocal,
            };
        }
    }
    public class UpdateGeoLiveViewed : UpdateBase, ITlSerializable, ITlDeserializable<UpdateGeoLiveViewed> {
        public static readonly byte[] Identifier = [57,185,31,135,];
        public required PeerBase Peer {get;set;}
        public required int MsgId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(MsgId.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateGeoLiveViewed TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var msgIdLocal =  des.As<int>().Read();
            return new() {
            Peer = peerLocal,
            MsgId = msgIdLocal,
            };
        }
    }
    public class UpdateLoginToken : UpdateBase, ITlSerializable, ITlDeserializable<UpdateLoginToken> {
        public static readonly byte[] Identifier = [145,230,79,86,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static UpdateLoginToken TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class UpdateMessagePollVote : UpdateBase, ITlSerializable, ITlDeserializable<UpdateMessagePollVote> {
        public static readonly byte[] Identifier = [119,14,244,36,];
        public required long PollId {get;set;}
        public required PeerBase Peer {get;set;}
        public required List<byte[]> Options {get;set;}
        public required int Qts {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PollId.TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(Options.TlSerialize());
            bytes.AddRange(Qts.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateMessagePollVote TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var pollIdLocal =  des.As<long>().Read();
            var peerLocal =  PeerBase.TlDeserialize(des);
            var optionsLocal =  des.ReadByteArrayList();
            var qtsLocal =  des.As<int>().Read();
            return new() {
            PollId = pollIdLocal,
            Peer = peerLocal,
            Options = optionsLocal,
            Qts = qtsLocal,
            };
        }
    }
    public class UpdateDialogFilter : UpdateBase, ITlSerializable, ITlDeserializable<UpdateDialogFilter> {
        public static readonly byte[] Identifier = [125,222,255,38,];
        private int Flags;
        public required int Id {get;set;}
        public DialogFilterBase? Filter {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Filter is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            if(Filter is not null) bytes.AddRange(Filter.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateDialogFilter TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var idLocal =  des.As<int>().Read();
            var filterLocal = (flagsLocal & 1) is 0 ? default : DialogFilterBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Id = idLocal,
            Filter = filterLocal,
            };
        }
    }
    public class UpdateDialogFilterOrder : UpdateBase, ITlSerializable, ITlDeserializable<UpdateDialogFilterOrder> {
        public static readonly byte[] Identifier = [5,33,215,165,];
        public required List<int> Order {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Order.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateDialogFilterOrder TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var orderLocal =  des.ReadNumbers<int>();
            return new() {
            Order = orderLocal,
            };
        }
    }
    public class UpdateDialogFilters : UpdateBase, ITlSerializable, ITlDeserializable<UpdateDialogFilters> {
        public static readonly byte[] Identifier = [79,145,4,53,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static UpdateDialogFilters TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class UpdatePhoneCallSignalingData : UpdateBase, ITlSerializable, ITlDeserializable<UpdatePhoneCallSignalingData> {
        public static readonly byte[] Identifier = [9,191,97,38,];
        public required long PhoneCallId {get;set;}
        public required byte[] Data {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PhoneCallId.TlSerialize());
            bytes.AddRange(Data.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdatePhoneCallSignalingData TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var phoneCallIdLocal =  des.As<long>().Read();
            var dataLocal =  des.As<byte[]>().Read();
            return new() {
            PhoneCallId = phoneCallIdLocal,
            Data = dataLocal,
            };
        }
    }
    public class UpdateChannelMessageForwards : UpdateBase, ITlSerializable, ITlDeserializable<UpdateChannelMessageForwards> {
        public static readonly byte[] Identifier = [244,39,154,210,];
        public required long ChannelId {get;set;}
        public required int Id {get;set;}
        public required int Forwards {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChannelId.TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Forwards.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateChannelMessageForwards TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var channelIdLocal =  des.As<long>().Read();
            var idLocal =  des.As<int>().Read();
            var forwardsLocal =  des.As<int>().Read();
            return new() {
            ChannelId = channelIdLocal,
            Id = idLocal,
            Forwards = forwardsLocal,
            };
        }
    }
    public class UpdateReadChannelDiscussionInbox : UpdateBase, ITlSerializable, ITlDeserializable<UpdateReadChannelDiscussionInbox> {
        public static readonly byte[] Identifier = [70,149,177,214,];
        private int Flags;
        public required long ChannelId {get;set;}
        public required int TopMsgId {get;set;}
        public required int ReadMaxId {get;set;}
        public long? BroadcastId {get;set;}
        public int? BroadcastPost {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (BroadcastId is not null ? 1 : 0) | (BroadcastPost is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(ChannelId.TlSerialize());
            bytes.AddRange(TopMsgId.TlSerialize());
            bytes.AddRange(ReadMaxId.TlSerialize());
            if(BroadcastId is not null) bytes.AddRange(BroadcastId.TlSerialize());
            if(BroadcastPost is not null) bytes.AddRange(BroadcastPost.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateReadChannelDiscussionInbox TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var channelIdLocal =  des.As<long>().Read();
            var topMsgIdLocal =  des.As<int>().Read();
            var readMaxIdLocal =  des.As<int>().Read();
            var broadcastIdLocal = (flagsLocal & 1) is 0 ? default : des.As<long>().Read() ;
            var broadcastPostLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            ChannelId = channelIdLocal,
            TopMsgId = topMsgIdLocal,
            ReadMaxId = readMaxIdLocal,
            BroadcastId = broadcastIdLocal,
            BroadcastPost = broadcastPostLocal,
            };
        }
    }
    public class UpdateReadChannelDiscussionOutbox : UpdateBase, ITlSerializable, ITlDeserializable<UpdateReadChannelDiscussionOutbox> {
        public static readonly byte[] Identifier = [124,158,92,105,];
        public required long ChannelId {get;set;}
        public required int TopMsgId {get;set;}
        public required int ReadMaxId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChannelId.TlSerialize());
            bytes.AddRange(TopMsgId.TlSerialize());
            bytes.AddRange(ReadMaxId.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateReadChannelDiscussionOutbox TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var channelIdLocal =  des.As<long>().Read();
            var topMsgIdLocal =  des.As<int>().Read();
            var readMaxIdLocal =  des.As<int>().Read();
            return new() {
            ChannelId = channelIdLocal,
            TopMsgId = topMsgIdLocal,
            ReadMaxId = readMaxIdLocal,
            };
        }
    }
    public class UpdatePeerBlocked : UpdateBase, ITlSerializable, ITlDeserializable<UpdatePeerBlocked> {
        public static readonly byte[] Identifier = [82,119,224,235,];
        private int Flags;
        public bool Blocked {get;set;}
        public bool BlockedMyStoriesFrom {get;set;}
        public required PeerBase PeerId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(PeerId.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdatePeerBlocked TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var blockedLocal = (flagsLocal & 1) is 0 ? default : true ;
            var blockedMyStoriesFromLocal = (flagsLocal & 2) is 0 ? default : true ;
            var peerIdLocal =  PeerBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Blocked = blockedLocal,
            BlockedMyStoriesFrom = blockedMyStoriesFromLocal,
            PeerId = peerIdLocal,
            };
        }
    }
    public class UpdateChannelUserTyping : UpdateBase, ITlSerializable, ITlDeserializable<UpdateChannelUserTyping> {
        public static readonly byte[] Identifier = [35,201,136,140,];
        private int Flags;
        public required long ChannelId {get;set;}
        public int? TopMsgId {get;set;}
        public required PeerBase FromId {get;set;}
        public required SendMessageActionBase Action {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (TopMsgId is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(ChannelId.TlSerialize());
            if(TopMsgId is not null) bytes.AddRange(TopMsgId.TlSerialize());
            bytes.AddRange(FromId.TlSerialize());
            bytes.AddRange(Action.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateChannelUserTyping TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var channelIdLocal =  des.As<long>().Read();
            var topMsgIdLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var fromIdLocal =  PeerBase.TlDeserialize(des);
            var actionLocal =  SendMessageActionBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            ChannelId = channelIdLocal,
            TopMsgId = topMsgIdLocal,
            FromId = fromIdLocal,
            Action = actionLocal,
            };
        }
    }
    public class UpdatePinnedMessages : UpdateBase, ITlSerializable, ITlDeserializable<UpdatePinnedMessages> {
        public static readonly byte[] Identifier = [181,234,133,237,];
        private int Flags;
        public bool Pinned {get;set;}
        public required PeerBase Peer {get;set;}
        public required List<int> Messages {get;set;}
        public required int Pts {get;set;}
        public required int PtsCount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(Messages.TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            bytes.AddRange(PtsCount.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdatePinnedMessages TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var pinnedLocal = (flagsLocal & 1) is 0 ? default : true ;
            var peerLocal =  PeerBase.TlDeserialize(des);
            var messagesLocal =  des.ReadNumbers<int>();
            var ptsLocal =  des.As<int>().Read();
            var ptsCountLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            Pinned = pinnedLocal,
            Peer = peerLocal,
            Messages = messagesLocal,
            Pts = ptsLocal,
            PtsCount = ptsCountLocal,
            };
        }
    }
    public class UpdatePinnedChannelMessages : UpdateBase, ITlSerializable, ITlDeserializable<UpdatePinnedChannelMessages> {
        public static readonly byte[] Identifier = [8,134,185,91,];
        private int Flags;
        public bool Pinned {get;set;}
        public required long ChannelId {get;set;}
        public required List<int> Messages {get;set;}
        public required int Pts {get;set;}
        public required int PtsCount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(ChannelId.TlSerialize());
            bytes.AddRange(Messages.TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            bytes.AddRange(PtsCount.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdatePinnedChannelMessages TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var pinnedLocal = (flagsLocal & 1) is 0 ? default : true ;
            var channelIdLocal =  des.As<long>().Read();
            var messagesLocal =  des.ReadNumbers<int>();
            var ptsLocal =  des.As<int>().Read();
            var ptsCountLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            Pinned = pinnedLocal,
            ChannelId = channelIdLocal,
            Messages = messagesLocal,
            Pts = ptsLocal,
            PtsCount = ptsCountLocal,
            };
        }
    }
    public class UpdateChat : UpdateBase, ITlSerializable, ITlDeserializable<UpdateChat> {
        public static readonly byte[] Identifier = [78,106,154,248,];
        public required long ChatId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChatId.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateChat TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var chatIdLocal =  des.As<long>().Read();
            return new() {
            ChatId = chatIdLocal,
            };
        }
    }
    public class UpdateGroupCallParticipants : UpdateBase, ITlSerializable, ITlDeserializable<UpdateGroupCallParticipants> {
        public static readonly byte[] Identifier = [78,219,235,242,];
        public required InputGroupCallBase Call {get;set;}
        public required List<GroupCallParticipantBase> Participants {get;set;}
        public required int Version {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Call.TlSerialize());
            bytes.AddRange(Participants.TlSerialize());
            bytes.AddRange(Version.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateGroupCallParticipants TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var callLocal =  InputGroupCallBase.TlDeserialize(des);
            var participantsLocal =  des.Read<GroupCallParticipantBase>();
            var versionLocal =  des.As<int>().Read();
            return new() {
            Call = callLocal,
            Participants = participantsLocal,
            Version = versionLocal,
            };
        }
    }
    public class UpdateGroupCall : UpdateBase, ITlSerializable, ITlDeserializable<UpdateGroupCall> {
        public static readonly byte[] Identifier = [0,69,178,20,];
        public required long ChatId {get;set;}
        public required GroupCallBase Call {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChatId.TlSerialize());
            bytes.AddRange(Call.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateGroupCall TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var chatIdLocal =  des.As<long>().Read();
            var callLocal =  GroupCallBase.TlDeserialize(des);
            return new() {
            ChatId = chatIdLocal,
            Call = callLocal,
            };
        }
    }
    public class UpdatePeerHistoryTTL : UpdateBase, ITlSerializable, ITlDeserializable<UpdatePeerHistoryTTL> {
        public static readonly byte[] Identifier = [165,185,155,187,];
        private int Flags;
        public required PeerBase Peer {get;set;}
        public int? TtlPeriod {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (TtlPeriod is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            if(TtlPeriod is not null) bytes.AddRange(TtlPeriod.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdatePeerHistoryTTL TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var peerLocal =  PeerBase.TlDeserialize(des);
            var ttlPeriodLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Peer = peerLocal,
            TtlPeriod = ttlPeriodLocal,
            };
        }
    }
    public class UpdateChatParticipant : UpdateBase, ITlSerializable, ITlDeserializable<UpdateChatParticipant> {
        public static readonly byte[] Identifier = [58,102,135,208,];
        private int Flags;
        public required long ChatId {get;set;}
        public required int Date {get;set;}
        public required long ActorId {get;set;}
        public required long UserId {get;set;}
        public ChatParticipantBase? PrevParticipant {get;set;}
        public ChatParticipantBase? NewParticipant {get;set;}
        public ExportedChatInviteBase? Invite {get;set;}
        public required int Qts {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (PrevParticipant is not null ? 1 : 0) | (NewParticipant is not null ? 2 : 0) | (Invite is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(ChatId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(ActorId.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            if(PrevParticipant is not null) bytes.AddRange(PrevParticipant.TlSerialize());
            if(NewParticipant is not null) bytes.AddRange(NewParticipant.TlSerialize());
            if(Invite is not null) bytes.AddRange(Invite.TlSerialize());
            bytes.AddRange(Qts.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateChatParticipant TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var chatIdLocal =  des.As<long>().Read();
            var dateLocal =  des.As<int>().Read();
            var actorIdLocal =  des.As<long>().Read();
            var userIdLocal =  des.As<long>().Read();
            var prevParticipantLocal = (flagsLocal & 1) is 0 ? default : ChatParticipantBase.TlDeserialize(des) ;
            var newParticipantLocal = (flagsLocal & 2) is 0 ? default : ChatParticipantBase.TlDeserialize(des) ;
            var inviteLocal = (flagsLocal & 4) is 0 ? default : ExportedChatInviteBase.TlDeserialize(des) ;
            var qtsLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            ChatId = chatIdLocal,
            Date = dateLocal,
            ActorId = actorIdLocal,
            UserId = userIdLocal,
            PrevParticipant = prevParticipantLocal,
            NewParticipant = newParticipantLocal,
            Invite = inviteLocal,
            Qts = qtsLocal,
            };
        }
    }
    public class UpdateChannelParticipant : UpdateBase, ITlSerializable, ITlDeserializable<UpdateChannelParticipant> {
        public static readonly byte[] Identifier = [187,58,93,152,];
        private int Flags;
        public bool ViaChatlist {get;set;}
        public required long ChannelId {get;set;}
        public required int Date {get;set;}
        public required long ActorId {get;set;}
        public required long UserId {get;set;}
        public ChannelParticipantBase? PrevParticipant {get;set;}
        public ChannelParticipantBase? NewParticipant {get;set;}
        public ExportedChatInviteBase? Invite {get;set;}
        public required int Qts {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (PrevParticipant is not null ? 1 : 0) | (NewParticipant is not null ? 2 : 0) | (Invite is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(ChannelId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(ActorId.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            if(PrevParticipant is not null) bytes.AddRange(PrevParticipant.TlSerialize());
            if(NewParticipant is not null) bytes.AddRange(NewParticipant.TlSerialize());
            if(Invite is not null) bytes.AddRange(Invite.TlSerialize());
            bytes.AddRange(Qts.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateChannelParticipant TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var viaChatlistLocal = (flagsLocal & 8) is 0 ? default : true ;
            var channelIdLocal =  des.As<long>().Read();
            var dateLocal =  des.As<int>().Read();
            var actorIdLocal =  des.As<long>().Read();
            var userIdLocal =  des.As<long>().Read();
            var prevParticipantLocal = (flagsLocal & 1) is 0 ? default : ChannelParticipantBase.TlDeserialize(des) ;
            var newParticipantLocal = (flagsLocal & 2) is 0 ? default : ChannelParticipantBase.TlDeserialize(des) ;
            var inviteLocal = (flagsLocal & 4) is 0 ? default : ExportedChatInviteBase.TlDeserialize(des) ;
            var qtsLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            ViaChatlist = viaChatlistLocal,
            ChannelId = channelIdLocal,
            Date = dateLocal,
            ActorId = actorIdLocal,
            UserId = userIdLocal,
            PrevParticipant = prevParticipantLocal,
            NewParticipant = newParticipantLocal,
            Invite = inviteLocal,
            Qts = qtsLocal,
            };
        }
    }
    public class UpdateBotStopped : UpdateBase, ITlSerializable, ITlDeserializable<UpdateBotStopped> {
        public static readonly byte[] Identifier = [73,10,135,196,];
        public required long UserId {get;set;}
        public required int Date {get;set;}
        public bool Stopped {get;set;}
        public required int Qts {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(Qts.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateBotStopped TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            var dateLocal =  des.As<int>().Read();
            var stoppedLocal =  des.As<bool>().Read();
            var qtsLocal =  des.As<int>().Read();
            return new() {
            UserId = userIdLocal,
            Date = dateLocal,
            Stopped = stoppedLocal,
            Qts = qtsLocal,
            };
        }
    }
    public class UpdateGroupCallConnection : UpdateBase, ITlSerializable, ITlDeserializable<UpdateGroupCallConnection> {
        public static readonly byte[] Identifier = [130,57,120,11,];
        private int Flags;
        public bool Presentation {get;set;}
        public required DataJSONBase Params {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Params.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateGroupCallConnection TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var presentationLocal = (flagsLocal & 1) is 0 ? default : true ;
            var paramsLocal =  DataJSONBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Presentation = presentationLocal,
            Params = paramsLocal,
            };
        }
    }
    public class UpdateBotCommands : UpdateBase, ITlSerializable, ITlDeserializable<UpdateBotCommands> {
        public static readonly byte[] Identifier = [46,47,113,77,];
        public required PeerBase Peer {get;set;}
        public required long BotId {get;set;}
        public required List<BotCommandBase> Commands {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(BotId.TlSerialize());
            bytes.AddRange(Commands.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateBotCommands TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var botIdLocal =  des.As<long>().Read();
            var commandsLocal =  des.Read<BotCommandBase>();
            return new() {
            Peer = peerLocal,
            BotId = botIdLocal,
            Commands = commandsLocal,
            };
        }
    }
    public class UpdatePendingJoinRequests : UpdateBase, ITlSerializable, ITlDeserializable<UpdatePendingJoinRequests> {
        public static readonly byte[] Identifier = [219,195,99,112,];
        public required PeerBase Peer {get;set;}
        public required int RequestsPending {get;set;}
        public required List<long> RecentRequesters {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(RequestsPending.TlSerialize());
            bytes.AddRange(RecentRequesters.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdatePendingJoinRequests TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var requestsPendingLocal =  des.As<int>().Read();
            var recentRequestersLocal =  des.ReadNumbers<long>();
            return new() {
            Peer = peerLocal,
            RequestsPending = requestsPendingLocal,
            RecentRequesters = recentRequestersLocal,
            };
        }
    }
    public class UpdateBotChatInviteRequester : UpdateBase, ITlSerializable, ITlDeserializable<UpdateBotChatInviteRequester> {
        public static readonly byte[] Identifier = [134,169,223,17,];
        public required PeerBase Peer {get;set;}
        public required int Date {get;set;}
        public required long UserId {get;set;}
        public required string About {get;set;}
        public required ExportedChatInviteBase Invite {get;set;}
        public required int Qts {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(About.TlSerialize());
            bytes.AddRange(Invite.TlSerialize());
            bytes.AddRange(Qts.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateBotChatInviteRequester TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var dateLocal =  des.As<int>().Read();
            var userIdLocal =  des.As<long>().Read();
            var aboutLocal =  des.As<string>().Read();
            var inviteLocal =  ExportedChatInviteBase.TlDeserialize(des);
            var qtsLocal =  des.As<int>().Read();
            return new() {
            Peer = peerLocal,
            Date = dateLocal,
            UserId = userIdLocal,
            About = aboutLocal,
            Invite = inviteLocal,
            Qts = qtsLocal,
            };
        }
    }
    public class UpdateMessageReactions : UpdateBase, ITlSerializable, ITlDeserializable<UpdateMessageReactions> {
        public static readonly byte[] Identifier = [184,60,27,94,];
        private int Flags;
        public required PeerBase Peer {get;set;}
        public required int MsgId {get;set;}
        public int? TopMsgId {get;set;}
        public required MessageReactionsBase Reactions {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (TopMsgId is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(MsgId.TlSerialize());
            if(TopMsgId is not null) bytes.AddRange(TopMsgId.TlSerialize());
            bytes.AddRange(Reactions.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateMessageReactions TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var peerLocal =  PeerBase.TlDeserialize(des);
            var msgIdLocal =  des.As<int>().Read();
            var topMsgIdLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var reactionsLocal =  MessageReactionsBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Peer = peerLocal,
            MsgId = msgIdLocal,
            TopMsgId = topMsgIdLocal,
            Reactions = reactionsLocal,
            };
        }
    }
    public class UpdateAttachMenuBots : UpdateBase, ITlSerializable, ITlDeserializable<UpdateAttachMenuBots> {
        public static readonly byte[] Identifier = [11,162,183,23,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static UpdateAttachMenuBots TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class UpdateWebViewResultSent : UpdateBase, ITlSerializable, ITlDeserializable<UpdateWebViewResultSent> {
        public static readonly byte[] Identifier = [157,183,146,21,];
        public required long QueryId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(QueryId.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateWebViewResultSent TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var queryIdLocal =  des.As<long>().Read();
            return new() {
            QueryId = queryIdLocal,
            };
        }
    }
    public class UpdateBotMenuButton : UpdateBase, ITlSerializable, ITlDeserializable<UpdateBotMenuButton> {
        public static readonly byte[] Identifier = [19,88,184,20,];
        public required long BotId {get;set;}
        public required BotMenuButtonBase Button {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(BotId.TlSerialize());
            bytes.AddRange(Button.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateBotMenuButton TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var botIdLocal =  des.As<long>().Read();
            var buttonLocal =  BotMenuButtonBase.TlDeserialize(des);
            return new() {
            BotId = botIdLocal,
            Button = buttonLocal,
            };
        }
    }
    public class UpdateSavedRingtones : UpdateBase, ITlSerializable, ITlDeserializable<UpdateSavedRingtones> {
        public static readonly byte[] Identifier = [153,190,216,116,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static UpdateSavedRingtones TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class UpdateTranscribedAudio : UpdateBase, ITlSerializable, ITlDeserializable<UpdateTranscribedAudio> {
        public static readonly byte[] Identifier = [90,205,132,0,];
        private int Flags;
        public bool Pending {get;set;}
        public required PeerBase Peer {get;set;}
        public required int MsgId {get;set;}
        public required long TranscriptionId {get;set;}
        public required string Text {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(MsgId.TlSerialize());
            bytes.AddRange(TranscriptionId.TlSerialize());
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateTranscribedAudio TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var pendingLocal = (flagsLocal & 1) is 0 ? default : true ;
            var peerLocal =  PeerBase.TlDeserialize(des);
            var msgIdLocal =  des.As<int>().Read();
            var transcriptionIdLocal =  des.As<long>().Read();
            var textLocal =  des.As<string>().Read();
            return new() {
            Flags = flagsLocal,
            Pending = pendingLocal,
            Peer = peerLocal,
            MsgId = msgIdLocal,
            TranscriptionId = transcriptionIdLocal,
            Text = textLocal,
            };
        }
    }
    public class UpdateReadFeaturedEmojiStickers : UpdateBase, ITlSerializable, ITlDeserializable<UpdateReadFeaturedEmojiStickers> {
        public static readonly byte[] Identifier = [108,73,76,251,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static UpdateReadFeaturedEmojiStickers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class UpdateUserEmojiStatus : UpdateBase, ITlSerializable, ITlDeserializable<UpdateUserEmojiStatus> {
        public static readonly byte[] Identifier = [153,53,55,40,];
        public required long UserId {get;set;}
        public required EmojiStatusBase EmojiStatus {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(EmojiStatus.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateUserEmojiStatus TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            var emojiStatusLocal =  EmojiStatusBase.TlDeserialize(des);
            return new() {
            UserId = userIdLocal,
            EmojiStatus = emojiStatusLocal,
            };
        }
    }
    public class UpdateRecentEmojiStatuses : UpdateBase, ITlSerializable, ITlDeserializable<UpdateRecentEmojiStatuses> {
        public static readonly byte[] Identifier = [219,67,244,48,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static UpdateRecentEmojiStatuses TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class UpdateRecentReactions : UpdateBase, ITlSerializable, ITlDeserializable<UpdateRecentReactions> {
        public static readonly byte[] Identifier = [244,99,120,111,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static UpdateRecentReactions TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class UpdateMoveStickerSetToTop : UpdateBase, ITlSerializable, ITlDeserializable<UpdateMoveStickerSetToTop> {
        public static readonly byte[] Identifier = [133,207,252,134,];
        private int Flags;
        public bool Masks {get;set;}
        public bool Emojis {get;set;}
        public required long Stickerset {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Stickerset.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateMoveStickerSetToTop TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var masksLocal = (flagsLocal & 1) is 0 ? default : true ;
            var emojisLocal = (flagsLocal & 2) is 0 ? default : true ;
            var stickersetLocal =  des.As<long>().Read();
            return new() {
            Flags = flagsLocal,
            Masks = masksLocal,
            Emojis = emojisLocal,
            Stickerset = stickersetLocal,
            };
        }
    }
    public class UpdateMessageExtendedMedia : UpdateBase, ITlSerializable, ITlDeserializable<UpdateMessageExtendedMedia> {
        public static readonly byte[] Identifier = [140,169,115,90,];
        public required PeerBase Peer {get;set;}
        public required int MsgId {get;set;}
        public required MessageExtendedMediaBase ExtendedMedia {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(MsgId.TlSerialize());
            bytes.AddRange(ExtendedMedia.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateMessageExtendedMedia TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var msgIdLocal =  des.As<int>().Read();
            var extendedMediaLocal =  MessageExtendedMediaBase.TlDeserialize(des);
            return new() {
            Peer = peerLocal,
            MsgId = msgIdLocal,
            ExtendedMedia = extendedMediaLocal,
            };
        }
    }
    public class UpdateChannelPinnedTopic : UpdateBase, ITlSerializable, ITlDeserializable<UpdateChannelPinnedTopic> {
        public static readonly byte[] Identifier = [227,251,46,25,];
        private int Flags;
        public bool Pinned {get;set;}
        public required long ChannelId {get;set;}
        public required int TopicId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(ChannelId.TlSerialize());
            bytes.AddRange(TopicId.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateChannelPinnedTopic TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var pinnedLocal = (flagsLocal & 1) is 0 ? default : true ;
            var channelIdLocal =  des.As<long>().Read();
            var topicIdLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            Pinned = pinnedLocal,
            ChannelId = channelIdLocal,
            TopicId = topicIdLocal,
            };
        }
    }
    public class UpdateChannelPinnedTopics : UpdateBase, ITlSerializable, ITlDeserializable<UpdateChannelPinnedTopics> {
        public static readonly byte[] Identifier = [2,134,25,254,];
        private int Flags;
        public required long ChannelId {get;set;}
        public List<int>? Order {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Order is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(ChannelId.TlSerialize());
            if(Order is not null) bytes.AddRange(Order.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateChannelPinnedTopics TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var channelIdLocal =  des.As<long>().Read();
            var orderLocal = (flagsLocal & 1) is 0 ? default : des.ReadNumbers<int>() ;
            return new() {
            Flags = flagsLocal,
            ChannelId = channelIdLocal,
            Order = orderLocal,
            };
        }
    }
    public class UpdateUser : UpdateBase, ITlSerializable, ITlDeserializable<UpdateUser> {
        public static readonly byte[] Identifier = [56,148,82,32,];
        public required long UserId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateUser TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            return new() {
            UserId = userIdLocal,
            };
        }
    }
    public class UpdateAutoSaveSettings : UpdateBase, ITlSerializable, ITlDeserializable<UpdateAutoSaveSettings> {
        public static readonly byte[] Identifier = [151,176,5,236,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static UpdateAutoSaveSettings TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class UpdateGroupInvitePrivacyForbidden : UpdateBase, ITlSerializable, ITlDeserializable<UpdateGroupInvitePrivacyForbidden> {
        public static readonly byte[] Identifier = [214,138,240,204,];
        public required long UserId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateGroupInvitePrivacyForbidden TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            return new() {
            UserId = userIdLocal,
            };
        }
    }
    public class UpdateStory : UpdateBase, ITlSerializable, ITlDeserializable<UpdateStory> {
        public static readonly byte[] Identifier = [152,183,179,117,];
        public required PeerBase Peer {get;set;}
        public required StoryItemBase Story {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(Story.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateStory TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var storyLocal =  StoryItemBase.TlDeserialize(des);
            return new() {
            Peer = peerLocal,
            Story = storyLocal,
            };
        }
    }
    public class UpdateReadStories : UpdateBase, ITlSerializable, ITlDeserializable<UpdateReadStories> {
        public static readonly byte[] Identifier = [43,147,78,247,];
        public required PeerBase Peer {get;set;}
        public required int MaxId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(MaxId.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateReadStories TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var maxIdLocal =  des.As<int>().Read();
            return new() {
            Peer = peerLocal,
            MaxId = maxIdLocal,
            };
        }
    }
    public class UpdateStoryID : UpdateBase, ITlSerializable, ITlDeserializable<UpdateStoryID> {
        public static readonly byte[] Identifier = [185,53,243,27,];
        public required int Id {get;set;}
        public required long RandomId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(RandomId.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateStoryID TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<int>().Read();
            var randomIdLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            RandomId = randomIdLocal,
            };
        }
    }
    public class UpdateStoriesStealthMode : UpdateBase, ITlSerializable, ITlDeserializable<UpdateStoriesStealthMode> {
        public static readonly byte[] Identifier = [193,77,8,44,];
        public required StoriesStealthModeBase StealthMode {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(StealthMode.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateStoriesStealthMode TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var stealthModeLocal =  StoriesStealthModeBase.TlDeserialize(des);
            return new() {
            StealthMode = stealthModeLocal,
            };
        }
    }
    public class UpdateSentStoryReaction : UpdateBase, ITlSerializable, ITlDeserializable<UpdateSentStoryReaction> {
        public static readonly byte[] Identifier = [131,118,98,125,];
        public required PeerBase Peer {get;set;}
        public required int StoryId {get;set;}
        public required ReactionBase Reaction {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(StoryId.TlSerialize());
            bytes.AddRange(Reaction.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateSentStoryReaction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var storyIdLocal =  des.As<int>().Read();
            var reactionLocal =  ReactionBase.TlDeserialize(des);
            return new() {
            Peer = peerLocal,
            StoryId = storyIdLocal,
            Reaction = reactionLocal,
            };
        }
    }
    public class UpdateBotChatBoost : UpdateBase, ITlSerializable, ITlDeserializable<UpdateBotChatBoost> {
        public static readonly byte[] Identifier = [156,212,77,144,];
        public required PeerBase Peer {get;set;}
        public required BoostBase Boost {get;set;}
        public required int Qts {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(Boost.TlSerialize());
            bytes.AddRange(Qts.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateBotChatBoost TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var boostLocal =  BoostBase.TlDeserialize(des);
            var qtsLocal =  des.As<int>().Read();
            return new() {
            Peer = peerLocal,
            Boost = boostLocal,
            Qts = qtsLocal,
            };
        }
    }
    public class UpdateChannelViewForumAsMessages : UpdateBase, ITlSerializable, ITlDeserializable<UpdateChannelViewForumAsMessages> {
        public static readonly byte[] Identifier = [32,137,182,7,];
        public required long ChannelId {get;set;}
        public bool Enabled {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChannelId.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateChannelViewForumAsMessages TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var channelIdLocal =  des.As<long>().Read();
            var enabledLocal =  des.As<bool>().Read();
            return new() {
            ChannelId = channelIdLocal,
            Enabled = enabledLocal,
            };
        }
    }
    public class UpdatePeerWallpaper : UpdateBase, ITlSerializable, ITlDeserializable<UpdatePeerWallpaper> {
        public static readonly byte[] Identifier = [29,16,63,174,];
        private int Flags;
        public bool WallpaperOverridden {get;set;}
        public required PeerBase Peer {get;set;}
        public WallPaperBase? Wallpaper {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Wallpaper is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            if(Wallpaper is not null) bytes.AddRange(Wallpaper.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdatePeerWallpaper TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var wallpaperOverriddenLocal = (flagsLocal & 2) is 0 ? default : true ;
            var peerLocal =  PeerBase.TlDeserialize(des);
            var wallpaperLocal = (flagsLocal & 1) is 0 ? default : WallPaperBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            WallpaperOverridden = wallpaperOverriddenLocal,
            Peer = peerLocal,
            Wallpaper = wallpaperLocal,
            };
        }
    }
    public class UpdateBotMessageReaction : UpdateBase, ITlSerializable, ITlDeserializable<UpdateBotMessageReaction> {
        public static readonly byte[] Identifier = [206,211,33,172,];
        public required PeerBase Peer {get;set;}
        public required int MsgId {get;set;}
        public required int Date {get;set;}
        public required PeerBase Actor {get;set;}
        public required List<ReactionBase> OldReactions {get;set;}
        public required List<ReactionBase> NewReactions {get;set;}
        public required int Qts {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(MsgId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(Actor.TlSerialize());
            bytes.AddRange(OldReactions.TlSerialize());
            bytes.AddRange(NewReactions.TlSerialize());
            bytes.AddRange(Qts.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateBotMessageReaction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var msgIdLocal =  des.As<int>().Read();
            var dateLocal =  des.As<int>().Read();
            var actorLocal =  PeerBase.TlDeserialize(des);
            var oldReactionsLocal =  des.Read<ReactionBase>();
            var newReactionsLocal =  des.Read<ReactionBase>();
            var qtsLocal =  des.As<int>().Read();
            return new() {
            Peer = peerLocal,
            MsgId = msgIdLocal,
            Date = dateLocal,
            Actor = actorLocal,
            OldReactions = oldReactionsLocal,
            NewReactions = newReactionsLocal,
            Qts = qtsLocal,
            };
        }
    }
    public class UpdateBotMessageReactions : UpdateBase, ITlSerializable, ITlDeserializable<UpdateBotMessageReactions> {
        public static readonly byte[] Identifier = [89,119,203,9,];
        public required PeerBase Peer {get;set;}
        public required int MsgId {get;set;}
        public required int Date {get;set;}
        public required List<ReactionCountBase> Reactions {get;set;}
        public required int Qts {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(MsgId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(Reactions.TlSerialize());
            bytes.AddRange(Qts.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateBotMessageReactions TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var msgIdLocal =  des.As<int>().Read();
            var dateLocal =  des.As<int>().Read();
            var reactionsLocal =  des.Read<ReactionCountBase>();
            var qtsLocal =  des.As<int>().Read();
            return new() {
            Peer = peerLocal,
            MsgId = msgIdLocal,
            Date = dateLocal,
            Reactions = reactionsLocal,
            Qts = qtsLocal,
            };
        }
    }
    public class UpdateSavedDialogPinned : UpdateBase, ITlSerializable, ITlDeserializable<UpdateSavedDialogPinned> {
        public static readonly byte[] Identifier = [116,158,175,174,];
        private int Flags;
        public bool Pinned {get;set;}
        public required DialogPeerBase Peer {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateSavedDialogPinned TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var pinnedLocal = (flagsLocal & 1) is 0 ? default : true ;
            var peerLocal =  DialogPeerBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Pinned = pinnedLocal,
            Peer = peerLocal,
            };
        }
    }
    public class UpdatePinnedSavedDialogs : UpdateBase, ITlSerializable, ITlDeserializable<UpdatePinnedSavedDialogs> {
        public static readonly byte[] Identifier = [166,133,108,104,];
        private int Flags;
        public List<DialogPeerBase>? Order {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Order is not null ? 1 : 0) ).TlSerialize());
            if(Order is not null) bytes.AddRange(Order.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdatePinnedSavedDialogs TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var orderLocal = (flagsLocal & 1) is 0 ? default : des.Read<DialogPeerBase>() ;
            return new() {
            Flags = flagsLocal,
            Order = orderLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.UpdatesStateNs {
    public class UpdatesState : UpdatesStateBase, ITlSerializable, ITlDeserializable<UpdatesState> {
        public static readonly byte[] Identifier = [62,42,108,165,];
        public required int Pts {get;set;}
        public required int Qts {get;set;}
        public required int Date {get;set;}
        public required int Seq {get;set;}
        public required int UnreadCount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Pts.TlSerialize());
            bytes.AddRange(Qts.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(Seq.TlSerialize());
            bytes.AddRange(UnreadCount.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdatesState TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var ptsLocal =  des.As<int>().Read();
            var qtsLocal =  des.As<int>().Read();
            var dateLocal =  des.As<int>().Read();
            var seqLocal =  des.As<int>().Read();
            var unreadCountLocal =  des.As<int>().Read();
            return new() {
            Pts = ptsLocal,
            Qts = qtsLocal,
            Date = dateLocal,
            Seq = seqLocal,
            UnreadCount = unreadCountLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.UpdatesDifferenceNs {
    public class UpdatesDifferenceEmpty : UpdatesDifferenceBase, ITlSerializable, ITlDeserializable<UpdatesDifferenceEmpty> {
        public static readonly byte[] Identifier = [56,161,117,93,];
        public required int Date {get;set;}
        public required int Seq {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(Seq.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdatesDifferenceEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var dateLocal =  des.As<int>().Read();
            var seqLocal =  des.As<int>().Read();
            return new() {
            Date = dateLocal,
            Seq = seqLocal,
            };
        }
    }
    public class UpdatesDifference : UpdatesDifferenceBase, ITlSerializable, ITlDeserializable<UpdatesDifference> {
        public static readonly byte[] Identifier = [160,156,244,0,];
        public required List<MessageBase> NewMessages {get;set;}
        public required List<EncryptedMessageBase> NewEncryptedMessages {get;set;}
        public required List<UpdateBase> OtherUpdates {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public required UpdatesStateBase State {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(NewMessages.TlSerialize());
            bytes.AddRange(NewEncryptedMessages.TlSerialize());
            bytes.AddRange(OtherUpdates.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            bytes.AddRange(State.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdatesDifference TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var newMessagesLocal =  des.Read<MessageBase>();
            var newEncryptedMessagesLocal =  des.Read<EncryptedMessageBase>();
            var otherUpdatesLocal =  des.Read<UpdateBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            var stateLocal =  UpdatesStateBase.TlDeserialize(des);
            return new() {
            NewMessages = newMessagesLocal,
            NewEncryptedMessages = newEncryptedMessagesLocal,
            OtherUpdates = otherUpdatesLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            State = stateLocal,
            };
        }
    }
    public class UpdatesDifferenceSlice : UpdatesDifferenceBase, ITlSerializable, ITlDeserializable<UpdatesDifferenceSlice> {
        public static readonly byte[] Identifier = [129,25,251,168,];
        public required List<MessageBase> NewMessages {get;set;}
        public required List<EncryptedMessageBase> NewEncryptedMessages {get;set;}
        public required List<UpdateBase> OtherUpdates {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public required UpdatesStateBase IntermediateState {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(NewMessages.TlSerialize());
            bytes.AddRange(NewEncryptedMessages.TlSerialize());
            bytes.AddRange(OtherUpdates.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            bytes.AddRange(IntermediateState.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdatesDifferenceSlice TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var newMessagesLocal =  des.Read<MessageBase>();
            var newEncryptedMessagesLocal =  des.Read<EncryptedMessageBase>();
            var otherUpdatesLocal =  des.Read<UpdateBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            var intermediateStateLocal =  UpdatesStateBase.TlDeserialize(des);
            return new() {
            NewMessages = newMessagesLocal,
            NewEncryptedMessages = newEncryptedMessagesLocal,
            OtherUpdates = otherUpdatesLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            IntermediateState = intermediateStateLocal,
            };
        }
    }
    public class UpdatesDifferenceTooLong : UpdatesDifferenceBase, ITlSerializable, ITlDeserializable<UpdatesDifferenceTooLong> {
        public static readonly byte[] Identifier = [109,143,254,74,];
        public required int Pts {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Pts.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdatesDifferenceTooLong TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var ptsLocal =  des.As<int>().Read();
            return new() {
            Pts = ptsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.UpdatesNs {
    public class UpdatesTooLong : UpdatesBase, ITlSerializable, ITlDeserializable<UpdatesTooLong> {
        public static readonly byte[] Identifier = [126,175,23,227,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static UpdatesTooLong TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class UpdateShortMessage : UpdatesBase, ITlSerializable, ITlDeserializable<UpdateShortMessage> {
        public static readonly byte[] Identifier = [248,199,59,49,];
        private int Flags;
        public bool Out {get;set;}
        public bool Mentioned {get;set;}
        public bool MediaUnread {get;set;}
        public bool Silent {get;set;}
        public required int Id {get;set;}
        public required long UserId {get;set;}
        public required string Message {get;set;}
        public required int Pts {get;set;}
        public required int PtsCount {get;set;}
        public required int Date {get;set;}
        public MessageFwdHeaderBase? FwdFrom {get;set;}
        public long? ViaBotId {get;set;}
        public MessageReplyHeaderBase? ReplyTo {get;set;}
        public List<MessageEntityBase>? Entities {get;set;}
        public int? TtlPeriod {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (FwdFrom is not null ? 4 : 0) | (ViaBotId is not null ? 2048 : 0) | (ReplyTo is not null ? 8 : 0) | (Entities is not null ? 128 : 0) | (TtlPeriod is not null ? 33554432 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Message.TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            bytes.AddRange(PtsCount.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            if(FwdFrom is not null) bytes.AddRange(FwdFrom.TlSerialize());
            if(ViaBotId is not null) bytes.AddRange(ViaBotId.TlSerialize());
            if(ReplyTo is not null) bytes.AddRange(ReplyTo.TlSerialize());
            if(Entities is not null) bytes.AddRange(Entities.TlSerialize());
            if(TtlPeriod is not null) bytes.AddRange(TtlPeriod.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateShortMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var outLocal = (flagsLocal & 2) is 0 ? default : true ;
            var mentionedLocal = (flagsLocal & 16) is 0 ? default : true ;
            var mediaUnreadLocal = (flagsLocal & 32) is 0 ? default : true ;
            var silentLocal = (flagsLocal & 8192) is 0 ? default : true ;
            var idLocal =  des.As<int>().Read();
            var userIdLocal =  des.As<long>().Read();
            var messageLocal =  des.As<string>().Read();
            var ptsLocal =  des.As<int>().Read();
            var ptsCountLocal =  des.As<int>().Read();
            var dateLocal =  des.As<int>().Read();
            var fwdFromLocal = (flagsLocal & 4) is 0 ? default : MessageFwdHeaderBase.TlDeserialize(des) ;
            var viaBotIdLocal = (flagsLocal & 2048) is 0 ? default : des.As<long>().Read() ;
            var replyToLocal = (flagsLocal & 8) is 0 ? default : MessageReplyHeaderBase.TlDeserialize(des) ;
            var entitiesLocal = (flagsLocal & 128) is 0 ? default : des.Read<MessageEntityBase>() ;
            var ttlPeriodLocal = (flagsLocal & 33554432) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Out = outLocal,
            Mentioned = mentionedLocal,
            MediaUnread = mediaUnreadLocal,
            Silent = silentLocal,
            Id = idLocal,
            UserId = userIdLocal,
            Message = messageLocal,
            Pts = ptsLocal,
            PtsCount = ptsCountLocal,
            Date = dateLocal,
            FwdFrom = fwdFromLocal,
            ViaBotId = viaBotIdLocal,
            ReplyTo = replyToLocal,
            Entities = entitiesLocal,
            TtlPeriod = ttlPeriodLocal,
            };
        }
    }
    public class UpdateShortChatMessage : UpdatesBase, ITlSerializable, ITlDeserializable<UpdateShortChatMessage> {
        public static readonly byte[] Identifier = [165,238,109,77,];
        private int Flags;
        public bool Out {get;set;}
        public bool Mentioned {get;set;}
        public bool MediaUnread {get;set;}
        public bool Silent {get;set;}
        public required int Id {get;set;}
        public required long FromId {get;set;}
        public required long ChatId {get;set;}
        public required string Message {get;set;}
        public required int Pts {get;set;}
        public required int PtsCount {get;set;}
        public required int Date {get;set;}
        public MessageFwdHeaderBase? FwdFrom {get;set;}
        public long? ViaBotId {get;set;}
        public MessageReplyHeaderBase? ReplyTo {get;set;}
        public List<MessageEntityBase>? Entities {get;set;}
        public int? TtlPeriod {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (FwdFrom is not null ? 4 : 0) | (ViaBotId is not null ? 2048 : 0) | (ReplyTo is not null ? 8 : 0) | (Entities is not null ? 128 : 0) | (TtlPeriod is not null ? 33554432 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(FromId.TlSerialize());
            bytes.AddRange(ChatId.TlSerialize());
            bytes.AddRange(Message.TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            bytes.AddRange(PtsCount.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            if(FwdFrom is not null) bytes.AddRange(FwdFrom.TlSerialize());
            if(ViaBotId is not null) bytes.AddRange(ViaBotId.TlSerialize());
            if(ReplyTo is not null) bytes.AddRange(ReplyTo.TlSerialize());
            if(Entities is not null) bytes.AddRange(Entities.TlSerialize());
            if(TtlPeriod is not null) bytes.AddRange(TtlPeriod.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateShortChatMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var outLocal = (flagsLocal & 2) is 0 ? default : true ;
            var mentionedLocal = (flagsLocal & 16) is 0 ? default : true ;
            var mediaUnreadLocal = (flagsLocal & 32) is 0 ? default : true ;
            var silentLocal = (flagsLocal & 8192) is 0 ? default : true ;
            var idLocal =  des.As<int>().Read();
            var fromIdLocal =  des.As<long>().Read();
            var chatIdLocal =  des.As<long>().Read();
            var messageLocal =  des.As<string>().Read();
            var ptsLocal =  des.As<int>().Read();
            var ptsCountLocal =  des.As<int>().Read();
            var dateLocal =  des.As<int>().Read();
            var fwdFromLocal = (flagsLocal & 4) is 0 ? default : MessageFwdHeaderBase.TlDeserialize(des) ;
            var viaBotIdLocal = (flagsLocal & 2048) is 0 ? default : des.As<long>().Read() ;
            var replyToLocal = (flagsLocal & 8) is 0 ? default : MessageReplyHeaderBase.TlDeserialize(des) ;
            var entitiesLocal = (flagsLocal & 128) is 0 ? default : des.Read<MessageEntityBase>() ;
            var ttlPeriodLocal = (flagsLocal & 33554432) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Out = outLocal,
            Mentioned = mentionedLocal,
            MediaUnread = mediaUnreadLocal,
            Silent = silentLocal,
            Id = idLocal,
            FromId = fromIdLocal,
            ChatId = chatIdLocal,
            Message = messageLocal,
            Pts = ptsLocal,
            PtsCount = ptsCountLocal,
            Date = dateLocal,
            FwdFrom = fwdFromLocal,
            ViaBotId = viaBotIdLocal,
            ReplyTo = replyToLocal,
            Entities = entitiesLocal,
            TtlPeriod = ttlPeriodLocal,
            };
        }
    }
    public class UpdateShort : UpdatesBase, ITlSerializable, ITlDeserializable<UpdateShort> {
        public static readonly byte[] Identifier = [193,222,212,120,];
        public required UpdateBase Update {get;set;}
        public required int Date {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Update.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateShort TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var updateLocal =  UpdateBase.TlDeserialize(des);
            var dateLocal =  des.As<int>().Read();
            return new() {
            Update = updateLocal,
            Date = dateLocal,
            };
        }
    }
    public class UpdatesCombined : UpdatesBase, ITlSerializable, ITlDeserializable<UpdatesCombined> {
        public static readonly byte[] Identifier = [195,4,91,114,];
        public required List<UpdateBase> Updates {get;set;}
        public required List<UserBase> Users {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required int Date {get;set;}
        public required int SeqStart {get;set;}
        public required int Seq {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Updates.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(SeqStart.TlSerialize());
            bytes.AddRange(Seq.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdatesCombined TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var updatesLocal =  des.Read<UpdateBase>();
            var usersLocal =  des.Read<UserBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var dateLocal =  des.As<int>().Read();
            var seqStartLocal =  des.As<int>().Read();
            var seqLocal =  des.As<int>().Read();
            return new() {
            Updates = updatesLocal,
            Users = usersLocal,
            Chats = chatsLocal,
            Date = dateLocal,
            SeqStart = seqStartLocal,
            Seq = seqLocal,
            };
        }
    }
    public class Updates : UpdatesBase, ITlSerializable, ITlDeserializable<Updates> {
        public static readonly byte[] Identifier = [64,66,174,116,];
        public required List<UpdateBase> UpdatesInner {get;set;}
        public required List<UserBase> Users {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required int Date {get;set;}
        public required int Seq {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UpdatesInner.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(Seq.TlSerialize());
            return bytes.ToArray();
        }

        public new static Updates TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var updatesInnerLocal =  des.Read<UpdateBase>();
            var usersLocal =  des.Read<UserBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var dateLocal =  des.As<int>().Read();
            var seqLocal =  des.As<int>().Read();
            return new() {
            UpdatesInner = updatesInnerLocal,
            Users = usersLocal,
            Chats = chatsLocal,
            Date = dateLocal,
            Seq = seqLocal,
            };
        }
    }
    public class UpdateShortSentMessage : UpdatesBase, ITlSerializable, ITlDeserializable<UpdateShortSentMessage> {
        public static readonly byte[] Identifier = [1,225,21,144,];
        private int Flags;
        public bool Out {get;set;}
        public required int Id {get;set;}
        public required int Pts {get;set;}
        public required int PtsCount {get;set;}
        public required int Date {get;set;}
        public MessageMediaBase? Media {get;set;}
        public List<MessageEntityBase>? Entities {get;set;}
        public int? TtlPeriod {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Media is not null ? 512 : 0) | (Entities is not null ? 128 : 0) | (TtlPeriod is not null ? 33554432 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            bytes.AddRange(PtsCount.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            if(Media is not null) bytes.AddRange(Media.TlSerialize());
            if(Entities is not null) bytes.AddRange(Entities.TlSerialize());
            if(TtlPeriod is not null) bytes.AddRange(TtlPeriod.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdateShortSentMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var outLocal = (flagsLocal & 2) is 0 ? default : true ;
            var idLocal =  des.As<int>().Read();
            var ptsLocal =  des.As<int>().Read();
            var ptsCountLocal =  des.As<int>().Read();
            var dateLocal =  des.As<int>().Read();
            var mediaLocal = (flagsLocal & 512) is 0 ? default : MessageMediaBase.TlDeserialize(des) ;
            var entitiesLocal = (flagsLocal & 128) is 0 ? default : des.Read<MessageEntityBase>() ;
            var ttlPeriodLocal = (flagsLocal & 33554432) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Out = outLocal,
            Id = idLocal,
            Pts = ptsLocal,
            PtsCount = ptsCountLocal,
            Date = dateLocal,
            Media = mediaLocal,
            Entities = entitiesLocal,
            TtlPeriod = ttlPeriodLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PhotosPhotosNs {
    public class PhotosPhotos : PhotosPhotosBase, ITlSerializable, ITlDeserializable<PhotosPhotos> {
        public static readonly byte[] Identifier = [165,106,202,141,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Photos.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhotosPhotos TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var photosLocal =  des.Read<PhotoBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Photos = photosLocal,
            Users = usersLocal,
            };
        }
    }
    public class PhotosPhotosSlice : PhotosPhotosBase, ITlSerializable, ITlDeserializable<PhotosPhotosSlice> {
        public static readonly byte[] Identifier = [84,31,5,21,];
        public required int Count {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(Photos.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhotosPhotosSlice TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var countLocal =  des.As<int>().Read();
            var photosLocal =  des.Read<PhotoBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Count = countLocal,
            Photos = photosLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PhotosPhotoNs {
    public class PhotosPhoto : PhotosPhotoBase, ITlSerializable, ITlDeserializable<PhotosPhoto> {
        public static readonly byte[] Identifier = [168,44,33,32,];
        public required PhotoBase Photo {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Photo.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhotosPhoto TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var photoLocal =  PhotoBase.TlDeserialize(des);
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Photo = photoLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.UploadFileNs {
    public class UploadFile : UploadFileBase, ITlSerializable, ITlDeserializable<UploadFile> {
        public static readonly byte[] Identifier = [213,24,106,9,];
        public required StorageFileTypeBase Type {get;set;}
        public required int Mtime {get;set;}
        public required byte[] Bytes {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Type.TlSerialize());
            bytes.AddRange(Mtime.TlSerialize());
            bytes.AddRange(Bytes.TlSerialize());
            return bytes.ToArray();
        }

        public new static UploadFile TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var typeLocal =  StorageFileTypeBase.TlDeserialize(des);
            var mtimeLocal =  des.As<int>().Read();
            var bytesLocal =  des.As<byte[]>().Read();
            return new() {
            Type = typeLocal,
            Mtime = mtimeLocal,
            Bytes = bytesLocal,
            };
        }
    }
    public class UploadFileCdnRedirect : UploadFileBase, ITlSerializable, ITlDeserializable<UploadFileCdnRedirect> {
        public static readonly byte[] Identifier = [68,218,140,241,];
        public required int DcId {get;set;}
        public required byte[] FileToken {get;set;}
        public required byte[] EncryptionKey {get;set;}
        public required byte[] EncryptionIv {get;set;}
        public required List<FileHashBase> FileHashes {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(DcId.TlSerialize());
            bytes.AddRange(FileToken.TlSerialize());
            bytes.AddRange(EncryptionKey.TlSerialize());
            bytes.AddRange(EncryptionIv.TlSerialize());
            bytes.AddRange(FileHashes.TlSerialize());
            return bytes.ToArray();
        }

        public new static UploadFileCdnRedirect TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var dcIdLocal =  des.As<int>().Read();
            var fileTokenLocal =  des.As<byte[]>().Read();
            var encryptionKeyLocal =  des.As<byte[]>().Read();
            var encryptionIvLocal =  des.As<byte[]>().Read();
            var fileHashesLocal =  des.Read<FileHashBase>();
            return new() {
            DcId = dcIdLocal,
            FileToken = fileTokenLocal,
            EncryptionKey = encryptionKeyLocal,
            EncryptionIv = encryptionIvLocal,
            FileHashes = fileHashesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.DcOptionNs {
    public class DcOption : DcOptionBase, ITlSerializable, ITlDeserializable<DcOption> {
        public static readonly byte[] Identifier = [13,161,183,24,];
        private int Flags;
        public bool Ipv6 {get;set;}
        public bool MediaOnly {get;set;}
        public bool TcpoOnly {get;set;}
        public bool Cdn {get;set;}
        public bool Static {get;set;}
        public bool ThisPortOnly {get;set;}
        public required int Id {get;set;}
        public required string IpAddress {get;set;}
        public required int Port {get;set;}
        public byte[]? Secret {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Secret is not null ? 1024 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(IpAddress.TlSerialize());
            bytes.AddRange(Port.TlSerialize());
            if(Secret is not null) bytes.AddRange(Secret.TlSerialize());
            return bytes.ToArray();
        }

        public new static DcOption TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var ipv6Local = (flagsLocal & 1) is 0 ? default : true ;
            var mediaOnlyLocal = (flagsLocal & 2) is 0 ? default : true ;
            var tcpoOnlyLocal = (flagsLocal & 4) is 0 ? default : true ;
            var cdnLocal = (flagsLocal & 8) is 0 ? default : true ;
            var staticLocal = (flagsLocal & 16) is 0 ? default : true ;
            var thisPortOnlyLocal = (flagsLocal & 32) is 0 ? default : true ;
            var idLocal =  des.As<int>().Read();
            var ipAddressLocal =  des.As<string>().Read();
            var portLocal =  des.As<int>().Read();
            var secretLocal = (flagsLocal & 1024) is 0 ? default : des.As<byte[]>().Read() ;
            return new() {
            Flags = flagsLocal,
            Ipv6 = ipv6Local,
            MediaOnly = mediaOnlyLocal,
            TcpoOnly = tcpoOnlyLocal,
            Cdn = cdnLocal,
            Static = staticLocal,
            ThisPortOnly = thisPortOnlyLocal,
            Id = idLocal,
            IpAddress = ipAddressLocal,
            Port = portLocal,
            Secret = secretLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ConfigNs {
    public class Config : ConfigBase, ITlSerializable, ITlDeserializable<Config> {
        public static readonly byte[] Identifier = [30,36,26,204,];
        private int Flags;
        public bool DefaultP2pContacts {get;set;}
        public bool PreloadFeaturedStickers {get;set;}
        public bool RevokePmInbox {get;set;}
        public bool BlockedMode {get;set;}
        public bool ForceTryIpv6 {get;set;}
        public required int Date {get;set;}
        public required int Expires {get;set;}
        public bool TestMode {get;set;}
        public required int ThisDc {get;set;}
        public required List<DcOptionBase> DcOptions {get;set;}
        public required string DcTxtDomainName {get;set;}
        public required int ChatSizeMax {get;set;}
        public required int MegagroupSizeMax {get;set;}
        public required int ForwardedCountMax {get;set;}
        public required int OnlineUpdatePeriodMs {get;set;}
        public required int OfflineBlurTimeoutMs {get;set;}
        public required int OfflineIdleTimeoutMs {get;set;}
        public required int OnlineCloudTimeoutMs {get;set;}
        public required int NotifyCloudDelayMs {get;set;}
        public required int NotifyDefaultDelayMs {get;set;}
        public required int PushChatPeriodMs {get;set;}
        public required int PushChatLimit {get;set;}
        public required int EditTimeLimit {get;set;}
        public required int RevokeTimeLimit {get;set;}
        public required int RevokePmTimeLimit {get;set;}
        public required int RatingEDecay {get;set;}
        public required int StickersRecentLimit {get;set;}
        public required int ChannelsReadMediaPeriod {get;set;}
        public int? TmpSessions {get;set;}
        public required int CallReceiveTimeoutMs {get;set;}
        public required int CallRingTimeoutMs {get;set;}
        public required int CallConnectTimeoutMs {get;set;}
        public required int CallPacketTimeoutMs {get;set;}
        public required string MeUrlPrefix {get;set;}
        public string? AutoupdateUrlPrefix {get;set;}
        public string? GifSearchUsername {get;set;}
        public string? VenueSearchUsername {get;set;}
        public string? ImgSearchUsername {get;set;}
        public string? StaticMapsProvider {get;set;}
        public required int CaptionLengthMax {get;set;}
        public required int MessageLengthMax {get;set;}
        public required int WebfileDcId {get;set;}
        public string? SuggestedLangCode {get;set;}
        public int? LangPackVersion {get;set;}
        public int? BaseLangPackVersion {get;set;}
        public ReactionBase? ReactionsDefault {get;set;}
        public string? AutologinToken {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (TmpSessions is not null ? 1 : 0) | (AutoupdateUrlPrefix is not null ? 128 : 0) | (GifSearchUsername is not null ? 512 : 0) | (VenueSearchUsername is not null ? 1024 : 0) | (ImgSearchUsername is not null ? 2048 : 0) | (StaticMapsProvider is not null ? 4096 : 0) | (SuggestedLangCode is not null ? 4 : 0) | (LangPackVersion is not null ? 4 : 0) | (BaseLangPackVersion is not null ? 4 : 0) | (ReactionsDefault is not null ? 32768 : 0) | (AutologinToken is not null ? 65536 : 0) ).TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(Expires.TlSerialize());
            bytes.AddRange(ThisDc.TlSerialize());
            bytes.AddRange(DcOptions.TlSerialize());
            bytes.AddRange(DcTxtDomainName.TlSerialize());
            bytes.AddRange(ChatSizeMax.TlSerialize());
            bytes.AddRange(MegagroupSizeMax.TlSerialize());
            bytes.AddRange(ForwardedCountMax.TlSerialize());
            bytes.AddRange(OnlineUpdatePeriodMs.TlSerialize());
            bytes.AddRange(OfflineBlurTimeoutMs.TlSerialize());
            bytes.AddRange(OfflineIdleTimeoutMs.TlSerialize());
            bytes.AddRange(OnlineCloudTimeoutMs.TlSerialize());
            bytes.AddRange(NotifyCloudDelayMs.TlSerialize());
            bytes.AddRange(NotifyDefaultDelayMs.TlSerialize());
            bytes.AddRange(PushChatPeriodMs.TlSerialize());
            bytes.AddRange(PushChatLimit.TlSerialize());
            bytes.AddRange(EditTimeLimit.TlSerialize());
            bytes.AddRange(RevokeTimeLimit.TlSerialize());
            bytes.AddRange(RevokePmTimeLimit.TlSerialize());
            bytes.AddRange(RatingEDecay.TlSerialize());
            bytes.AddRange(StickersRecentLimit.TlSerialize());
            bytes.AddRange(ChannelsReadMediaPeriod.TlSerialize());
            if(TmpSessions is not null) bytes.AddRange(TmpSessions.TlSerialize());
            bytes.AddRange(CallReceiveTimeoutMs.TlSerialize());
            bytes.AddRange(CallRingTimeoutMs.TlSerialize());
            bytes.AddRange(CallConnectTimeoutMs.TlSerialize());
            bytes.AddRange(CallPacketTimeoutMs.TlSerialize());
            bytes.AddRange(MeUrlPrefix.TlSerialize());
            if(AutoupdateUrlPrefix is not null) bytes.AddRange(AutoupdateUrlPrefix.TlSerialize());
            if(GifSearchUsername is not null) bytes.AddRange(GifSearchUsername.TlSerialize());
            if(VenueSearchUsername is not null) bytes.AddRange(VenueSearchUsername.TlSerialize());
            if(ImgSearchUsername is not null) bytes.AddRange(ImgSearchUsername.TlSerialize());
            if(StaticMapsProvider is not null) bytes.AddRange(StaticMapsProvider.TlSerialize());
            bytes.AddRange(CaptionLengthMax.TlSerialize());
            bytes.AddRange(MessageLengthMax.TlSerialize());
            bytes.AddRange(WebfileDcId.TlSerialize());
            if(SuggestedLangCode is not null) bytes.AddRange(SuggestedLangCode.TlSerialize());
            if(LangPackVersion is not null) bytes.AddRange(LangPackVersion.TlSerialize());
            if(BaseLangPackVersion is not null) bytes.AddRange(BaseLangPackVersion.TlSerialize());
            if(ReactionsDefault is not null) bytes.AddRange(ReactionsDefault.TlSerialize());
            if(AutologinToken is not null) bytes.AddRange(AutologinToken.TlSerialize());
            return bytes.ToArray();
        }

        public new static Config TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var defaultP2pContactsLocal = (flagsLocal & 8) is 0 ? default : true ;
            var preloadFeaturedStickersLocal = (flagsLocal & 16) is 0 ? default : true ;
            var revokePmInboxLocal = (flagsLocal & 64) is 0 ? default : true ;
            var blockedModeLocal = (flagsLocal & 256) is 0 ? default : true ;
            var forceTryIpv6Local = (flagsLocal & 16384) is 0 ? default : true ;
            var dateLocal =  des.As<int>().Read();
            var expiresLocal =  des.As<int>().Read();
            var testModeLocal =  des.As<bool>().Read();
            var thisDcLocal =  des.As<int>().Read();
            var dcOptionsLocal =  des.Read<DcOptionBase>();
            var dcTxtDomainNameLocal =  des.As<string>().Read();
            var chatSizeMaxLocal =  des.As<int>().Read();
            var megagroupSizeMaxLocal =  des.As<int>().Read();
            var forwardedCountMaxLocal =  des.As<int>().Read();
            var onlineUpdatePeriodMsLocal =  des.As<int>().Read();
            var offlineBlurTimeoutMsLocal =  des.As<int>().Read();
            var offlineIdleTimeoutMsLocal =  des.As<int>().Read();
            var onlineCloudTimeoutMsLocal =  des.As<int>().Read();
            var notifyCloudDelayMsLocal =  des.As<int>().Read();
            var notifyDefaultDelayMsLocal =  des.As<int>().Read();
            var pushChatPeriodMsLocal =  des.As<int>().Read();
            var pushChatLimitLocal =  des.As<int>().Read();
            var editTimeLimitLocal =  des.As<int>().Read();
            var revokeTimeLimitLocal =  des.As<int>().Read();
            var revokePmTimeLimitLocal =  des.As<int>().Read();
            var ratingEDecayLocal =  des.As<int>().Read();
            var stickersRecentLimitLocal =  des.As<int>().Read();
            var channelsReadMediaPeriodLocal =  des.As<int>().Read();
            var tmpSessionsLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var callReceiveTimeoutMsLocal =  des.As<int>().Read();
            var callRingTimeoutMsLocal =  des.As<int>().Read();
            var callConnectTimeoutMsLocal =  des.As<int>().Read();
            var callPacketTimeoutMsLocal =  des.As<int>().Read();
            var meUrlPrefixLocal =  des.As<string>().Read();
            var autoupdateUrlPrefixLocal = (flagsLocal & 128) is 0 ? default : des.As<string>().Read() ;
            var gifSearchUsernameLocal = (flagsLocal & 512) is 0 ? default : des.As<string>().Read() ;
            var venueSearchUsernameLocal = (flagsLocal & 1024) is 0 ? default : des.As<string>().Read() ;
            var imgSearchUsernameLocal = (flagsLocal & 2048) is 0 ? default : des.As<string>().Read() ;
            var staticMapsProviderLocal = (flagsLocal & 4096) is 0 ? default : des.As<string>().Read() ;
            var captionLengthMaxLocal =  des.As<int>().Read();
            var messageLengthMaxLocal =  des.As<int>().Read();
            var webfileDcIdLocal =  des.As<int>().Read();
            var suggestedLangCodeLocal = (flagsLocal & 4) is 0 ? default : des.As<string>().Read() ;
            var langPackVersionLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            var baseLangPackVersionLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            var reactionsDefaultLocal = (flagsLocal & 32768) is 0 ? default : ReactionBase.TlDeserialize(des) ;
            var autologinTokenLocal = (flagsLocal & 65536) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            DefaultP2pContacts = defaultP2pContactsLocal,
            PreloadFeaturedStickers = preloadFeaturedStickersLocal,
            RevokePmInbox = revokePmInboxLocal,
            BlockedMode = blockedModeLocal,
            ForceTryIpv6 = forceTryIpv6Local,
            Date = dateLocal,
            Expires = expiresLocal,
            TestMode = testModeLocal,
            ThisDc = thisDcLocal,
            DcOptions = dcOptionsLocal,
            DcTxtDomainName = dcTxtDomainNameLocal,
            ChatSizeMax = chatSizeMaxLocal,
            MegagroupSizeMax = megagroupSizeMaxLocal,
            ForwardedCountMax = forwardedCountMaxLocal,
            OnlineUpdatePeriodMs = onlineUpdatePeriodMsLocal,
            OfflineBlurTimeoutMs = offlineBlurTimeoutMsLocal,
            OfflineIdleTimeoutMs = offlineIdleTimeoutMsLocal,
            OnlineCloudTimeoutMs = onlineCloudTimeoutMsLocal,
            NotifyCloudDelayMs = notifyCloudDelayMsLocal,
            NotifyDefaultDelayMs = notifyDefaultDelayMsLocal,
            PushChatPeriodMs = pushChatPeriodMsLocal,
            PushChatLimit = pushChatLimitLocal,
            EditTimeLimit = editTimeLimitLocal,
            RevokeTimeLimit = revokeTimeLimitLocal,
            RevokePmTimeLimit = revokePmTimeLimitLocal,
            RatingEDecay = ratingEDecayLocal,
            StickersRecentLimit = stickersRecentLimitLocal,
            ChannelsReadMediaPeriod = channelsReadMediaPeriodLocal,
            TmpSessions = tmpSessionsLocal,
            CallReceiveTimeoutMs = callReceiveTimeoutMsLocal,
            CallRingTimeoutMs = callRingTimeoutMsLocal,
            CallConnectTimeoutMs = callConnectTimeoutMsLocal,
            CallPacketTimeoutMs = callPacketTimeoutMsLocal,
            MeUrlPrefix = meUrlPrefixLocal,
            AutoupdateUrlPrefix = autoupdateUrlPrefixLocal,
            GifSearchUsername = gifSearchUsernameLocal,
            VenueSearchUsername = venueSearchUsernameLocal,
            ImgSearchUsername = imgSearchUsernameLocal,
            StaticMapsProvider = staticMapsProviderLocal,
            CaptionLengthMax = captionLengthMaxLocal,
            MessageLengthMax = messageLengthMaxLocal,
            WebfileDcId = webfileDcIdLocal,
            SuggestedLangCode = suggestedLangCodeLocal,
            LangPackVersion = langPackVersionLocal,
            BaseLangPackVersion = baseLangPackVersionLocal,
            ReactionsDefault = reactionsDefaultLocal,
            AutologinToken = autologinTokenLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.NearestDcNs {
    public class NearestDc : NearestDcBase, ITlSerializable, ITlDeserializable<NearestDc> {
        public static readonly byte[] Identifier = [117,23,26,142,];
        public required string Country {get;set;}
        public required int ThisDc {get;set;}
        public required int NearestDcInner {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Country.TlSerialize());
            bytes.AddRange(ThisDc.TlSerialize());
            bytes.AddRange(NearestDcInner.TlSerialize());
            return bytes.ToArray();
        }

        public new static NearestDc TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var countryLocal =  des.As<string>().Read();
            var thisDcLocal =  des.As<int>().Read();
            var nearestDcInnerLocal =  des.As<int>().Read();
            return new() {
            Country = countryLocal,
            ThisDc = thisDcLocal,
            NearestDcInner = nearestDcInnerLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.HelpAppUpdateNs {
    public class HelpAppUpdate : HelpAppUpdateBase, ITlSerializable, ITlDeserializable<HelpAppUpdate> {
        public static readonly byte[] Identifier = [48,206,187,204,];
        private int Flags;
        public bool CanNotSkip {get;set;}
        public required int Id {get;set;}
        public required string Version {get;set;}
        public required string Text {get;set;}
        public required List<MessageEntityBase> Entities {get;set;}
        public DocumentBase? Document {get;set;}
        public string? Url {get;set;}
        public DocumentBase? Sticker {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Document is not null ? 2 : 0) | (Url is not null ? 4 : 0) | (Sticker is not null ? 8 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Version.TlSerialize());
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(Entities.TlSerialize());
            if(Document is not null) bytes.AddRange(Document.TlSerialize());
            if(Url is not null) bytes.AddRange(Url.TlSerialize());
            if(Sticker is not null) bytes.AddRange(Sticker.TlSerialize());
            return bytes.ToArray();
        }

        public new static HelpAppUpdate TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var canNotSkipLocal = (flagsLocal & 1) is 0 ? default : true ;
            var idLocal =  des.As<int>().Read();
            var versionLocal =  des.As<string>().Read();
            var textLocal =  des.As<string>().Read();
            var entitiesLocal =  des.Read<MessageEntityBase>();
            var documentLocal = (flagsLocal & 2) is 0 ? default : DocumentBase.TlDeserialize(des) ;
            var urlLocal = (flagsLocal & 4) is 0 ? default : des.As<string>().Read() ;
            var stickerLocal = (flagsLocal & 8) is 0 ? default : DocumentBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            CanNotSkip = canNotSkipLocal,
            Id = idLocal,
            Version = versionLocal,
            Text = textLocal,
            Entities = entitiesLocal,
            Document = documentLocal,
            Url = urlLocal,
            Sticker = stickerLocal,
            };
        }
    }
    public class HelpNoAppUpdate : HelpAppUpdateBase, ITlSerializable, ITlDeserializable<HelpNoAppUpdate> {
        public static readonly byte[] Identifier = [54,101,90,196,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static HelpNoAppUpdate TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.HelpInviteTextNs {
    public class HelpInviteText : HelpInviteTextBase, ITlSerializable, ITlDeserializable<HelpInviteText> {
        public static readonly byte[] Identifier = [120,159,203,24,];
        public required string Message {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Message.TlSerialize());
            return bytes.ToArray();
        }

        public new static HelpInviteText TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var messageLocal =  des.As<string>().Read();
            return new() {
            Message = messageLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.EncryptedChatNs {
    public class EncryptedChatEmpty : EncryptedChatBase, ITlSerializable, ITlDeserializable<EncryptedChatEmpty> {
        public static readonly byte[] Identifier = [160,192,126,171,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            return bytes.ToArray();
        }

        public new static EncryptedChatEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<int>().Read();
            return new() {
            Id = idLocal,
            };
        }
    }
    public class EncryptedChatWaiting : EncryptedChatBase, ITlSerializable, ITlDeserializable<EncryptedChatWaiting> {
        public static readonly byte[] Identifier = [83,89,178,102,];
        public required long AccessHash {get;set;}
        public required int Date {get;set;}
        public required long AdminId {get;set;}
        public required long ParticipantId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(AdminId.TlSerialize());
            bytes.AddRange(ParticipantId.TlSerialize());
            return bytes.ToArray();
        }

        public new static EncryptedChatWaiting TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<int>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var dateLocal =  des.As<int>().Read();
            var adminIdLocal =  des.As<long>().Read();
            var participantIdLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            AccessHash = accessHashLocal,
            Date = dateLocal,
            AdminId = adminIdLocal,
            ParticipantId = participantIdLocal,
            };
        }
    }
    public class EncryptedChatRequested : EncryptedChatBase, ITlSerializable, ITlDeserializable<EncryptedChatRequested> {
        public static readonly byte[] Identifier = [76,217,241,72,];
        private int Flags;
        public int? FolderId {get;set;}
        public required long AccessHash {get;set;}
        public required int Date {get;set;}
        public required long AdminId {get;set;}
        public required long ParticipantId {get;set;}
        public required byte[] GA {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (FolderId is not null ? 1 : 0) ).TlSerialize());
            if(FolderId is not null) bytes.AddRange(FolderId.TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(AdminId.TlSerialize());
            bytes.AddRange(ParticipantId.TlSerialize());
            bytes.AddRange(GA.TlSerialize());
            return bytes.ToArray();
        }

        public new static EncryptedChatRequested TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var folderIdLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var idLocal =  des.As<int>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var dateLocal =  des.As<int>().Read();
            var adminIdLocal =  des.As<long>().Read();
            var participantIdLocal =  des.As<long>().Read();
            var gALocal =  des.As<byte[]>().Read();
            return new() {
            Flags = flagsLocal,
            FolderId = folderIdLocal,
            Id = idLocal,
            AccessHash = accessHashLocal,
            Date = dateLocal,
            AdminId = adminIdLocal,
            ParticipantId = participantIdLocal,
            GA = gALocal,
            };
        }
    }
    public class EncryptedChat : EncryptedChatBase, ITlSerializable, ITlDeserializable<EncryptedChat> {
        public static readonly byte[] Identifier = [199,212,240,97,];
        public required long AccessHash {get;set;}
        public required int Date {get;set;}
        public required long AdminId {get;set;}
        public required long ParticipantId {get;set;}
        public required byte[] GAOrB {get;set;}
        public required long KeyFingerprint {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(AdminId.TlSerialize());
            bytes.AddRange(ParticipantId.TlSerialize());
            bytes.AddRange(GAOrB.TlSerialize());
            bytes.AddRange(KeyFingerprint.TlSerialize());
            return bytes.ToArray();
        }

        public new static EncryptedChat TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<int>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var dateLocal =  des.As<int>().Read();
            var adminIdLocal =  des.As<long>().Read();
            var participantIdLocal =  des.As<long>().Read();
            var gAOrBLocal =  des.As<byte[]>().Read();
            var keyFingerprintLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            AccessHash = accessHashLocal,
            Date = dateLocal,
            AdminId = adminIdLocal,
            ParticipantId = participantIdLocal,
            GAOrB = gAOrBLocal,
            KeyFingerprint = keyFingerprintLocal,
            };
        }
    }
    public class EncryptedChatDiscarded : EncryptedChatBase, ITlSerializable, ITlDeserializable<EncryptedChatDiscarded> {
        public static readonly byte[] Identifier = [69,124,28,30,];
        private int Flags;
        public bool HistoryDeleted {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            return bytes.ToArray();
        }

        public new static EncryptedChatDiscarded TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var historyDeletedLocal = (flagsLocal & 1) is 0 ? default : true ;
            var idLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            HistoryDeleted = historyDeletedLocal,
            Id = idLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputEncryptedChatNs {
    public class InputEncryptedChat : InputEncryptedChatBase, ITlSerializable, ITlDeserializable<InputEncryptedChat> {
        public static readonly byte[] Identifier = [225,181,65,241,];
        public required int ChatId {get;set;}
        public required long AccessHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChatId.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputEncryptedChat TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var chatIdLocal =  des.As<int>().Read();
            var accessHashLocal =  des.As<long>().Read();
            return new() {
            ChatId = chatIdLocal,
            AccessHash = accessHashLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.EncryptedFileNs {
    public class EncryptedFileEmpty : EncryptedFileBase, ITlSerializable, ITlDeserializable<EncryptedFileEmpty> {
        public static readonly byte[] Identifier = [126,73,31,194,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static EncryptedFileEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class EncryptedFile : EncryptedFileBase, ITlSerializable, ITlDeserializable<EncryptedFile> {
        public static readonly byte[] Identifier = [216,140,0,168,];
        public required long Id {get;set;}
        public required long AccessHash {get;set;}
        public required long Size {get;set;}
        public required int DcId {get;set;}
        public required int KeyFingerprint {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(Size.TlSerialize());
            bytes.AddRange(DcId.TlSerialize());
            bytes.AddRange(KeyFingerprint.TlSerialize());
            return bytes.ToArray();
        }

        public new static EncryptedFile TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var sizeLocal =  des.As<long>().Read();
            var dcIdLocal =  des.As<int>().Read();
            var keyFingerprintLocal =  des.As<int>().Read();
            return new() {
            Id = idLocal,
            AccessHash = accessHashLocal,
            Size = sizeLocal,
            DcId = dcIdLocal,
            KeyFingerprint = keyFingerprintLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputEncryptedFileNs {
    public class InputEncryptedFileEmpty : InputEncryptedFileBase, ITlSerializable, ITlDeserializable<InputEncryptedFileEmpty> {
        public static readonly byte[] Identifier = [100,195,55,24,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputEncryptedFileEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputEncryptedFileUploaded : InputEncryptedFileBase, ITlSerializable, ITlDeserializable<InputEncryptedFileUploaded> {
        public static readonly byte[] Identifier = [6,3,189,100,];
        public required long Id {get;set;}
        public required int Parts {get;set;}
        public required string Md5Checksum {get;set;}
        public required int KeyFingerprint {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Parts.TlSerialize());
            bytes.AddRange(Md5Checksum.TlSerialize());
            bytes.AddRange(KeyFingerprint.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputEncryptedFileUploaded TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var partsLocal =  des.As<int>().Read();
            var md5ChecksumLocal =  des.As<string>().Read();
            var keyFingerprintLocal =  des.As<int>().Read();
            return new() {
            Id = idLocal,
            Parts = partsLocal,
            Md5Checksum = md5ChecksumLocal,
            KeyFingerprint = keyFingerprintLocal,
            };
        }
    }
    public class InputEncryptedFile : InputEncryptedFileBase, ITlSerializable, ITlDeserializable<InputEncryptedFile> {
        public static readonly byte[] Identifier = [229,181,23,90,];
        public required long Id {get;set;}
        public required long AccessHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputEncryptedFile TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            AccessHash = accessHashLocal,
            };
        }
    }
    public class InputEncryptedFileBigUploaded : InputEncryptedFileBase, ITlSerializable, ITlDeserializable<InputEncryptedFileBigUploaded> {
        public static readonly byte[] Identifier = [200,115,193,45,];
        public required long Id {get;set;}
        public required int Parts {get;set;}
        public required int KeyFingerprint {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Parts.TlSerialize());
            bytes.AddRange(KeyFingerprint.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputEncryptedFileBigUploaded TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var partsLocal =  des.As<int>().Read();
            var keyFingerprintLocal =  des.As<int>().Read();
            return new() {
            Id = idLocal,
            Parts = partsLocal,
            KeyFingerprint = keyFingerprintLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.EncryptedMessageNs {
    public class EncryptedMessage : EncryptedMessageBase, ITlSerializable, ITlDeserializable<EncryptedMessage> {
        public static readonly byte[] Identifier = [24,193,24,237,];
        public required EncryptedFileBase File {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(RandomId.TlSerialize());
            bytes.AddRange(ChatId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(Bytes.TlSerialize());
            bytes.AddRange(File.TlSerialize());
            return bytes.ToArray();
        }

        public new static EncryptedMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var randomIdLocal =  des.As<long>().Read();
            var chatIdLocal =  des.As<int>().Read();
            var dateLocal =  des.As<int>().Read();
            var bytesLocal =  des.As<byte[]>().Read();
            var fileLocal =  EncryptedFileBase.TlDeserialize(des);
            return new() {
            RandomId = randomIdLocal,
            ChatId = chatIdLocal,
            Date = dateLocal,
            Bytes = bytesLocal,
            File = fileLocal,
            };
        }
    }
    public class EncryptedMessageService : EncryptedMessageBase, ITlSerializable, ITlDeserializable<EncryptedMessageService> {
        public static readonly byte[] Identifier = [6,75,115,35,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(RandomId.TlSerialize());
            bytes.AddRange(ChatId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(Bytes.TlSerialize());
            return bytes.ToArray();
        }

        public new static EncryptedMessageService TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var randomIdLocal =  des.As<long>().Read();
            var chatIdLocal =  des.As<int>().Read();
            var dateLocal =  des.As<int>().Read();
            var bytesLocal =  des.As<byte[]>().Read();
            return new() {
            RandomId = randomIdLocal,
            ChatId = chatIdLocal,
            Date = dateLocal,
            Bytes = bytesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesDhConfigNs {
    public class MessagesDhConfigNotModified : MessagesDhConfigBase, ITlSerializable, ITlDeserializable<MessagesDhConfigNotModified> {
        public static readonly byte[] Identifier = [53,70,226,192,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Random.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesDhConfigNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var randomLocal =  des.As<byte[]>().Read();
            return new() {
            Random = randomLocal,
            };
        }
    }
    public class MessagesDhConfig : MessagesDhConfigBase, ITlSerializable, ITlDeserializable<MessagesDhConfig> {
        public static readonly byte[] Identifier = [221,30,34,44,];
        public required int G {get;set;}
        public required byte[] P {get;set;}
        public required int Version {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(G.TlSerialize());
            bytes.AddRange(P.TlSerialize());
            bytes.AddRange(Version.TlSerialize());
            bytes.AddRange(Random.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesDhConfig TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var gLocal =  des.As<int>().Read();
            var pLocal =  des.As<byte[]>().Read();
            var versionLocal =  des.As<int>().Read();
            var randomLocal =  des.As<byte[]>().Read();
            return new() {
            G = gLocal,
            P = pLocal,
            Version = versionLocal,
            Random = randomLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesSentEncryptedMessageNs {
    public class MessagesSentEncryptedMessage : MessagesSentEncryptedMessageBase, ITlSerializable, ITlDeserializable<MessagesSentEncryptedMessage> {
        public static readonly byte[] Identifier = [53,137,15,86,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Date.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesSentEncryptedMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var dateLocal =  des.As<int>().Read();
            return new() {
            Date = dateLocal,
            };
        }
    }
    public class MessagesSentEncryptedFile : MessagesSentEncryptedMessageBase, ITlSerializable, ITlDeserializable<MessagesSentEncryptedFile> {
        public static readonly byte[] Identifier = [50,255,147,148,];
        public required EncryptedFileBase File {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(File.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesSentEncryptedFile TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var dateLocal =  des.As<int>().Read();
            var fileLocal =  EncryptedFileBase.TlDeserialize(des);
            return new() {
            Date = dateLocal,
            File = fileLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputDocumentNs {
    public class InputDocumentEmpty : InputDocumentBase, ITlSerializable, ITlDeserializable<InputDocumentEmpty> {
        public static readonly byte[] Identifier = [174,234,240,114,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputDocumentEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputDocument : InputDocumentBase, ITlSerializable, ITlDeserializable<InputDocument> {
        public static readonly byte[] Identifier = [117,181,191,26,];
        public required long Id {get;set;}
        public required long AccessHash {get;set;}
        public required byte[] FileReference {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(FileReference.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputDocument TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var fileReferenceLocal =  des.As<byte[]>().Read();
            return new() {
            Id = idLocal,
            AccessHash = accessHashLocal,
            FileReference = fileReferenceLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.DocumentNs {
    public class DocumentEmpty : DocumentBase, ITlSerializable, ITlDeserializable<DocumentEmpty> {
        public static readonly byte[] Identifier = [113,200,248,54,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            return bytes.ToArray();
        }

        public new static DocumentEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            };
        }
    }
    public class Document : DocumentBase, ITlSerializable, ITlDeserializable<Document> {
        public static readonly byte[] Identifier = [216,196,212,143,];
        private int Flags;
        public required long AccessHash {get;set;}
        public required byte[] FileReference {get;set;}
        public required int Date {get;set;}
        public required string MimeType {get;set;}
        public required long Size {get;set;}
        public List<PhotoSizeBase>? Thumbs {get;set;}
        public List<VideoSizeBase>? VideoThumbs {get;set;}
        public required int DcId {get;set;}
        public required List<DocumentAttributeBase> Attributes {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Thumbs is not null ? 1 : 0) | (VideoThumbs is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(FileReference.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(MimeType.TlSerialize());
            bytes.AddRange(Size.TlSerialize());
            if(Thumbs is not null) bytes.AddRange(Thumbs.TlSerialize());
            if(VideoThumbs is not null) bytes.AddRange(VideoThumbs.TlSerialize());
            bytes.AddRange(DcId.TlSerialize());
            bytes.AddRange(Attributes.TlSerialize());
            return bytes.ToArray();
        }

        public new static Document TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var fileReferenceLocal =  des.As<byte[]>().Read();
            var dateLocal =  des.As<int>().Read();
            var mimeTypeLocal =  des.As<string>().Read();
            var sizeLocal =  des.As<long>().Read();
            var thumbsLocal = (flagsLocal & 1) is 0 ? default : des.Read<PhotoSizeBase>() ;
            var videoThumbsLocal = (flagsLocal & 2) is 0 ? default : des.Read<VideoSizeBase>() ;
            var dcIdLocal =  des.As<int>().Read();
            var attributesLocal =  des.Read<DocumentAttributeBase>();
            return new() {
            Flags = flagsLocal,
            Id = idLocal,
            AccessHash = accessHashLocal,
            FileReference = fileReferenceLocal,
            Date = dateLocal,
            MimeType = mimeTypeLocal,
            Size = sizeLocal,
            Thumbs = thumbsLocal,
            VideoThumbs = videoThumbsLocal,
            DcId = dcIdLocal,
            Attributes = attributesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.HelpSupportNs {
    public class HelpSupport : HelpSupportBase, ITlSerializable, ITlDeserializable<HelpSupport> {
        public static readonly byte[] Identifier = [246,181,198,23,];
        public required string PhoneNumber {get;set;}
        public required UserBase User {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PhoneNumber.TlSerialize());
            bytes.AddRange(User.TlSerialize());
            return bytes.ToArray();
        }

        public new static HelpSupport TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var phoneNumberLocal =  des.As<string>().Read();
            var userLocal =  UserBase.TlDeserialize(des);
            return new() {
            PhoneNumber = phoneNumberLocal,
            User = userLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.NotifyPeerNs {
    public class NotifyPeer : NotifyPeerBase, ITlSerializable, ITlDeserializable<NotifyPeer> {
        public static readonly byte[] Identifier = [216,11,212,159,];
        public required PeerBase Peer {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            return bytes.ToArray();
        }

        public new static NotifyPeer TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            return new() {
            Peer = peerLocal,
            };
        }
    }
    public class NotifyUsers : NotifyPeerBase, ITlSerializable, ITlDeserializable<NotifyUsers> {
        public static readonly byte[] Identifier = [76,59,200,180,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static NotifyUsers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class NotifyChats : NotifyPeerBase, ITlSerializable, ITlDeserializable<NotifyChats> {
        public static readonly byte[] Identifier = [195,206,7,192,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static NotifyChats TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class NotifyBroadcasts : NotifyPeerBase, ITlSerializable, ITlDeserializable<NotifyBroadcasts> {
        public static readonly byte[] Identifier = [239,232,18,214,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static NotifyBroadcasts TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class NotifyForumTopic : NotifyPeerBase, ITlSerializable, ITlDeserializable<NotifyForumTopic> {
        public static readonly byte[] Identifier = [8,99,110,34,];
        public required PeerBase Peer {get;set;}
        public required int TopMsgId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(TopMsgId.TlSerialize());
            return bytes.ToArray();
        }

        public new static NotifyForumTopic TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var topMsgIdLocal =  des.As<int>().Read();
            return new() {
            Peer = peerLocal,
            TopMsgId = topMsgIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.SendMessageActionNs {
    public class SendMessageTypingAction : SendMessageActionBase, ITlSerializable, ITlDeserializable<SendMessageTypingAction> {
        public static readonly byte[] Identifier = [78,116,191,22,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SendMessageTypingAction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SendMessageCancelAction : SendMessageActionBase, ITlSerializable, ITlDeserializable<SendMessageCancelAction> {
        public static readonly byte[] Identifier = [245,200,94,253,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SendMessageCancelAction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SendMessageRecordVideoAction : SendMessageActionBase, ITlSerializable, ITlDeserializable<SendMessageRecordVideoAction> {
        public static readonly byte[] Identifier = [111,214,135,161,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SendMessageRecordVideoAction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SendMessageUploadVideoAction : SendMessageActionBase, ITlSerializable, ITlDeserializable<SendMessageUploadVideoAction> {
        public static readonly byte[] Identifier = [236,58,118,233,];
        public required int Progress {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Progress.TlSerialize());
            return bytes.ToArray();
        }

        public new static SendMessageUploadVideoAction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var progressLocal =  des.As<int>().Read();
            return new() {
            Progress = progressLocal,
            };
        }
    }
    public class SendMessageRecordAudioAction : SendMessageActionBase, ITlSerializable, ITlDeserializable<SendMessageRecordAudioAction> {
        public static readonly byte[] Identifier = [247,115,47,213,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SendMessageRecordAudioAction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SendMessageUploadAudioAction : SendMessageActionBase, ITlSerializable, ITlDeserializable<SendMessageUploadAudioAction> {
        public static readonly byte[] Identifier = [171,215,81,243,];
        public required int Progress {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Progress.TlSerialize());
            return bytes.ToArray();
        }

        public new static SendMessageUploadAudioAction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var progressLocal =  des.As<int>().Read();
            return new() {
            Progress = progressLocal,
            };
        }
    }
    public class SendMessageUploadPhotoAction : SendMessageActionBase, ITlSerializable, ITlDeserializable<SendMessageUploadPhotoAction> {
        public static readonly byte[] Identifier = [38,74,211,209,];
        public required int Progress {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Progress.TlSerialize());
            return bytes.ToArray();
        }

        public new static SendMessageUploadPhotoAction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var progressLocal =  des.As<int>().Read();
            return new() {
            Progress = progressLocal,
            };
        }
    }
    public class SendMessageUploadDocumentAction : SendMessageActionBase, ITlSerializable, ITlDeserializable<SendMessageUploadDocumentAction> {
        public static readonly byte[] Identifier = [228,217,12,170,];
        public required int Progress {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Progress.TlSerialize());
            return bytes.ToArray();
        }

        public new static SendMessageUploadDocumentAction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var progressLocal =  des.As<int>().Read();
            return new() {
            Progress = progressLocal,
            };
        }
    }
    public class SendMessageGeoLocationAction : SendMessageActionBase, ITlSerializable, ITlDeserializable<SendMessageGeoLocationAction> {
        public static readonly byte[] Identifier = [161,139,111,23,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SendMessageGeoLocationAction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SendMessageChooseContactAction : SendMessageActionBase, ITlSerializable, ITlDeserializable<SendMessageChooseContactAction> {
        public static readonly byte[] Identifier = [111,188,140,98,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SendMessageChooseContactAction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SendMessageGamePlayAction : SendMessageActionBase, ITlSerializable, ITlDeserializable<SendMessageGamePlayAction> {
        public static readonly byte[] Identifier = [72,143,106,221,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SendMessageGamePlayAction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SendMessageRecordRoundAction : SendMessageActionBase, ITlSerializable, ITlDeserializable<SendMessageRecordRoundAction> {
        public static readonly byte[] Identifier = [188,127,242,136,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SendMessageRecordRoundAction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SendMessageUploadRoundAction : SendMessageActionBase, ITlSerializable, ITlDeserializable<SendMessageUploadRoundAction> {
        public static readonly byte[] Identifier = [102,28,62,36,];
        public required int Progress {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Progress.TlSerialize());
            return bytes.ToArray();
        }

        public new static SendMessageUploadRoundAction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var progressLocal =  des.As<int>().Read();
            return new() {
            Progress = progressLocal,
            };
        }
    }
    public class SpeakingInGroupCallAction : SendMessageActionBase, ITlSerializable, ITlDeserializable<SpeakingInGroupCallAction> {
        public static readonly byte[] Identifier = [133,34,44,217,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SpeakingInGroupCallAction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SendMessageHistoryImportAction : SendMessageActionBase, ITlSerializable, ITlDeserializable<SendMessageHistoryImportAction> {
        public static readonly byte[] Identifier = [70,146,218,219,];
        public required int Progress {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Progress.TlSerialize());
            return bytes.ToArray();
        }

        public new static SendMessageHistoryImportAction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var progressLocal =  des.As<int>().Read();
            return new() {
            Progress = progressLocal,
            };
        }
    }
    public class SendMessageChooseStickerAction : SendMessageActionBase, ITlSerializable, ITlDeserializable<SendMessageChooseStickerAction> {
        public static readonly byte[] Identifier = [177,198,90,176,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SendMessageChooseStickerAction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SendMessageEmojiInteraction : SendMessageActionBase, ITlSerializable, ITlDeserializable<SendMessageEmojiInteraction> {
        public static readonly byte[] Identifier = [203,43,151,37,];
        public required string Emoticon {get;set;}
        public required int MsgId {get;set;}
        public required DataJSONBase Interaction {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Emoticon.TlSerialize());
            bytes.AddRange(MsgId.TlSerialize());
            bytes.AddRange(Interaction.TlSerialize());
            return bytes.ToArray();
        }

        public new static SendMessageEmojiInteraction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var emoticonLocal =  des.As<string>().Read();
            var msgIdLocal =  des.As<int>().Read();
            var interactionLocal =  DataJSONBase.TlDeserialize(des);
            return new() {
            Emoticon = emoticonLocal,
            MsgId = msgIdLocal,
            Interaction = interactionLocal,
            };
        }
    }
    public class SendMessageEmojiInteractionSeen : SendMessageActionBase, ITlSerializable, ITlDeserializable<SendMessageEmojiInteractionSeen> {
        public static readonly byte[] Identifier = [46,144,101,182,];
        public required string Emoticon {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Emoticon.TlSerialize());
            return bytes.ToArray();
        }

        public new static SendMessageEmojiInteractionSeen TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var emoticonLocal =  des.As<string>().Read();
            return new() {
            Emoticon = emoticonLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ContactsFoundNs {
    public class ContactsFound : ContactsFoundBase, ITlSerializable, ITlDeserializable<ContactsFound> {
        public static readonly byte[] Identifier = [157,77,19,179,];
        public required List<PeerBase> MyResults {get;set;}
        public required List<PeerBase> Results {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(MyResults.TlSerialize());
            bytes.AddRange(Results.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static ContactsFound TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var myResultsLocal =  des.Read<PeerBase>();
            var resultsLocal =  des.Read<PeerBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            MyResults = myResultsLocal,
            Results = resultsLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputPrivacyKeyNs {
    public class InputPrivacyKeyStatusTimestamp : InputPrivacyKeyBase, ITlSerializable, ITlDeserializable<InputPrivacyKeyStatusTimestamp> {
        public static readonly byte[] Identifier = [24,203,150,79,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputPrivacyKeyStatusTimestamp TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputPrivacyKeyChatInvite : InputPrivacyKeyBase, ITlSerializable, ITlDeserializable<InputPrivacyKeyChatInvite> {
        public static readonly byte[] Identifier = [38,4,251,189,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputPrivacyKeyChatInvite TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputPrivacyKeyPhoneCall : InputPrivacyKeyBase, ITlSerializable, ITlDeserializable<InputPrivacyKeyPhoneCall> {
        public static readonly byte[] Identifier = [95,220,186,250,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputPrivacyKeyPhoneCall TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputPrivacyKeyPhoneP2P : InputPrivacyKeyBase, ITlSerializable, ITlDeserializable<InputPrivacyKeyPhoneP2P> {
        public static readonly byte[] Identifier = [210,112,158,219,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputPrivacyKeyPhoneP2P TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputPrivacyKeyForwards : InputPrivacyKeyBase, ITlSerializable, ITlDeserializable<InputPrivacyKeyForwards> {
        public static readonly byte[] Identifier = [8,76,221,164,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputPrivacyKeyForwards TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputPrivacyKeyProfilePhoto : InputPrivacyKeyBase, ITlSerializable, ITlDeserializable<InputPrivacyKeyProfilePhoto> {
        public static readonly byte[] Identifier = [204,186,25,87,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputPrivacyKeyProfilePhoto TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputPrivacyKeyPhoneNumber : InputPrivacyKeyBase, ITlSerializable, ITlDeserializable<InputPrivacyKeyPhoneNumber> {
        public static readonly byte[] Identifier = [250,218,82,3,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputPrivacyKeyPhoneNumber TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputPrivacyKeyAddedByPhone : InputPrivacyKeyBase, ITlSerializable, ITlDeserializable<InputPrivacyKeyAddedByPhone> {
        public static readonly byte[] Identifier = [221,155,33,209,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputPrivacyKeyAddedByPhone TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputPrivacyKeyVoiceMessages : InputPrivacyKeyBase, ITlSerializable, ITlDeserializable<InputPrivacyKeyVoiceMessages> {
        public static readonly byte[] Identifier = [104,157,230,174,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputPrivacyKeyVoiceMessages TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputPrivacyKeyAbout : InputPrivacyKeyBase, ITlSerializable, ITlDeserializable<InputPrivacyKeyAbout> {
        public static readonly byte[] Identifier = [64,204,35,56,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputPrivacyKeyAbout TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PrivacyKeyNs {
    public class PrivacyKeyStatusTimestamp : PrivacyKeyBase, ITlSerializable, ITlDeserializable<PrivacyKeyStatusTimestamp> {
        public static readonly byte[] Identifier = [48,171,46,188,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static PrivacyKeyStatusTimestamp TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class PrivacyKeyChatInvite : PrivacyKeyBase, ITlSerializable, ITlDeserializable<PrivacyKeyChatInvite> {
        public static readonly byte[] Identifier = [250,109,14,80,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static PrivacyKeyChatInvite TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class PrivacyKeyPhoneCall : PrivacyKeyBase, ITlSerializable, ITlDeserializable<PrivacyKeyPhoneCall> {
        public static readonly byte[] Identifier = [123,43,102,61,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static PrivacyKeyPhoneCall TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class PrivacyKeyPhoneP2P : PrivacyKeyBase, ITlSerializable, ITlDeserializable<PrivacyKeyPhoneP2P> {
        public static readonly byte[] Identifier = [200,28,73,57,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static PrivacyKeyPhoneP2P TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class PrivacyKeyForwards : PrivacyKeyBase, ITlSerializable, ITlDeserializable<PrivacyKeyForwards> {
        public static readonly byte[] Identifier = [163,86,236,105,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static PrivacyKeyForwards TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class PrivacyKeyProfilePhoto : PrivacyKeyBase, ITlSerializable, ITlDeserializable<PrivacyKeyProfilePhoto> {
        public static readonly byte[] Identifier = [237,31,21,150,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static PrivacyKeyProfilePhoto TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class PrivacyKeyPhoneNumber : PrivacyKeyBase, ITlSerializable, ITlDeserializable<PrivacyKeyPhoneNumber> {
        public static readonly byte[] Identifier = [109,228,154,209,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static PrivacyKeyPhoneNumber TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class PrivacyKeyAddedByPhone : PrivacyKeyBase, ITlSerializable, ITlDeserializable<PrivacyKeyAddedByPhone> {
        public static readonly byte[] Identifier = [43,212,255,66,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static PrivacyKeyAddedByPhone TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class PrivacyKeyVoiceMessages : PrivacyKeyBase, ITlSerializable, ITlDeserializable<PrivacyKeyVoiceMessages> {
        public static readonly byte[] Identifier = [20,244,151,6,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static PrivacyKeyVoiceMessages TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class PrivacyKeyAbout : PrivacyKeyBase, ITlSerializable, ITlDeserializable<PrivacyKeyAbout> {
        public static readonly byte[] Identifier = [97,183,134,164,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static PrivacyKeyAbout TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputPrivacyRuleNs {
    public class InputPrivacyValueAllowContacts : InputPrivacyRuleBase, ITlSerializable, ITlDeserializable<InputPrivacyValueAllowContacts> {
        public static readonly byte[] Identifier = [123,224,9,13,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputPrivacyValueAllowContacts TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputPrivacyValueAllowAll : InputPrivacyRuleBase, ITlSerializable, ITlDeserializable<InputPrivacyValueAllowAll> {
        public static readonly byte[] Identifier = [206,53,75,24,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputPrivacyValueAllowAll TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputPrivacyValueAllowUsers : InputPrivacyRuleBase, ITlSerializable, ITlDeserializable<InputPrivacyValueAllowUsers> {
        public static readonly byte[] Identifier = [127,198,28,19,];
        public required List<InputUserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputPrivacyValueAllowUsers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var usersLocal =  des.Read<InputUserBase>();
            return new() {
            Users = usersLocal,
            };
        }
    }
    public class InputPrivacyValueDisallowContacts : InputPrivacyRuleBase, ITlSerializable, ITlDeserializable<InputPrivacyValueDisallowContacts> {
        public static readonly byte[] Identifier = [7,32,165,11,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputPrivacyValueDisallowContacts TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputPrivacyValueDisallowAll : InputPrivacyRuleBase, ITlSerializable, ITlDeserializable<InputPrivacyValueDisallowAll> {
        public static readonly byte[] Identifier = [201,102,107,214,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputPrivacyValueDisallowAll TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputPrivacyValueDisallowUsers : InputPrivacyRuleBase, ITlSerializable, ITlDeserializable<InputPrivacyValueDisallowUsers> {
        public static readonly byte[] Identifier = [103,4,17,144,];
        public required List<InputUserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputPrivacyValueDisallowUsers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var usersLocal =  des.Read<InputUserBase>();
            return new() {
            Users = usersLocal,
            };
        }
    }
    public class InputPrivacyValueAllowChatParticipants : InputPrivacyRuleBase, ITlSerializable, ITlDeserializable<InputPrivacyValueAllowChatParticipants> {
        public static readonly byte[] Identifier = [207,73,6,132,];
        public required List<long> Chats {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Chats.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputPrivacyValueAllowChatParticipants TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var chatsLocal =  des.ReadNumbers<long>();
            return new() {
            Chats = chatsLocal,
            };
        }
    }
    public class InputPrivacyValueDisallowChatParticipants : InputPrivacyRuleBase, ITlSerializable, ITlDeserializable<InputPrivacyValueDisallowChatParticipants> {
        public static readonly byte[] Identifier = [134,15,79,233,];
        public required List<long> Chats {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Chats.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputPrivacyValueDisallowChatParticipants TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var chatsLocal =  des.ReadNumbers<long>();
            return new() {
            Chats = chatsLocal,
            };
        }
    }
    public class InputPrivacyValueAllowCloseFriends : InputPrivacyRuleBase, ITlSerializable, ITlDeserializable<InputPrivacyValueAllowCloseFriends> {
        public static readonly byte[] Identifier = [73,62,69,47,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputPrivacyValueAllowCloseFriends TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PrivacyRuleNs {
    public class PrivacyValueAllowContacts : PrivacyRuleBase, ITlSerializable, ITlDeserializable<PrivacyValueAllowContacts> {
        public static readonly byte[] Identifier = [172,27,254,255,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static PrivacyValueAllowContacts TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class PrivacyValueAllowAll : PrivacyRuleBase, ITlSerializable, ITlDeserializable<PrivacyValueAllowAll> {
        public static readonly byte[] Identifier = [130,123,66,101,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static PrivacyValueAllowAll TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class PrivacyValueAllowUsers : PrivacyRuleBase, ITlSerializable, ITlDeserializable<PrivacyValueAllowUsers> {
        public static readonly byte[] Identifier = [178,95,144,184,];
        public required List<long> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static PrivacyValueAllowUsers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var usersLocal =  des.ReadNumbers<long>();
            return new() {
            Users = usersLocal,
            };
        }
    }
    public class PrivacyValueDisallowContacts : PrivacyRuleBase, ITlSerializable, ITlDeserializable<PrivacyValueDisallowContacts> {
        public static readonly byte[] Identifier = [26,250,136,248,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static PrivacyValueDisallowContacts TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class PrivacyValueDisallowAll : PrivacyRuleBase, ITlSerializable, ITlDeserializable<PrivacyValueDisallowAll> {
        public static readonly byte[] Identifier = [99,231,115,139,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static PrivacyValueDisallowAll TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class PrivacyValueDisallowUsers : PrivacyRuleBase, ITlSerializable, ITlDeserializable<PrivacyValueDisallowUsers> {
        public static readonly byte[] Identifier = [65,17,98,228,];
        public required List<long> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static PrivacyValueDisallowUsers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var usersLocal =  des.ReadNumbers<long>();
            return new() {
            Users = usersLocal,
            };
        }
    }
    public class PrivacyValueAllowChatParticipants : PrivacyRuleBase, ITlSerializable, ITlDeserializable<PrivacyValueAllowChatParticipants> {
        public static readonly byte[] Identifier = [142,78,19,107,];
        public required List<long> Chats {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Chats.TlSerialize());
            return bytes.ToArray();
        }

        public new static PrivacyValueAllowChatParticipants TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var chatsLocal =  des.ReadNumbers<long>();
            return new() {
            Chats = chatsLocal,
            };
        }
    }
    public class PrivacyValueDisallowChatParticipants : PrivacyRuleBase, ITlSerializable, ITlDeserializable<PrivacyValueDisallowChatParticipants> {
        public static readonly byte[] Identifier = [101,117,200,65,];
        public required List<long> Chats {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Chats.TlSerialize());
            return bytes.ToArray();
        }

        public new static PrivacyValueDisallowChatParticipants TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var chatsLocal =  des.ReadNumbers<long>();
            return new() {
            Chats = chatsLocal,
            };
        }
    }
    public class PrivacyValueAllowCloseFriends : PrivacyRuleBase, ITlSerializable, ITlDeserializable<PrivacyValueAllowCloseFriends> {
        public static readonly byte[] Identifier = [155,216,232,247,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static PrivacyValueAllowCloseFriends TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AccountPrivacyRulesNs {
    public class AccountPrivacyRules : AccountPrivacyRulesBase, ITlSerializable, ITlDeserializable<AccountPrivacyRules> {
        public static readonly byte[] Identifier = [69,78,160,80,];
        public required List<PrivacyRuleBase> Rules {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Rules.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountPrivacyRules TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var rulesLocal =  des.Read<PrivacyRuleBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Rules = rulesLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AccountDaysTTLNs {
    public class AccountDaysTTL : AccountDaysTTLBase, ITlSerializable, ITlDeserializable<AccountDaysTTL> {
        public static readonly byte[] Identifier = [223,175,208,184,];
        public required int Days {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Days.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountDaysTTL TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var daysLocal =  des.As<int>().Read();
            return new() {
            Days = daysLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.DocumentAttributeNs {
    public class DocumentAttributeImageSize : DocumentAttributeBase, ITlSerializable, ITlDeserializable<DocumentAttributeImageSize> {
        public static readonly byte[] Identifier = [92,193,55,108,];
        public required int W {get;set;}
        public required int H {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(W.TlSerialize());
            bytes.AddRange(H.TlSerialize());
            return bytes.ToArray();
        }

        public new static DocumentAttributeImageSize TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var wLocal =  des.As<int>().Read();
            var hLocal =  des.As<int>().Read();
            return new() {
            W = wLocal,
            H = hLocal,
            };
        }
    }
    public class DocumentAttributeAnimated : DocumentAttributeBase, ITlSerializable, ITlDeserializable<DocumentAttributeAnimated> {
        public static readonly byte[] Identifier = [57,137,181,17,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static DocumentAttributeAnimated TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class DocumentAttributeSticker : DocumentAttributeBase, ITlSerializable, ITlDeserializable<DocumentAttributeSticker> {
        public static readonly byte[] Identifier = [18,214,25,99,];
        private int Flags;
        public bool Mask {get;set;}
        public required string Alt {get;set;}
        public required InputStickerSetBase Stickerset {get;set;}
        public MaskCoordsBase? MaskCoords {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (MaskCoords is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Alt.TlSerialize());
            bytes.AddRange(Stickerset.TlSerialize());
            if(MaskCoords is not null) bytes.AddRange(MaskCoords.TlSerialize());
            return bytes.ToArray();
        }

        public new static DocumentAttributeSticker TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var maskLocal = (flagsLocal & 2) is 0 ? default : true ;
            var altLocal =  des.As<string>().Read();
            var stickersetLocal =  InputStickerSetBase.TlDeserialize(des);
            var maskCoordsLocal = (flagsLocal & 1) is 0 ? default : MaskCoordsBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Mask = maskLocal,
            Alt = altLocal,
            Stickerset = stickersetLocal,
            MaskCoords = maskCoordsLocal,
            };
        }
    }
    public class DocumentAttributeVideo : DocumentAttributeBase, ITlSerializable, ITlDeserializable<DocumentAttributeVideo> {
        public static readonly byte[] Identifier = [194,241,143,211,];
        private int Flags;
        public bool RoundMessage {get;set;}
        public bool SupportsStreaming {get;set;}
        public bool Nosound {get;set;}
        public required double Duration {get;set;}
        public required int W {get;set;}
        public required int H {get;set;}
        public int? PreloadPrefixSize {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (PreloadPrefixSize is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(Duration.TlSerialize());
            bytes.AddRange(W.TlSerialize());
            bytes.AddRange(H.TlSerialize());
            if(PreloadPrefixSize is not null) bytes.AddRange(PreloadPrefixSize.TlSerialize());
            return bytes.ToArray();
        }

        public new static DocumentAttributeVideo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var roundMessageLocal = (flagsLocal & 1) is 0 ? default : true ;
            var supportsStreamingLocal = (flagsLocal & 2) is 0 ? default : true ;
            var nosoundLocal = (flagsLocal & 8) is 0 ? default : true ;
            var durationLocal =  des.As<double>().Read();
            var wLocal =  des.As<int>().Read();
            var hLocal =  des.As<int>().Read();
            var preloadPrefixSizeLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            RoundMessage = roundMessageLocal,
            SupportsStreaming = supportsStreamingLocal,
            Nosound = nosoundLocal,
            Duration = durationLocal,
            W = wLocal,
            H = hLocal,
            PreloadPrefixSize = preloadPrefixSizeLocal,
            };
        }
    }
    public class DocumentAttributeAudio : DocumentAttributeBase, ITlSerializable, ITlDeserializable<DocumentAttributeAudio> {
        public static readonly byte[] Identifier = [198,249,82,152,];
        private int Flags;
        public bool Voice {get;set;}
        public required int Duration {get;set;}
        public string? Title {get;set;}
        public string? Performer {get;set;}
        public byte[]? Waveform {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Title is not null ? 1 : 0) | (Performer is not null ? 2 : 0) | (Waveform is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(Duration.TlSerialize());
            if(Title is not null) bytes.AddRange(Title.TlSerialize());
            if(Performer is not null) bytes.AddRange(Performer.TlSerialize());
            if(Waveform is not null) bytes.AddRange(Waveform.TlSerialize());
            return bytes.ToArray();
        }

        public new static DocumentAttributeAudio TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var voiceLocal = (flagsLocal & 1024) is 0 ? default : true ;
            var durationLocal =  des.As<int>().Read();
            var titleLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var performerLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var waveformLocal = (flagsLocal & 4) is 0 ? default : des.As<byte[]>().Read() ;
            return new() {
            Flags = flagsLocal,
            Voice = voiceLocal,
            Duration = durationLocal,
            Title = titleLocal,
            Performer = performerLocal,
            Waveform = waveformLocal,
            };
        }
    }
    public class DocumentAttributeFilename : DocumentAttributeBase, ITlSerializable, ITlDeserializable<DocumentAttributeFilename> {
        public static readonly byte[] Identifier = [104,0,89,21,];
        public required string FileName {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(FileName.TlSerialize());
            return bytes.ToArray();
        }

        public new static DocumentAttributeFilename TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var fileNameLocal =  des.As<string>().Read();
            return new() {
            FileName = fileNameLocal,
            };
        }
    }
    public class DocumentAttributeHasStickers : DocumentAttributeBase, ITlSerializable, ITlDeserializable<DocumentAttributeHasStickers> {
        public static readonly byte[] Identifier = [247,210,1,152,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static DocumentAttributeHasStickers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class DocumentAttributeCustomEmoji : DocumentAttributeBase, ITlSerializable, ITlDeserializable<DocumentAttributeCustomEmoji> {
        public static readonly byte[] Identifier = [153,152,20,253,];
        private int Flags;
        public bool Free {get;set;}
        public bool TextColor {get;set;}
        public required string Alt {get;set;}
        public required InputStickerSetBase Stickerset {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Alt.TlSerialize());
            bytes.AddRange(Stickerset.TlSerialize());
            return bytes.ToArray();
        }

        public new static DocumentAttributeCustomEmoji TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var freeLocal = (flagsLocal & 1) is 0 ? default : true ;
            var textColorLocal = (flagsLocal & 2) is 0 ? default : true ;
            var altLocal =  des.As<string>().Read();
            var stickersetLocal =  InputStickerSetBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Free = freeLocal,
            TextColor = textColorLocal,
            Alt = altLocal,
            Stickerset = stickersetLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesStickersNs {
    public class MessagesStickersNotModified : MessagesStickersBase, ITlSerializable, ITlDeserializable<MessagesStickersNotModified> {
        public static readonly byte[] Identifier = [34,154,116,241,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static MessagesStickersNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class MessagesStickers : MessagesStickersBase, ITlSerializable, ITlDeserializable<MessagesStickers> {
        public static readonly byte[] Identifier = [126,236,166,48,];
        public required long Hash {get;set;}
        public required List<DocumentBase> Stickers {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(Stickers.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesStickers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var hashLocal =  des.As<long>().Read();
            var stickersLocal =  des.Read<DocumentBase>();
            return new() {
            Hash = hashLocal,
            Stickers = stickersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StickerPackNs {
    public class StickerPack : StickerPackBase, ITlSerializable, ITlDeserializable<StickerPack> {
        public static readonly byte[] Identifier = [212,153,178,18,];
        public required string Emoticon {get;set;}
        public required List<long> Documents {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Emoticon.TlSerialize());
            bytes.AddRange(Documents.TlSerialize());
            return bytes.ToArray();
        }

        public new static StickerPack TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var emoticonLocal =  des.As<string>().Read();
            var documentsLocal =  des.ReadNumbers<long>();
            return new() {
            Emoticon = emoticonLocal,
            Documents = documentsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesAllStickersNs {
    public class MessagesAllStickersNotModified : MessagesAllStickersBase, ITlSerializable, ITlDeserializable<MessagesAllStickersNotModified> {
        public static readonly byte[] Identifier = [195,2,102,232,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static MessagesAllStickersNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class MessagesAllStickers : MessagesAllStickersBase, ITlSerializable, ITlDeserializable<MessagesAllStickers> {
        public static readonly byte[] Identifier = [187,206,187,205,];
        public required long Hash {get;set;}
        public required List<StickerSetBase> Sets {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(Sets.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesAllStickers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var hashLocal =  des.As<long>().Read();
            var setsLocal =  des.Read<StickerSetBase>();
            return new() {
            Hash = hashLocal,
            Sets = setsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesAffectedMessagesNs {
    public class MessagesAffectedMessages : MessagesAffectedMessagesBase, ITlSerializable, ITlDeserializable<MessagesAffectedMessages> {
        public static readonly byte[] Identifier = [133,145,209,132,];
        public required int Pts {get;set;}
        public required int PtsCount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Pts.TlSerialize());
            bytes.AddRange(PtsCount.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesAffectedMessages TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var ptsLocal =  des.As<int>().Read();
            var ptsCountLocal =  des.As<int>().Read();
            return new() {
            Pts = ptsLocal,
            PtsCount = ptsCountLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.WebPageNs {
    public class WebPageEmpty : WebPageBase, ITlSerializable, ITlDeserializable<WebPageEmpty> {
        public static readonly byte[] Identifier = [136,23,26,33,];
        public required long Id {get;set;}
        public string? Url {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Url is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            if(Url is not null) bytes.AddRange(Url.TlSerialize());
            return bytes.ToArray();
        }

        public new static WebPageEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var idLocal =  des.As<long>().Read();
            var urlLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            Id = idLocal,
            Url = urlLocal,
            };
        }
    }
    public class WebPagePending : WebPageBase, ITlSerializable, ITlDeserializable<WebPagePending> {
        public static readonly byte[] Identifier = [71,62,209,176,];
        public required long Id {get;set;}
        public string? Url {get;set;}
        public required int Date {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Url is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            if(Url is not null) bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            return bytes.ToArray();
        }

        public new static WebPagePending TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var idLocal =  des.As<long>().Read();
            var urlLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var dateLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            Id = idLocal,
            Url = urlLocal,
            Date = dateLocal,
            };
        }
    }
    public class WebPage : WebPageBase, ITlSerializable, ITlDeserializable<WebPage> {
        public static readonly byte[] Identifier = [178,69,156,232,];
        public bool HasLargeMedia {get;set;}
        public required long Id {get;set;}
        public required string Url {get;set;}
        public required string DisplayUrl {get;set;}
        public required int Hash {get;set;}
        public string? Type {get;set;}
        public string? SiteName {get;set;}
        public string? Title {get;set;}
        public string? Description {get;set;}
        public PhotoBase? Photo {get;set;}
        public string? EmbedUrl {get;set;}
        public string? EmbedType {get;set;}
        public int? EmbedWidth {get;set;}
        public int? EmbedHeight {get;set;}
        public int? Duration {get;set;}
        public string? Author {get;set;}
        public DocumentBase? Document {get;set;}
        public PageBase? CachedPage {get;set;}
        public List<WebPageAttributeBase>? Attributes {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Type is not null ? 1 : 0) | (SiteName is not null ? 2 : 0) | (Title is not null ? 4 : 0) | (Description is not null ? 8 : 0) | (Photo is not null ? 16 : 0) | (EmbedUrl is not null ? 32 : 0) | (EmbedType is not null ? 32 : 0) | (EmbedWidth is not null ? 64 : 0) | (EmbedHeight is not null ? 64 : 0) | (Duration is not null ? 128 : 0) | (Author is not null ? 256 : 0) | (Document is not null ? 512 : 0) | (CachedPage is not null ? 1024 : 0) | (Attributes is not null ? 4096 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(DisplayUrl.TlSerialize());
            bytes.AddRange(Hash.TlSerialize());
            if(Type is not null) bytes.AddRange(Type.TlSerialize());
            if(SiteName is not null) bytes.AddRange(SiteName.TlSerialize());
            if(Title is not null) bytes.AddRange(Title.TlSerialize());
            if(Description is not null) bytes.AddRange(Description.TlSerialize());
            if(Photo is not null) bytes.AddRange(Photo.TlSerialize());
            if(EmbedUrl is not null) bytes.AddRange(EmbedUrl.TlSerialize());
            if(EmbedType is not null) bytes.AddRange(EmbedType.TlSerialize());
            if(EmbedWidth is not null) bytes.AddRange(EmbedWidth.TlSerialize());
            if(EmbedHeight is not null) bytes.AddRange(EmbedHeight.TlSerialize());
            if(Duration is not null) bytes.AddRange(Duration.TlSerialize());
            if(Author is not null) bytes.AddRange(Author.TlSerialize());
            if(Document is not null) bytes.AddRange(Document.TlSerialize());
            if(CachedPage is not null) bytes.AddRange(CachedPage.TlSerialize());
            if(Attributes is not null) bytes.AddRange(Attributes.TlSerialize());
            return bytes.ToArray();
        }

        public new static WebPage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var hasLargeMediaLocal = (flagsLocal & 8192) is 0 ? default : true ;
            var idLocal =  des.As<long>().Read();
            var urlLocal =  des.As<string>().Read();
            var displayUrlLocal =  des.As<string>().Read();
            var hashLocal =  des.As<int>().Read();
            var typeLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var siteNameLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var titleLocal = (flagsLocal & 4) is 0 ? default : des.As<string>().Read() ;
            var descriptionLocal = (flagsLocal & 8) is 0 ? default : des.As<string>().Read() ;
            var photoLocal = (flagsLocal & 16) is 0 ? default : PhotoBase.TlDeserialize(des) ;
            var embedUrlLocal = (flagsLocal & 32) is 0 ? default : des.As<string>().Read() ;
            var embedTypeLocal = (flagsLocal & 32) is 0 ? default : des.As<string>().Read() ;
            var embedWidthLocal = (flagsLocal & 64) is 0 ? default : des.As<int>().Read() ;
            var embedHeightLocal = (flagsLocal & 64) is 0 ? default : des.As<int>().Read() ;
            var durationLocal = (flagsLocal & 128) is 0 ? default : des.As<int>().Read() ;
            var authorLocal = (flagsLocal & 256) is 0 ? default : des.As<string>().Read() ;
            var documentLocal = (flagsLocal & 512) is 0 ? default : DocumentBase.TlDeserialize(des) ;
            var cachedPageLocal = (flagsLocal & 1024) is 0 ? default : PageBase.TlDeserialize(des) ;
            var attributesLocal = (flagsLocal & 4096) is 0 ? default : des.Read<WebPageAttributeBase>() ;
            return new() {
            Flags = flagsLocal,
            HasLargeMedia = hasLargeMediaLocal,
            Id = idLocal,
            Url = urlLocal,
            DisplayUrl = displayUrlLocal,
            Hash = hashLocal,
            Type = typeLocal,
            SiteName = siteNameLocal,
            Title = titleLocal,
            Description = descriptionLocal,
            Photo = photoLocal,
            EmbedUrl = embedUrlLocal,
            EmbedType = embedTypeLocal,
            EmbedWidth = embedWidthLocal,
            EmbedHeight = embedHeightLocal,
            Duration = durationLocal,
            Author = authorLocal,
            Document = documentLocal,
            CachedPage = cachedPageLocal,
            Attributes = attributesLocal,
            };
        }
    }
    public class WebPageNotModified : WebPageBase, ITlSerializable, ITlDeserializable<WebPageNotModified> {
        public static readonly byte[] Identifier = [17,202,17,115,];
        public int? CachedPageViews {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (CachedPageViews is not null ? 1 : 0) ).TlSerialize());
            if(CachedPageViews is not null) bytes.AddRange(CachedPageViews.TlSerialize());
            return bytes.ToArray();
        }

        public new static WebPageNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var cachedPageViewsLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            CachedPageViews = cachedPageViewsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AuthorizationNs {
    public class Authorization : AuthorizationBase, ITlSerializable, ITlDeserializable<Authorization> {
        public static readonly byte[] Identifier = [29,214,1,173,];
        private int Flags;
        public bool Current {get;set;}
        public bool OfficialApp {get;set;}
        public bool PasswordPending {get;set;}
        public bool EncryptedRequestsDisabled {get;set;}
        public bool CallRequestsDisabled {get;set;}
        public bool Unconfirmed {get;set;}
        public required long Hash {get;set;}
        public required string DeviceModel {get;set;}
        public required string Platform {get;set;}
        public required string SystemVersion {get;set;}
        public required int ApiId {get;set;}
        public required string AppName {get;set;}
        public required string AppVersion {get;set;}
        public required int DateCreated {get;set;}
        public required int DateActive {get;set;}
        public required string Ip {get;set;}
        public required string Country {get;set;}
        public required string Region {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(DeviceModel.TlSerialize());
            bytes.AddRange(Platform.TlSerialize());
            bytes.AddRange(SystemVersion.TlSerialize());
            bytes.AddRange(ApiId.TlSerialize());
            bytes.AddRange(AppName.TlSerialize());
            bytes.AddRange(AppVersion.TlSerialize());
            bytes.AddRange(DateCreated.TlSerialize());
            bytes.AddRange(DateActive.TlSerialize());
            bytes.AddRange(Ip.TlSerialize());
            bytes.AddRange(Country.TlSerialize());
            bytes.AddRange(Region.TlSerialize());
            return bytes.ToArray();
        }

        public new static Authorization TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var currentLocal = (flagsLocal & 1) is 0 ? default : true ;
            var officialAppLocal = (flagsLocal & 2) is 0 ? default : true ;
            var passwordPendingLocal = (flagsLocal & 4) is 0 ? default : true ;
            var encryptedRequestsDisabledLocal = (flagsLocal & 8) is 0 ? default : true ;
            var callRequestsDisabledLocal = (flagsLocal & 16) is 0 ? default : true ;
            var unconfirmedLocal = (flagsLocal & 32) is 0 ? default : true ;
            var hashLocal =  des.As<long>().Read();
            var deviceModelLocal =  des.As<string>().Read();
            var platformLocal =  des.As<string>().Read();
            var systemVersionLocal =  des.As<string>().Read();
            var apiIdLocal =  des.As<int>().Read();
            var appNameLocal =  des.As<string>().Read();
            var appVersionLocal =  des.As<string>().Read();
            var dateCreatedLocal =  des.As<int>().Read();
            var dateActiveLocal =  des.As<int>().Read();
            var ipLocal =  des.As<string>().Read();
            var countryLocal =  des.As<string>().Read();
            var regionLocal =  des.As<string>().Read();
            return new() {
            Flags = flagsLocal,
            Current = currentLocal,
            OfficialApp = officialAppLocal,
            PasswordPending = passwordPendingLocal,
            EncryptedRequestsDisabled = encryptedRequestsDisabledLocal,
            CallRequestsDisabled = callRequestsDisabledLocal,
            Unconfirmed = unconfirmedLocal,
            Hash = hashLocal,
            DeviceModel = deviceModelLocal,
            Platform = platformLocal,
            SystemVersion = systemVersionLocal,
            ApiId = apiIdLocal,
            AppName = appNameLocal,
            AppVersion = appVersionLocal,
            DateCreated = dateCreatedLocal,
            DateActive = dateActiveLocal,
            Ip = ipLocal,
            Country = countryLocal,
            Region = regionLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AccountAuthorizationsNs {
    public class AccountAuthorizations : AccountAuthorizationsBase, ITlSerializable, ITlDeserializable<AccountAuthorizations> {
        public static readonly byte[] Identifier = [160,142,255,75,];
        public required int AuthorizationTtlDays {get;set;}
        public required List<AuthorizationBase> Authorizations {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(AuthorizationTtlDays.TlSerialize());
            bytes.AddRange(Authorizations.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountAuthorizations TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var authorizationTtlDaysLocal =  des.As<int>().Read();
            var authorizationsLocal =  des.Read<AuthorizationBase>();
            return new() {
            AuthorizationTtlDays = authorizationTtlDaysLocal,
            Authorizations = authorizationsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AccountPasswordNs {
    public class AccountPassword : AccountPasswordBase, ITlSerializable, ITlDeserializable<AccountPassword> {
        public static readonly byte[] Identifier = [251,80,123,149,];
        private int Flags;
        public bool HasRecovery {get;set;}
        public bool HasSecureValues {get;set;}
        public bool HasPassword {get;set;}
        public PasswordKdfAlgoBase? CurrentAlgo {get;set;}
        public byte[]? SrpB {get;set;}
        public long? SrpId {get;set;}
        public string? Hint {get;set;}
        public string? EmailUnconfirmedPattern {get;set;}
        public required PasswordKdfAlgoBase NewAlgo {get;set;}
        public required SecurePasswordKdfAlgoBase NewSecureAlgo {get;set;}
        public required byte[] SecureRandom {get;set;}
        public int? PendingResetDate {get;set;}
        public string? LoginEmailPattern {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (CurrentAlgo is not null ? 4 : 0) | (SrpB is not null ? 4 : 0) | (SrpId is not null ? 4 : 0) | (Hint is not null ? 8 : 0) | (EmailUnconfirmedPattern is not null ? 16 : 0) | (PendingResetDate is not null ? 32 : 0) | (LoginEmailPattern is not null ? 64 : 0) ).TlSerialize());
            if(CurrentAlgo is not null) bytes.AddRange(CurrentAlgo.TlSerialize());
            if(SrpB is not null) bytes.AddRange(SrpB.TlSerialize());
            if(SrpId is not null) bytes.AddRange(SrpId.TlSerialize());
            if(Hint is not null) bytes.AddRange(Hint.TlSerialize());
            if(EmailUnconfirmedPattern is not null) bytes.AddRange(EmailUnconfirmedPattern.TlSerialize());
            bytes.AddRange(NewAlgo.TlSerialize());
            bytes.AddRange(NewSecureAlgo.TlSerialize());
            bytes.AddRange(SecureRandom.TlSerialize());
            if(PendingResetDate is not null) bytes.AddRange(PendingResetDate.TlSerialize());
            if(LoginEmailPattern is not null) bytes.AddRange(LoginEmailPattern.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountPassword TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var hasRecoveryLocal = (flagsLocal & 1) is 0 ? default : true ;
            var hasSecureValuesLocal = (flagsLocal & 2) is 0 ? default : true ;
            var hasPasswordLocal = (flagsLocal & 4) is 0 ? default : true ;
            var currentAlgoLocal = (flagsLocal & 4) is 0 ? default : PasswordKdfAlgoBase.TlDeserialize(des) ;
            var srpBLocal = (flagsLocal & 4) is 0 ? default : des.As<byte[]>().Read() ;
            var srpIdLocal = (flagsLocal & 4) is 0 ? default : des.As<long>().Read() ;
            var hintLocal = (flagsLocal & 8) is 0 ? default : des.As<string>().Read() ;
            var emailUnconfirmedPatternLocal = (flagsLocal & 16) is 0 ? default : des.As<string>().Read() ;
            var newAlgoLocal =  PasswordKdfAlgoBase.TlDeserialize(des);
            var newSecureAlgoLocal =  SecurePasswordKdfAlgoBase.TlDeserialize(des);
            var secureRandomLocal =  des.As<byte[]>().Read();
            var pendingResetDateLocal = (flagsLocal & 32) is 0 ? default : des.As<int>().Read() ;
            var loginEmailPatternLocal = (flagsLocal & 64) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            HasRecovery = hasRecoveryLocal,
            HasSecureValues = hasSecureValuesLocal,
            HasPassword = hasPasswordLocal,
            CurrentAlgo = currentAlgoLocal,
            SrpB = srpBLocal,
            SrpId = srpIdLocal,
            Hint = hintLocal,
            EmailUnconfirmedPattern = emailUnconfirmedPatternLocal,
            NewAlgo = newAlgoLocal,
            NewSecureAlgo = newSecureAlgoLocal,
            SecureRandom = secureRandomLocal,
            PendingResetDate = pendingResetDateLocal,
            LoginEmailPattern = loginEmailPatternLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AccountPasswordSettingsNs {
    public class AccountPasswordSettings : AccountPasswordSettingsBase, ITlSerializable, ITlDeserializable<AccountPasswordSettings> {
        public static readonly byte[] Identifier = [229,51,92,154,];
        private int Flags;
        public string? Email {get;set;}
        public SecureSecretSettingsBase? SecureSettings {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Email is not null ? 1 : 0) | (SecureSettings is not null ? 2 : 0) ).TlSerialize());
            if(Email is not null) bytes.AddRange(Email.TlSerialize());
            if(SecureSettings is not null) bytes.AddRange(SecureSettings.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountPasswordSettings TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var emailLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var secureSettingsLocal = (flagsLocal & 2) is 0 ? default : SecureSecretSettingsBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Email = emailLocal,
            SecureSettings = secureSettingsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AccountPasswordInputSettingsNs {
    public class AccountPasswordInputSettings : AccountPasswordInputSettingsBase, ITlSerializable, ITlDeserializable<AccountPasswordInputSettings> {
        public static readonly byte[] Identifier = [201,39,55,194,];
        private int Flags;
        public PasswordKdfAlgoBase? NewAlgo {get;set;}
        public byte[]? NewPasswordHash {get;set;}
        public string? Hint {get;set;}
        public string? Email {get;set;}
        public SecureSecretSettingsBase? NewSecureSettings {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (NewAlgo is not null ? 1 : 0) | (NewPasswordHash is not null ? 1 : 0) | (Hint is not null ? 1 : 0) | (Email is not null ? 2 : 0) | (NewSecureSettings is not null ? 4 : 0) ).TlSerialize());
            if(NewAlgo is not null) bytes.AddRange(NewAlgo.TlSerialize());
            if(NewPasswordHash is not null) bytes.AddRange(NewPasswordHash.TlSerialize());
            if(Hint is not null) bytes.AddRange(Hint.TlSerialize());
            if(Email is not null) bytes.AddRange(Email.TlSerialize());
            if(NewSecureSettings is not null) bytes.AddRange(NewSecureSettings.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountPasswordInputSettings TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var newAlgoLocal = (flagsLocal & 1) is 0 ? default : PasswordKdfAlgoBase.TlDeserialize(des) ;
            var newPasswordHashLocal = (flagsLocal & 1) is 0 ? default : des.As<byte[]>().Read() ;
            var hintLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var emailLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var newSecureSettingsLocal = (flagsLocal & 4) is 0 ? default : SecureSecretSettingsBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            NewAlgo = newAlgoLocal,
            NewPasswordHash = newPasswordHashLocal,
            Hint = hintLocal,
            Email = emailLocal,
            NewSecureSettings = newSecureSettingsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AuthPasswordRecoveryNs {
    public class AuthPasswordRecovery : AuthPasswordRecoveryBase, ITlSerializable, ITlDeserializable<AuthPasswordRecovery> {
        public static readonly byte[] Identifier = [165,72,121,19,];
        public required string EmailPattern {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(EmailPattern.TlSerialize());
            return bytes.ToArray();
        }

        public new static AuthPasswordRecovery TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var emailPatternLocal =  des.As<string>().Read();
            return new() {
            EmailPattern = emailPatternLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ReceivedNotifyMessageNs {
    public class ReceivedNotifyMessage : ReceivedNotifyMessageBase, ITlSerializable, ITlDeserializable<ReceivedNotifyMessage> {
        public static readonly byte[] Identifier = [121,183,132,163,];
        public required int Id {get;set;}
        public required int Flags {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Flags.TlSerialize());
            return bytes.ToArray();
        }

        public new static ReceivedNotifyMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<int>().Read();
            var flagsLocal =  des.As<int>().Read();
            return new() {
            Id = idLocal,
            Flags = flagsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ExportedChatInviteNs {
    public class ChatInviteExported : ExportedChatInviteBase, ITlSerializable, ITlDeserializable<ChatInviteExported> {
        public static readonly byte[] Identifier = [25,168,180,10,];
        private int Flags;
        public bool Revoked {get;set;}
        public bool Permanent {get;set;}
        public bool RequestNeeded {get;set;}
        public required string Link {get;set;}
        public required long AdminId {get;set;}
        public required int Date {get;set;}
        public int? StartDate {get;set;}
        public int? ExpireDate {get;set;}
        public int? UsageLimit {get;set;}
        public int? Usage {get;set;}
        public int? Requested {get;set;}
        public string? Title {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (StartDate is not null ? 16 : 0) | (ExpireDate is not null ? 2 : 0) | (UsageLimit is not null ? 4 : 0) | (Usage is not null ? 8 : 0) | (Requested is not null ? 128 : 0) | (Title is not null ? 256 : 0) ).TlSerialize());
            bytes.AddRange(Link.TlSerialize());
            bytes.AddRange(AdminId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            if(StartDate is not null) bytes.AddRange(StartDate.TlSerialize());
            if(ExpireDate is not null) bytes.AddRange(ExpireDate.TlSerialize());
            if(UsageLimit is not null) bytes.AddRange(UsageLimit.TlSerialize());
            if(Usage is not null) bytes.AddRange(Usage.TlSerialize());
            if(Requested is not null) bytes.AddRange(Requested.TlSerialize());
            if(Title is not null) bytes.AddRange(Title.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatInviteExported TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var revokedLocal = (flagsLocal & 1) is 0 ? default : true ;
            var permanentLocal = (flagsLocal & 32) is 0 ? default : true ;
            var requestNeededLocal = (flagsLocal & 64) is 0 ? default : true ;
            var linkLocal =  des.As<string>().Read();
            var adminIdLocal =  des.As<long>().Read();
            var dateLocal =  des.As<int>().Read();
            var startDateLocal = (flagsLocal & 16) is 0 ? default : des.As<int>().Read() ;
            var expireDateLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            var usageLimitLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            var usageLocal = (flagsLocal & 8) is 0 ? default : des.As<int>().Read() ;
            var requestedLocal = (flagsLocal & 128) is 0 ? default : des.As<int>().Read() ;
            var titleLocal = (flagsLocal & 256) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            Revoked = revokedLocal,
            Permanent = permanentLocal,
            RequestNeeded = requestNeededLocal,
            Link = linkLocal,
            AdminId = adminIdLocal,
            Date = dateLocal,
            StartDate = startDateLocal,
            ExpireDate = expireDateLocal,
            UsageLimit = usageLimitLocal,
            Usage = usageLocal,
            Requested = requestedLocal,
            Title = titleLocal,
            };
        }
    }
    public class ChatInvitePublicJoinRequests : ExportedChatInviteBase, ITlSerializable, ITlDeserializable<ChatInvitePublicJoinRequests> {
        public static readonly byte[] Identifier = [183,122,16,237,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static ChatInvitePublicJoinRequests TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChatInviteNs {
    public class ChatInviteAlready : ChatInviteBase, ITlSerializable, ITlDeserializable<ChatInviteAlready> {
        public static readonly byte[] Identifier = [124,109,104,90,];
        public required ChatBase Chat {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Chat.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatInviteAlready TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var chatLocal =  ChatBase.TlDeserialize(des);
            return new() {
            Chat = chatLocal,
            };
        }
    }
    public class ChatInvite : ChatInviteBase, ITlSerializable, ITlDeserializable<ChatInvite> {
        public static readonly byte[] Identifier = [64,236,224,205,];
        private int Flags;
        public bool Channel {get;set;}
        public bool Broadcast {get;set;}
        public bool Public {get;set;}
        public bool Megagroup {get;set;}
        public bool RequestNeeded {get;set;}
        public bool Verified {get;set;}
        public bool Scam {get;set;}
        public bool Fake {get;set;}
        public required string Title {get;set;}
        public string? About {get;set;}
        public required PhotoBase Photo {get;set;}
        public required int ParticipantsCount {get;set;}
        public List<UserBase>? Participants {get;set;}
        public required int Color {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (About is not null ? 32 : 0) | (Participants is not null ? 16 : 0) ).TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            if(About is not null) bytes.AddRange(About.TlSerialize());
            bytes.AddRange(Photo.TlSerialize());
            bytes.AddRange(ParticipantsCount.TlSerialize());
            if(Participants is not null) bytes.AddRange(Participants.TlSerialize());
            bytes.AddRange(Color.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatInvite TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var channelLocal = (flagsLocal & 1) is 0 ? default : true ;
            var broadcastLocal = (flagsLocal & 2) is 0 ? default : true ;
            var publicLocal = (flagsLocal & 4) is 0 ? default : true ;
            var megagroupLocal = (flagsLocal & 8) is 0 ? default : true ;
            var requestNeededLocal = (flagsLocal & 64) is 0 ? default : true ;
            var verifiedLocal = (flagsLocal & 128) is 0 ? default : true ;
            var scamLocal = (flagsLocal & 256) is 0 ? default : true ;
            var fakeLocal = (flagsLocal & 512) is 0 ? default : true ;
            var titleLocal =  des.As<string>().Read();
            var aboutLocal = (flagsLocal & 32) is 0 ? default : des.As<string>().Read() ;
            var photoLocal =  PhotoBase.TlDeserialize(des);
            var participantsCountLocal =  des.As<int>().Read();
            var participantsLocal = (flagsLocal & 16) is 0 ? default : des.Read<UserBase>() ;
            var colorLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            Channel = channelLocal,
            Broadcast = broadcastLocal,
            Public = publicLocal,
            Megagroup = megagroupLocal,
            RequestNeeded = requestNeededLocal,
            Verified = verifiedLocal,
            Scam = scamLocal,
            Fake = fakeLocal,
            Title = titleLocal,
            About = aboutLocal,
            Photo = photoLocal,
            ParticipantsCount = participantsCountLocal,
            Participants = participantsLocal,
            Color = colorLocal,
            };
        }
    }
    public class ChatInvitePeek : ChatInviteBase, ITlSerializable, ITlDeserializable<ChatInvitePeek> {
        public static readonly byte[] Identifier = [176,92,105,97,];
        public required ChatBase Chat {get;set;}
        public required int Expires {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Chat.TlSerialize());
            bytes.AddRange(Expires.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatInvitePeek TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var chatLocal =  ChatBase.TlDeserialize(des);
            var expiresLocal =  des.As<int>().Read();
            return new() {
            Chat = chatLocal,
            Expires = expiresLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputStickerSetNs {
    public class InputStickerSetEmpty : InputStickerSetBase, ITlSerializable, ITlDeserializable<InputStickerSetEmpty> {
        public static readonly byte[] Identifier = [149,43,182,255,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputStickerSetEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputStickerSetID : InputStickerSetBase, ITlSerializable, ITlDeserializable<InputStickerSetID> {
        public static readonly byte[] Identifier = [105,162,231,157,];
        public required long Id {get;set;}
        public required long AccessHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputStickerSetID TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            AccessHash = accessHashLocal,
            };
        }
    }
    public class InputStickerSetShortName : InputStickerSetBase, ITlSerializable, ITlDeserializable<InputStickerSetShortName> {
        public static readonly byte[] Identifier = [160,200,28,134,];
        public required string ShortName {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ShortName.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputStickerSetShortName TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var shortNameLocal =  des.As<string>().Read();
            return new() {
            ShortName = shortNameLocal,
            };
        }
    }
    public class InputStickerSetAnimatedEmoji : InputStickerSetBase, ITlSerializable, ITlDeserializable<InputStickerSetAnimatedEmoji> {
        public static readonly byte[] Identifier = [200,3,135,2,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputStickerSetAnimatedEmoji TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputStickerSetDice : InputStickerSetBase, ITlSerializable, ITlDeserializable<InputStickerSetDice> {
        public static readonly byte[] Identifier = [14,82,127,230,];
        public required string Emoticon {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Emoticon.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputStickerSetDice TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var emoticonLocal =  des.As<string>().Read();
            return new() {
            Emoticon = emoticonLocal,
            };
        }
    }
    public class InputStickerSetAnimatedEmojiAnimations : InputStickerSetBase, ITlSerializable, ITlDeserializable<InputStickerSetAnimatedEmojiAnimations> {
        public static readonly byte[] Identifier = [57,55,222,12,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputStickerSetAnimatedEmojiAnimations TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputStickerSetPremiumGifts : InputStickerSetBase, ITlSerializable, ITlDeserializable<InputStickerSetPremiumGifts> {
        public static readonly byte[] Identifier = [2,59,139,200,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputStickerSetPremiumGifts TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputStickerSetEmojiGenericAnimations : InputStickerSetBase, ITlSerializable, ITlDeserializable<InputStickerSetEmojiGenericAnimations> {
        public static readonly byte[] Identifier = [206,212,196,4,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputStickerSetEmojiGenericAnimations TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputStickerSetEmojiDefaultStatuses : InputStickerSetBase, ITlSerializable, ITlDeserializable<InputStickerSetEmojiDefaultStatuses> {
        public static readonly byte[] Identifier = [238,245,208,41,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputStickerSetEmojiDefaultStatuses TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputStickerSetEmojiDefaultTopicIcons : InputStickerSetBase, ITlSerializable, ITlDeserializable<InputStickerSetEmojiDefaultTopicIcons> {
        public static readonly byte[] Identifier = [233,248,193,68,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputStickerSetEmojiDefaultTopicIcons TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputStickerSetEmojiChannelDefaultStatuses : InputStickerSetBase, ITlSerializable, ITlDeserializable<InputStickerSetEmojiChannelDefaultStatuses> {
        public static readonly byte[] Identifier = [83,133,116,73,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputStickerSetEmojiChannelDefaultStatuses TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StickerSetNs {
    public class StickerSet : StickerSetBase, ITlSerializable, ITlDeserializable<StickerSet> {
        public static readonly byte[] Identifier = [220,78,209,45,];
        private int Flags;
        public bool Archived {get;set;}
        public bool Official {get;set;}
        public bool Masks {get;set;}
        public bool Animated {get;set;}
        public bool Videos {get;set;}
        public bool Emojis {get;set;}
        public bool TextColor {get;set;}
        public bool ChannelEmojiStatus {get;set;}
        public int? InstalledDate {get;set;}
        public required long Id {get;set;}
        public required long AccessHash {get;set;}
        public required string Title {get;set;}
        public required string ShortName {get;set;}
        public List<PhotoSizeBase>? Thumbs {get;set;}
        public int? ThumbDcId {get;set;}
        public int? ThumbVersion {get;set;}
        public long? ThumbDocumentId {get;set;}
        public required int Count {get;set;}
        public required int Hash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (InstalledDate is not null ? 1 : 0) | (Thumbs is not null ? 16 : 0) | (ThumbDcId is not null ? 16 : 0) | (ThumbVersion is not null ? 16 : 0) | (ThumbDocumentId is not null ? 256 : 0) ).TlSerialize());
            if(InstalledDate is not null) bytes.AddRange(InstalledDate.TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(ShortName.TlSerialize());
            if(Thumbs is not null) bytes.AddRange(Thumbs.TlSerialize());
            if(ThumbDcId is not null) bytes.AddRange(ThumbDcId.TlSerialize());
            if(ThumbVersion is not null) bytes.AddRange(ThumbVersion.TlSerialize());
            if(ThumbDocumentId is not null) bytes.AddRange(ThumbDocumentId.TlSerialize());
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(Hash.TlSerialize());
            return bytes.ToArray();
        }

        public new static StickerSet TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var archivedLocal = (flagsLocal & 2) is 0 ? default : true ;
            var officialLocal = (flagsLocal & 4) is 0 ? default : true ;
            var masksLocal = (flagsLocal & 8) is 0 ? default : true ;
            var animatedLocal = (flagsLocal & 32) is 0 ? default : true ;
            var videosLocal = (flagsLocal & 64) is 0 ? default : true ;
            var emojisLocal = (flagsLocal & 128) is 0 ? default : true ;
            var textColorLocal = (flagsLocal & 512) is 0 ? default : true ;
            var channelEmojiStatusLocal = (flagsLocal & 1024) is 0 ? default : true ;
            var installedDateLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var titleLocal =  des.As<string>().Read();
            var shortNameLocal =  des.As<string>().Read();
            var thumbsLocal = (flagsLocal & 16) is 0 ? default : des.Read<PhotoSizeBase>() ;
            var thumbDcIdLocal = (flagsLocal & 16) is 0 ? default : des.As<int>().Read() ;
            var thumbVersionLocal = (flagsLocal & 16) is 0 ? default : des.As<int>().Read() ;
            var thumbDocumentIdLocal = (flagsLocal & 256) is 0 ? default : des.As<long>().Read() ;
            var countLocal =  des.As<int>().Read();
            var hashLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            Archived = archivedLocal,
            Official = officialLocal,
            Masks = masksLocal,
            Animated = animatedLocal,
            Videos = videosLocal,
            Emojis = emojisLocal,
            TextColor = textColorLocal,
            ChannelEmojiStatus = channelEmojiStatusLocal,
            InstalledDate = installedDateLocal,
            Id = idLocal,
            AccessHash = accessHashLocal,
            Title = titleLocal,
            ShortName = shortNameLocal,
            Thumbs = thumbsLocal,
            ThumbDcId = thumbDcIdLocal,
            ThumbVersion = thumbVersionLocal,
            ThumbDocumentId = thumbDocumentIdLocal,
            Count = countLocal,
            Hash = hashLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesStickerSetNs {
    public class MessagesStickerSet : MessagesStickerSetBase, ITlSerializable, ITlDeserializable<MessagesStickerSet> {
        public static readonly byte[] Identifier = [22,63,21,110,];
        public required StickerSetBase Set {get;set;}
        public required List<StickerPackBase> Packs {get;set;}
        public required List<StickerKeywordBase> Keywords {get;set;}
        public required List<DocumentBase> Documents {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Set.TlSerialize());
            bytes.AddRange(Packs.TlSerialize());
            bytes.AddRange(Keywords.TlSerialize());
            bytes.AddRange(Documents.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesStickerSet TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var setLocal =  StickerSetBase.TlDeserialize(des);
            var packsLocal =  des.Read<StickerPackBase>();
            var keywordsLocal =  des.Read<StickerKeywordBase>();
            var documentsLocal =  des.Read<DocumentBase>();
            return new() {
            Set = setLocal,
            Packs = packsLocal,
            Keywords = keywordsLocal,
            Documents = documentsLocal,
            };
        }
    }
    public class MessagesStickerSetNotModified : MessagesStickerSetBase, ITlSerializable, ITlDeserializable<MessagesStickerSetNotModified> {
        public static readonly byte[] Identifier = [235,36,249,211,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static MessagesStickerSetNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.BotCommandNs {
    public class BotCommand : BotCommandBase, ITlSerializable, ITlDeserializable<BotCommand> {
        public static readonly byte[] Identifier = [199,200,122,194,];
        public required string Command {get;set;}
        public required string Description {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Command.TlSerialize());
            bytes.AddRange(Description.TlSerialize());
            return bytes.ToArray();
        }

        public new static BotCommand TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var commandLocal =  des.As<string>().Read();
            var descriptionLocal =  des.As<string>().Read();
            return new() {
            Command = commandLocal,
            Description = descriptionLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.BotInfoNs {
    public class BotInfo : BotInfoBase, ITlSerializable, ITlDeserializable<BotInfo> {
        public static readonly byte[] Identifier = [87,11,48,143,];
        private int Flags;
        public long? UserId {get;set;}
        public string? Description {get;set;}
        public PhotoBase? DescriptionPhoto {get;set;}
        public DocumentBase? DescriptionDocument {get;set;}
        public List<BotCommandBase>? Commands {get;set;}
        public BotMenuButtonBase? MenuButton {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (UserId is not null ? 1 : 0) | (Description is not null ? 2 : 0) | (DescriptionPhoto is not null ? 16 : 0) | (DescriptionDocument is not null ? 32 : 0) | (Commands is not null ? 4 : 0) | (MenuButton is not null ? 8 : 0) ).TlSerialize());
            if(UserId is not null) bytes.AddRange(UserId.TlSerialize());
            if(Description is not null) bytes.AddRange(Description.TlSerialize());
            if(DescriptionPhoto is not null) bytes.AddRange(DescriptionPhoto.TlSerialize());
            if(DescriptionDocument is not null) bytes.AddRange(DescriptionDocument.TlSerialize());
            if(Commands is not null) bytes.AddRange(Commands.TlSerialize());
            if(MenuButton is not null) bytes.AddRange(MenuButton.TlSerialize());
            return bytes.ToArray();
        }

        public new static BotInfo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var userIdLocal = (flagsLocal & 1) is 0 ? default : des.As<long>().Read() ;
            var descriptionLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var descriptionPhotoLocal = (flagsLocal & 16) is 0 ? default : PhotoBase.TlDeserialize(des) ;
            var descriptionDocumentLocal = (flagsLocal & 32) is 0 ? default : DocumentBase.TlDeserialize(des) ;
            var commandsLocal = (flagsLocal & 4) is 0 ? default : des.Read<BotCommandBase>() ;
            var menuButtonLocal = (flagsLocal & 8) is 0 ? default : BotMenuButtonBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            UserId = userIdLocal,
            Description = descriptionLocal,
            DescriptionPhoto = descriptionPhotoLocal,
            DescriptionDocument = descriptionDocumentLocal,
            Commands = commandsLocal,
            MenuButton = menuButtonLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.KeyboardButtonNs {
    public class KeyboardButton : KeyboardButtonBase, ITlSerializable, ITlDeserializable<KeyboardButton> {
        public static readonly byte[] Identifier = [128,72,250,162,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static KeyboardButton TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  des.As<string>().Read();
            return new() {
            Text = textLocal,
            };
        }
    }
    public class KeyboardButtonUrl : KeyboardButtonBase, ITlSerializable, ITlDeserializable<KeyboardButtonUrl> {
        public static readonly byte[] Identifier = [5,255,138,37,];
        public required string Url {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(Url.TlSerialize());
            return bytes.ToArray();
        }

        public new static KeyboardButtonUrl TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  des.As<string>().Read();
            var urlLocal =  des.As<string>().Read();
            return new() {
            Text = textLocal,
            Url = urlLocal,
            };
        }
    }
    public class KeyboardButtonCallback : KeyboardButtonBase, ITlSerializable, ITlDeserializable<KeyboardButtonCallback> {
        public static readonly byte[] Identifier = [107,219,187,53,];
        private int Flags;
        public bool RequiresPassword {get;set;}
        public required byte[] Data {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(Data.TlSerialize());
            return bytes.ToArray();
        }

        public new static KeyboardButtonCallback TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var requiresPasswordLocal = (flagsLocal & 1) is 0 ? default : true ;
            var textLocal =  des.As<string>().Read();
            var dataLocal =  des.As<byte[]>().Read();
            return new() {
            Flags = flagsLocal,
            RequiresPassword = requiresPasswordLocal,
            Text = textLocal,
            Data = dataLocal,
            };
        }
    }
    public class KeyboardButtonRequestPhone : KeyboardButtonBase, ITlSerializable, ITlDeserializable<KeyboardButtonRequestPhone> {
        public static readonly byte[] Identifier = [41,108,106,177,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static KeyboardButtonRequestPhone TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  des.As<string>().Read();
            return new() {
            Text = textLocal,
            };
        }
    }
    public class KeyboardButtonRequestGeoLocation : KeyboardButtonBase, ITlSerializable, ITlDeserializable<KeyboardButtonRequestGeoLocation> {
        public static readonly byte[] Identifier = [63,107,121,252,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static KeyboardButtonRequestGeoLocation TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  des.As<string>().Read();
            return new() {
            Text = textLocal,
            };
        }
    }
    public class KeyboardButtonSwitchInline : KeyboardButtonBase, ITlSerializable, ITlDeserializable<KeyboardButtonSwitchInline> {
        public static readonly byte[] Identifier = [181,251,185,147,];
        private int Flags;
        public bool SamePeer {get;set;}
        public required string Query {get;set;}
        public List<InlineQueryPeerTypeBase>? PeerTypes {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (PeerTypes is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(Query.TlSerialize());
            if(PeerTypes is not null) bytes.AddRange(PeerTypes.TlSerialize());
            return bytes.ToArray();
        }

        public new static KeyboardButtonSwitchInline TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var samePeerLocal = (flagsLocal & 1) is 0 ? default : true ;
            var textLocal =  des.As<string>().Read();
            var queryLocal =  des.As<string>().Read();
            var peerTypesLocal = (flagsLocal & 2) is 0 ? default : des.Read<InlineQueryPeerTypeBase>() ;
            return new() {
            Flags = flagsLocal,
            SamePeer = samePeerLocal,
            Text = textLocal,
            Query = queryLocal,
            PeerTypes = peerTypesLocal,
            };
        }
    }
    public class KeyboardButtonGame : KeyboardButtonBase, ITlSerializable, ITlDeserializable<KeyboardButtonGame> {
        public static readonly byte[] Identifier = [207,28,244,80,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static KeyboardButtonGame TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  des.As<string>().Read();
            return new() {
            Text = textLocal,
            };
        }
    }
    public class KeyboardButtonBuy : KeyboardButtonBase, ITlSerializable, ITlDeserializable<KeyboardButtonBuy> {
        public static readonly byte[] Identifier = [187,63,217,175,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static KeyboardButtonBuy TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  des.As<string>().Read();
            return new() {
            Text = textLocal,
            };
        }
    }
    public class KeyboardButtonUrlAuth : KeyboardButtonBase, ITlSerializable, ITlDeserializable<KeyboardButtonUrlAuth> {
        public static readonly byte[] Identifier = [41,141,183,16,];
        private int Flags;
        public string? FwdText {get;set;}
        public required string Url {get;set;}
        public required int ButtonId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (FwdText is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Text.TlSerialize());
            if(FwdText is not null) bytes.AddRange(FwdText.TlSerialize());
            bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(ButtonId.TlSerialize());
            return bytes.ToArray();
        }

        public new static KeyboardButtonUrlAuth TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var textLocal =  des.As<string>().Read();
            var fwdTextLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var urlLocal =  des.As<string>().Read();
            var buttonIdLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            Text = textLocal,
            FwdText = fwdTextLocal,
            Url = urlLocal,
            ButtonId = buttonIdLocal,
            };
        }
    }
    public class InputKeyboardButtonUrlAuth : KeyboardButtonBase, ITlSerializable, ITlDeserializable<InputKeyboardButtonUrlAuth> {
        public static readonly byte[] Identifier = [212,127,46,208,];
        private int Flags;
        public bool RequestWriteAccess {get;set;}
        public string? FwdText {get;set;}
        public required string Url {get;set;}
        public required InputUserBase Bot {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (FwdText is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(Text.TlSerialize());
            if(FwdText is not null) bytes.AddRange(FwdText.TlSerialize());
            bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(Bot.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputKeyboardButtonUrlAuth TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var requestWriteAccessLocal = (flagsLocal & 1) is 0 ? default : true ;
            var textLocal =  des.As<string>().Read();
            var fwdTextLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var urlLocal =  des.As<string>().Read();
            var botLocal =  InputUserBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            RequestWriteAccess = requestWriteAccessLocal,
            Text = textLocal,
            FwdText = fwdTextLocal,
            Url = urlLocal,
            Bot = botLocal,
            };
        }
    }
    public class KeyboardButtonRequestPoll : KeyboardButtonBase, ITlSerializable, ITlDeserializable<KeyboardButtonRequestPoll> {
        public static readonly byte[] Identifier = [93,81,199,187,];
        private int Flags;
        public bool Quiz {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static KeyboardButtonRequestPoll TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var quizLocal = (flagsLocal & 1) is 0 ? default : true ;
            var textLocal =  des.As<string>().Read();
            return new() {
            Flags = flagsLocal,
            Quiz = quizLocal,
            Text = textLocal,
            };
        }
    }
    public class InputKeyboardButtonUserProfile : KeyboardButtonBase, ITlSerializable, ITlDeserializable<InputKeyboardButtonUserProfile> {
        public static readonly byte[] Identifier = [123,3,136,233,];
        public required InputUserBase UserId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputKeyboardButtonUserProfile TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  des.As<string>().Read();
            var userIdLocal =  InputUserBase.TlDeserialize(des);
            return new() {
            Text = textLocal,
            UserId = userIdLocal,
            };
        }
    }
    public class KeyboardButtonUserProfile : KeyboardButtonBase, ITlSerializable, ITlDeserializable<KeyboardButtonUserProfile> {
        public static readonly byte[] Identifier = [193,96,134,48,];
        public required long UserId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            return bytes.ToArray();
        }

        public new static KeyboardButtonUserProfile TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  des.As<string>().Read();
            var userIdLocal =  des.As<long>().Read();
            return new() {
            Text = textLocal,
            UserId = userIdLocal,
            };
        }
    }
    public class KeyboardButtonWebView : KeyboardButtonBase, ITlSerializable, ITlDeserializable<KeyboardButtonWebView> {
        public static readonly byte[] Identifier = [48,114,118,19,];
        public required string Url {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(Url.TlSerialize());
            return bytes.ToArray();
        }

        public new static KeyboardButtonWebView TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  des.As<string>().Read();
            var urlLocal =  des.As<string>().Read();
            return new() {
            Text = textLocal,
            Url = urlLocal,
            };
        }
    }
    public class KeyboardButtonSimpleWebView : KeyboardButtonBase, ITlSerializable, ITlDeserializable<KeyboardButtonSimpleWebView> {
        public static readonly byte[] Identifier = [92,80,192,160,];
        public required string Url {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(Url.TlSerialize());
            return bytes.ToArray();
        }

        public new static KeyboardButtonSimpleWebView TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  des.As<string>().Read();
            var urlLocal =  des.As<string>().Read();
            return new() {
            Text = textLocal,
            Url = urlLocal,
            };
        }
    }
    public class KeyboardButtonRequestPeer : KeyboardButtonBase, ITlSerializable, ITlDeserializable<KeyboardButtonRequestPeer> {
        public static readonly byte[] Identifier = [216,191,215,83,];
        public required int ButtonId {get;set;}
        public required RequestPeerTypeBase PeerType {get;set;}
        public required int MaxQuantity {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(ButtonId.TlSerialize());
            bytes.AddRange(PeerType.TlSerialize());
            bytes.AddRange(MaxQuantity.TlSerialize());
            return bytes.ToArray();
        }

        public new static KeyboardButtonRequestPeer TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  des.As<string>().Read();
            var buttonIdLocal =  des.As<int>().Read();
            var peerTypeLocal =  RequestPeerTypeBase.TlDeserialize(des);
            var maxQuantityLocal =  des.As<int>().Read();
            return new() {
            Text = textLocal,
            ButtonId = buttonIdLocal,
            PeerType = peerTypeLocal,
            MaxQuantity = maxQuantityLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.KeyboardButtonRowNs {
    public class KeyboardButtonRow : KeyboardButtonRowBase, ITlSerializable, ITlDeserializable<KeyboardButtonRow> {
        public static readonly byte[] Identifier = [131,139,96,119,];
        public required List<KeyboardButtonBase> Buttons {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Buttons.TlSerialize());
            return bytes.ToArray();
        }

        public new static KeyboardButtonRow TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var buttonsLocal =  des.Read<KeyboardButtonBase>();
            return new() {
            Buttons = buttonsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ReplyMarkupNs {
    public class ReplyKeyboardHide : ReplyMarkupBase, ITlSerializable, ITlDeserializable<ReplyKeyboardHide> {
        public static readonly byte[] Identifier = [133,91,62,160,];
        private int Flags;
        public bool Selective {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            return bytes.ToArray();
        }

        public new static ReplyKeyboardHide TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var selectiveLocal = (flagsLocal & 4) is 0 ? default : true ;
            return new() {
            Flags = flagsLocal,
            Selective = selectiveLocal,
            };
        }
    }
    public class ReplyKeyboardForceReply : ReplyMarkupBase, ITlSerializable, ITlDeserializable<ReplyKeyboardForceReply> {
        public static readonly byte[] Identifier = [8,11,180,134,];
        private int Flags;
        public bool SingleUse {get;set;}
        public bool Selective {get;set;}
        public string? Placeholder {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Placeholder is not null ? 8 : 0) ).TlSerialize());
            if(Placeholder is not null) bytes.AddRange(Placeholder.TlSerialize());
            return bytes.ToArray();
        }

        public new static ReplyKeyboardForceReply TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var singleUseLocal = (flagsLocal & 2) is 0 ? default : true ;
            var selectiveLocal = (flagsLocal & 4) is 0 ? default : true ;
            var placeholderLocal = (flagsLocal & 8) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            SingleUse = singleUseLocal,
            Selective = selectiveLocal,
            Placeholder = placeholderLocal,
            };
        }
    }
    public class ReplyKeyboardMarkup : ReplyMarkupBase, ITlSerializable, ITlDeserializable<ReplyKeyboardMarkup> {
        public static readonly byte[] Identifier = [209,153,221,133,];
        private int Flags;
        public bool Resize {get;set;}
        public bool SingleUse {get;set;}
        public bool Selective {get;set;}
        public bool Persistent {get;set;}
        public required List<KeyboardButtonRowBase> Rows {get;set;}
        public string? Placeholder {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Placeholder is not null ? 8 : 0) ).TlSerialize());
            bytes.AddRange(Rows.TlSerialize());
            if(Placeholder is not null) bytes.AddRange(Placeholder.TlSerialize());
            return bytes.ToArray();
        }

        public new static ReplyKeyboardMarkup TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var resizeLocal = (flagsLocal & 1) is 0 ? default : true ;
            var singleUseLocal = (flagsLocal & 2) is 0 ? default : true ;
            var selectiveLocal = (flagsLocal & 4) is 0 ? default : true ;
            var persistentLocal = (flagsLocal & 16) is 0 ? default : true ;
            var rowsLocal =  des.Read<KeyboardButtonRowBase>();
            var placeholderLocal = (flagsLocal & 8) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            Resize = resizeLocal,
            SingleUse = singleUseLocal,
            Selective = selectiveLocal,
            Persistent = persistentLocal,
            Rows = rowsLocal,
            Placeholder = placeholderLocal,
            };
        }
    }
    public class ReplyInlineMarkup : ReplyMarkupBase, ITlSerializable, ITlDeserializable<ReplyInlineMarkup> {
        public static readonly byte[] Identifier = [84,2,163,72,];
        public required List<KeyboardButtonRowBase> Rows {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Rows.TlSerialize());
            return bytes.ToArray();
        }

        public new static ReplyInlineMarkup TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var rowsLocal =  des.Read<KeyboardButtonRowBase>();
            return new() {
            Rows = rowsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessageEntityNs {
    public class MessageEntityUnknown : MessageEntityBase, ITlSerializable, ITlDeserializable<MessageEntityUnknown> {
        public static readonly byte[] Identifier = [149,186,146,187,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageEntityUnknown TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var offsetLocal =  des.As<int>().Read();
            var lengthLocal =  des.As<int>().Read();
            return new() {
            Offset = offsetLocal,
            Length = lengthLocal,
            };
        }
    }
    public class MessageEntityMention : MessageEntityBase, ITlSerializable, ITlDeserializable<MessageEntityMention> {
        public static readonly byte[] Identifier = [157,87,4,250,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageEntityMention TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var offsetLocal =  des.As<int>().Read();
            var lengthLocal =  des.As<int>().Read();
            return new() {
            Offset = offsetLocal,
            Length = lengthLocal,
            };
        }
    }
    public class MessageEntityHashtag : MessageEntityBase, ITlSerializable, ITlDeserializable<MessageEntityHashtag> {
        public static readonly byte[] Identifier = [13,91,99,111,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageEntityHashtag TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var offsetLocal =  des.As<int>().Read();
            var lengthLocal =  des.As<int>().Read();
            return new() {
            Offset = offsetLocal,
            Length = lengthLocal,
            };
        }
    }
    public class MessageEntityBotCommand : MessageEntityBase, ITlSerializable, ITlDeserializable<MessageEntityBotCommand> {
        public static readonly byte[] Identifier = [199,138,239,108,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageEntityBotCommand TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var offsetLocal =  des.As<int>().Read();
            var lengthLocal =  des.As<int>().Read();
            return new() {
            Offset = offsetLocal,
            Length = lengthLocal,
            };
        }
    }
    public class MessageEntityUrl : MessageEntityBase, ITlSerializable, ITlDeserializable<MessageEntityUrl> {
        public static readonly byte[] Identifier = [56,37,208,110,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageEntityUrl TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var offsetLocal =  des.As<int>().Read();
            var lengthLocal =  des.As<int>().Read();
            return new() {
            Offset = offsetLocal,
            Length = lengthLocal,
            };
        }
    }
    public class MessageEntityEmail : MessageEntityBase, ITlSerializable, ITlDeserializable<MessageEntityEmail> {
        public static readonly byte[] Identifier = [194,117,228,100,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageEntityEmail TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var offsetLocal =  des.As<int>().Read();
            var lengthLocal =  des.As<int>().Read();
            return new() {
            Offset = offsetLocal,
            Length = lengthLocal,
            };
        }
    }
    public class MessageEntityBold : MessageEntityBase, ITlSerializable, ITlDeserializable<MessageEntityBold> {
        public static readonly byte[] Identifier = [201,11,97,189,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageEntityBold TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var offsetLocal =  des.As<int>().Read();
            var lengthLocal =  des.As<int>().Read();
            return new() {
            Offset = offsetLocal,
            Length = lengthLocal,
            };
        }
    }
    public class MessageEntityItalic : MessageEntityBase, ITlSerializable, ITlDeserializable<MessageEntityItalic> {
        public static readonly byte[] Identifier = [96,139,111,130,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageEntityItalic TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var offsetLocal =  des.As<int>().Read();
            var lengthLocal =  des.As<int>().Read();
            return new() {
            Offset = offsetLocal,
            Length = lengthLocal,
            };
        }
    }
    public class MessageEntityCode : MessageEntityBase, ITlSerializable, ITlDeserializable<MessageEntityCode> {
        public static readonly byte[] Identifier = [113,5,162,40,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageEntityCode TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var offsetLocal =  des.As<int>().Read();
            var lengthLocal =  des.As<int>().Read();
            return new() {
            Offset = offsetLocal,
            Length = lengthLocal,
            };
        }
    }
    public class MessageEntityPre : MessageEntityBase, ITlSerializable, ITlDeserializable<MessageEntityPre> {
        public static readonly byte[] Identifier = [224,75,146,115,];
        public required string Language {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            bytes.AddRange(Language.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageEntityPre TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var offsetLocal =  des.As<int>().Read();
            var lengthLocal =  des.As<int>().Read();
            var languageLocal =  des.As<string>().Read();
            return new() {
            Offset = offsetLocal,
            Length = lengthLocal,
            Language = languageLocal,
            };
        }
    }
    public class MessageEntityTextUrl : MessageEntityBase, ITlSerializable, ITlDeserializable<MessageEntityTextUrl> {
        public static readonly byte[] Identifier = [39,211,166,118,];
        public required string Url {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            bytes.AddRange(Url.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageEntityTextUrl TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var offsetLocal =  des.As<int>().Read();
            var lengthLocal =  des.As<int>().Read();
            var urlLocal =  des.As<string>().Read();
            return new() {
            Offset = offsetLocal,
            Length = lengthLocal,
            Url = urlLocal,
            };
        }
    }
    public class MessageEntityMentionName : MessageEntityBase, ITlSerializable, ITlDeserializable<MessageEntityMentionName> {
        public static readonly byte[] Identifier = [64,17,123,220,];
        public required long UserId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageEntityMentionName TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var offsetLocal =  des.As<int>().Read();
            var lengthLocal =  des.As<int>().Read();
            var userIdLocal =  des.As<long>().Read();
            return new() {
            Offset = offsetLocal,
            Length = lengthLocal,
            UserId = userIdLocal,
            };
        }
    }
    public class InputMessageEntityMentionName : MessageEntityBase, ITlSerializable, ITlDeserializable<InputMessageEntityMentionName> {
        public static readonly byte[] Identifier = [201,104,142,32,];
        public required InputUserBase UserId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMessageEntityMentionName TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var offsetLocal =  des.As<int>().Read();
            var lengthLocal =  des.As<int>().Read();
            var userIdLocal =  InputUserBase.TlDeserialize(des);
            return new() {
            Offset = offsetLocal,
            Length = lengthLocal,
            UserId = userIdLocal,
            };
        }
    }
    public class MessageEntityPhone : MessageEntityBase, ITlSerializable, ITlDeserializable<MessageEntityPhone> {
        public static readonly byte[] Identifier = [75,227,105,155,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageEntityPhone TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var offsetLocal =  des.As<int>().Read();
            var lengthLocal =  des.As<int>().Read();
            return new() {
            Offset = offsetLocal,
            Length = lengthLocal,
            };
        }
    }
    public class MessageEntityCashtag : MessageEntityBase, ITlSerializable, ITlDeserializable<MessageEntityCashtag> {
        public static readonly byte[] Identifier = [63,116,78,76,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageEntityCashtag TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var offsetLocal =  des.As<int>().Read();
            var lengthLocal =  des.As<int>().Read();
            return new() {
            Offset = offsetLocal,
            Length = lengthLocal,
            };
        }
    }
    public class MessageEntityUnderline : MessageEntityBase, ITlSerializable, ITlDeserializable<MessageEntityUnderline> {
        public static readonly byte[] Identifier = [139,126,78,156,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageEntityUnderline TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var offsetLocal =  des.As<int>().Read();
            var lengthLocal =  des.As<int>().Read();
            return new() {
            Offset = offsetLocal,
            Length = lengthLocal,
            };
        }
    }
    public class MessageEntityStrike : MessageEntityBase, ITlSerializable, ITlDeserializable<MessageEntityStrike> {
        public static readonly byte[] Identifier = [212,147,6,191,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageEntityStrike TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var offsetLocal =  des.As<int>().Read();
            var lengthLocal =  des.As<int>().Read();
            return new() {
            Offset = offsetLocal,
            Length = lengthLocal,
            };
        }
    }
    public class MessageEntityBankCard : MessageEntityBase, ITlSerializable, ITlDeserializable<MessageEntityBankCard> {
        public static readonly byte[] Identifier = [244,106,30,118,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageEntityBankCard TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var offsetLocal =  des.As<int>().Read();
            var lengthLocal =  des.As<int>().Read();
            return new() {
            Offset = offsetLocal,
            Length = lengthLocal,
            };
        }
    }
    public class MessageEntitySpoiler : MessageEntityBase, ITlSerializable, ITlDeserializable<MessageEntitySpoiler> {
        public static readonly byte[] Identifier = [15,150,202,50,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageEntitySpoiler TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var offsetLocal =  des.As<int>().Read();
            var lengthLocal =  des.As<int>().Read();
            return new() {
            Offset = offsetLocal,
            Length = lengthLocal,
            };
        }
    }
    public class MessageEntityCustomEmoji : MessageEntityBase, ITlSerializable, ITlDeserializable<MessageEntityCustomEmoji> {
        public static readonly byte[] Identifier = [248,5,207,200,];
        public required long DocumentId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            bytes.AddRange(DocumentId.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageEntityCustomEmoji TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var offsetLocal =  des.As<int>().Read();
            var lengthLocal =  des.As<int>().Read();
            var documentIdLocal =  des.As<long>().Read();
            return new() {
            Offset = offsetLocal,
            Length = lengthLocal,
            DocumentId = documentIdLocal,
            };
        }
    }
    public class MessageEntityBlockquote : MessageEntityBase, ITlSerializable, ITlDeserializable<MessageEntityBlockquote> {
        public static readonly byte[] Identifier = [208,245,13,2,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageEntityBlockquote TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var offsetLocal =  des.As<int>().Read();
            var lengthLocal =  des.As<int>().Read();
            return new() {
            Offset = offsetLocal,
            Length = lengthLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputChannelNs {
    public class InputChannelEmpty : InputChannelBase, ITlSerializable, ITlDeserializable<InputChannelEmpty> {
        public static readonly byte[] Identifier = [134,30,140,238,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputChannelEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputChannel : InputChannelBase, ITlSerializable, ITlDeserializable<InputChannel> {
        public static readonly byte[] Identifier = [40,236,90,243,];
        public required long ChannelId {get;set;}
        public required long AccessHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ChannelId.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputChannel TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var channelIdLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            return new() {
            ChannelId = channelIdLocal,
            AccessHash = accessHashLocal,
            };
        }
    }
    public class InputChannelFromMessage : InputChannelBase, ITlSerializable, ITlDeserializable<InputChannelFromMessage> {
        public static readonly byte[] Identifier = [157,79,147,91,];
        public required InputPeerBase Peer {get;set;}
        public required int MsgId {get;set;}
        public required long ChannelId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(MsgId.TlSerialize());
            bytes.AddRange(ChannelId.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputChannelFromMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  InputPeerBase.TlDeserialize(des);
            var msgIdLocal =  des.As<int>().Read();
            var channelIdLocal =  des.As<long>().Read();
            return new() {
            Peer = peerLocal,
            MsgId = msgIdLocal,
            ChannelId = channelIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ContactsResolvedPeerNs {
    public class ContactsResolvedPeer : ContactsResolvedPeerBase, ITlSerializable, ITlDeserializable<ContactsResolvedPeer> {
        public static readonly byte[] Identifier = [217,122,7,127,];
        public required PeerBase Peer {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static ContactsResolvedPeer TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Peer = peerLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessageRangeNs {
    public class MessageRange : MessageRangeBase, ITlSerializable, ITlDeserializable<MessageRange> {
        public static readonly byte[] Identifier = [83,2,227,10,];
        public required int MinId {get;set;}
        public required int MaxId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(MinId.TlSerialize());
            bytes.AddRange(MaxId.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageRange TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var minIdLocal =  des.As<int>().Read();
            var maxIdLocal =  des.As<int>().Read();
            return new() {
            MinId = minIdLocal,
            MaxId = maxIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.UpdatesChannelDifferenceNs {
    public class UpdatesChannelDifferenceEmpty : UpdatesChannelDifferenceBase, ITlSerializable, ITlDeserializable<UpdatesChannelDifferenceEmpty> {
        public static readonly byte[] Identifier = [251,175,17,62,];
        public required int Pts {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Timeout is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            if(Timeout is not null) bytes.AddRange(Timeout.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdatesChannelDifferenceEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var finalLocal = (flagsLocal & 1) is 0 ? default : true ;
            var ptsLocal =  des.As<int>().Read();
            var timeoutLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Final = finalLocal,
            Pts = ptsLocal,
            Timeout = timeoutLocal,
            };
        }
    }
    public class UpdatesChannelDifferenceTooLong : UpdatesChannelDifferenceBase, ITlSerializable, ITlDeserializable<UpdatesChannelDifferenceTooLong> {
        public static readonly byte[] Identifier = [254,198,188,164,];
        public required DialogBase Dialog {get;set;}
        public required List<MessageBase> Messages {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Timeout is not null ? 2 : 0) ).TlSerialize());
            if(Timeout is not null) bytes.AddRange(Timeout.TlSerialize());
            bytes.AddRange(Dialog.TlSerialize());
            bytes.AddRange(Messages.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdatesChannelDifferenceTooLong TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var finalLocal = (flagsLocal & 1) is 0 ? default : true ;
            var timeoutLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            var dialogLocal =  DialogBase.TlDeserialize(des);
            var messagesLocal =  des.Read<MessageBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Flags = flagsLocal,
            Final = finalLocal,
            Timeout = timeoutLocal,
            Dialog = dialogLocal,
            Messages = messagesLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }
    public class UpdatesChannelDifference : UpdatesChannelDifferenceBase, ITlSerializable, ITlDeserializable<UpdatesChannelDifference> {
        public static readonly byte[] Identifier = [78,103,100,32,];
        public required int Pts {get;set;}
        public required List<MessageBase> NewMessages {get;set;}
        public required List<UpdateBase> OtherUpdates {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Timeout is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            if(Timeout is not null) bytes.AddRange(Timeout.TlSerialize());
            bytes.AddRange(NewMessages.TlSerialize());
            bytes.AddRange(OtherUpdates.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static UpdatesChannelDifference TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var finalLocal = (flagsLocal & 1) is 0 ? default : true ;
            var ptsLocal =  des.As<int>().Read();
            var timeoutLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            var newMessagesLocal =  des.Read<MessageBase>();
            var otherUpdatesLocal =  des.Read<UpdateBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Flags = flagsLocal,
            Final = finalLocal,
            Pts = ptsLocal,
            Timeout = timeoutLocal,
            NewMessages = newMessagesLocal,
            OtherUpdates = otherUpdatesLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChannelMessagesFilterNs {
    public class ChannelMessagesFilterEmpty : ChannelMessagesFilterBase, ITlSerializable, ITlDeserializable<ChannelMessagesFilterEmpty> {
        public static readonly byte[] Identifier = [231,46,212,148,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static ChannelMessagesFilterEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class ChannelMessagesFilter : ChannelMessagesFilterBase, ITlSerializable, ITlDeserializable<ChannelMessagesFilter> {
        public static readonly byte[] Identifier = [87,217,119,205,];
        private int Flags;
        public bool ExcludeNewMessages {get;set;}
        public required List<MessageRangeBase> Ranges {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Ranges.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelMessagesFilter TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var excludeNewMessagesLocal = (flagsLocal & 2) is 0 ? default : true ;
            var rangesLocal =  des.Read<MessageRangeBase>();
            return new() {
            Flags = flagsLocal,
            ExcludeNewMessages = excludeNewMessagesLocal,
            Ranges = rangesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChannelParticipantNs {
    public class ChannelParticipant : ChannelParticipantBase, ITlSerializable, ITlDeserializable<ChannelParticipant> {
        public static readonly byte[] Identifier = [192,7,12,192,];
        public required long UserId {get;set;}
        public required int Date {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelParticipant TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            var dateLocal =  des.As<int>().Read();
            return new() {
            UserId = userIdLocal,
            Date = dateLocal,
            };
        }
    }
    public class ChannelParticipantSelf : ChannelParticipantBase, ITlSerializable, ITlDeserializable<ChannelParticipantSelf> {
        public static readonly byte[] Identifier = [167,191,168,53,];
        private int Flags;
        public bool ViaRequest {get;set;}
        public required long UserId {get;set;}
        public required long InviterId {get;set;}
        public required int Date {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(InviterId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelParticipantSelf TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var viaRequestLocal = (flagsLocal & 1) is 0 ? default : true ;
            var userIdLocal =  des.As<long>().Read();
            var inviterIdLocal =  des.As<long>().Read();
            var dateLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            ViaRequest = viaRequestLocal,
            UserId = userIdLocal,
            InviterId = inviterIdLocal,
            Date = dateLocal,
            };
        }
    }
    public class ChannelParticipantCreator : ChannelParticipantBase, ITlSerializable, ITlDeserializable<ChannelParticipantCreator> {
        public static readonly byte[] Identifier = [211,1,230,47,];
        private int Flags;
        public required long UserId {get;set;}
        public required ChatAdminRightsBase AdminRights {get;set;}
        public string? Rank {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Rank is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(AdminRights.TlSerialize());
            if(Rank is not null) bytes.AddRange(Rank.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelParticipantCreator TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var userIdLocal =  des.As<long>().Read();
            var adminRightsLocal =  ChatAdminRightsBase.TlDeserialize(des);
            var rankLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            UserId = userIdLocal,
            AdminRights = adminRightsLocal,
            Rank = rankLocal,
            };
        }
    }
    public class ChannelParticipantAdmin : ChannelParticipantBase, ITlSerializable, ITlDeserializable<ChannelParticipantAdmin> {
        public static readonly byte[] Identifier = [83,187,195,52,];
        private int Flags;
        public bool CanEdit {get;set;}
        public bool Self {get;set;}
        public required long UserId {get;set;}
        public long? InviterId {get;set;}
        public required long PromotedBy {get;set;}
        public required int Date {get;set;}
        public required ChatAdminRightsBase AdminRights {get;set;}
        public string? Rank {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (InviterId is not null ? 2 : 0) | (Rank is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            if(InviterId is not null) bytes.AddRange(InviterId.TlSerialize());
            bytes.AddRange(PromotedBy.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(AdminRights.TlSerialize());
            if(Rank is not null) bytes.AddRange(Rank.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelParticipantAdmin TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var canEditLocal = (flagsLocal & 1) is 0 ? default : true ;
            var selfLocal = (flagsLocal & 2) is 0 ? default : true ;
            var userIdLocal =  des.As<long>().Read();
            var inviterIdLocal = (flagsLocal & 2) is 0 ? default : des.As<long>().Read() ;
            var promotedByLocal =  des.As<long>().Read();
            var dateLocal =  des.As<int>().Read();
            var adminRightsLocal =  ChatAdminRightsBase.TlDeserialize(des);
            var rankLocal = (flagsLocal & 4) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            CanEdit = canEditLocal,
            Self = selfLocal,
            UserId = userIdLocal,
            InviterId = inviterIdLocal,
            PromotedBy = promotedByLocal,
            Date = dateLocal,
            AdminRights = adminRightsLocal,
            Rank = rankLocal,
            };
        }
    }
    public class ChannelParticipantBanned : ChannelParticipantBase, ITlSerializable, ITlDeserializable<ChannelParticipantBanned> {
        public static readonly byte[] Identifier = [78,1,248,109,];
        private int Flags;
        public bool Left {get;set;}
        public required PeerBase Peer {get;set;}
        public required long KickedBy {get;set;}
        public required int Date {get;set;}
        public required ChatBannedRightsBase BannedRights {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(KickedBy.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(BannedRights.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelParticipantBanned TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var leftLocal = (flagsLocal & 1) is 0 ? default : true ;
            var peerLocal =  PeerBase.TlDeserialize(des);
            var kickedByLocal =  des.As<long>().Read();
            var dateLocal =  des.As<int>().Read();
            var bannedRightsLocal =  ChatBannedRightsBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Left = leftLocal,
            Peer = peerLocal,
            KickedBy = kickedByLocal,
            Date = dateLocal,
            BannedRights = bannedRightsLocal,
            };
        }
    }
    public class ChannelParticipantLeft : ChannelParticipantBase, ITlSerializable, ITlDeserializable<ChannelParticipantLeft> {
        public static readonly byte[] Identifier = [6,240,3,27,];
        public required PeerBase Peer {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelParticipantLeft TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            return new() {
            Peer = peerLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChannelParticipantsFilterNs {
    public class ChannelParticipantsRecent : ChannelParticipantsFilterBase, ITlSerializable, ITlDeserializable<ChannelParticipantsRecent> {
        public static readonly byte[] Identifier = [121,60,63,222,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static ChannelParticipantsRecent TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class ChannelParticipantsAdmins : ChannelParticipantsFilterBase, ITlSerializable, ITlDeserializable<ChannelParticipantsAdmins> {
        public static readonly byte[] Identifier = [105,137,96,180,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static ChannelParticipantsAdmins TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class ChannelParticipantsKicked : ChannelParticipantsFilterBase, ITlSerializable, ITlDeserializable<ChannelParticipantsKicked> {
        public static readonly byte[] Identifier = [133,73,181,163,];
        public required string Q {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Q.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelParticipantsKicked TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var qLocal =  des.As<string>().Read();
            return new() {
            Q = qLocal,
            };
        }
    }
    public class ChannelParticipantsBots : ChannelParticipantsFilterBase, ITlSerializable, ITlDeserializable<ChannelParticipantsBots> {
        public static readonly byte[] Identifier = [91,134,209,176,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static ChannelParticipantsBots TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class ChannelParticipantsBanned : ChannelParticipantsFilterBase, ITlSerializable, ITlDeserializable<ChannelParticipantsBanned> {
        public static readonly byte[] Identifier = [225,165,39,20,];
        public required string Q {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Q.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelParticipantsBanned TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var qLocal =  des.As<string>().Read();
            return new() {
            Q = qLocal,
            };
        }
    }
    public class ChannelParticipantsSearch : ChannelParticipantsFilterBase, ITlSerializable, ITlDeserializable<ChannelParticipantsSearch> {
        public static readonly byte[] Identifier = [75,172,86,6,];
        public required string Q {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Q.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelParticipantsSearch TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var qLocal =  des.As<string>().Read();
            return new() {
            Q = qLocal,
            };
        }
    }
    public class ChannelParticipantsContacts : ChannelParticipantsFilterBase, ITlSerializable, ITlDeserializable<ChannelParticipantsContacts> {
        public static readonly byte[] Identifier = [141,232,106,187,];
        public required string Q {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Q.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelParticipantsContacts TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var qLocal =  des.As<string>().Read();
            return new() {
            Q = qLocal,
            };
        }
    }
    public class ChannelParticipantsMentions : ChannelParticipantsFilterBase, ITlSerializable, ITlDeserializable<ChannelParticipantsMentions> {
        public static readonly byte[] Identifier = [235,92,75,224,];
        private int Flags;
        public string? Q {get;set;}
        public int? TopMsgId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Q is not null ? 1 : 0) | (TopMsgId is not null ? 2 : 0) ).TlSerialize());
            if(Q is not null) bytes.AddRange(Q.TlSerialize());
            if(TopMsgId is not null) bytes.AddRange(TopMsgId.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelParticipantsMentions TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var qLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var topMsgIdLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Q = qLocal,
            TopMsgId = topMsgIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChannelsChannelParticipantsNs {
    public class ChannelsChannelParticipants : ChannelsChannelParticipantsBase, ITlSerializable, ITlDeserializable<ChannelsChannelParticipants> {
        public static readonly byte[] Identifier = [175,254,176,154,];
        public required int Count {get;set;}
        public required List<ChannelParticipantBase> Participants {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(Participants.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelsChannelParticipants TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var countLocal =  des.As<int>().Read();
            var participantsLocal =  des.Read<ChannelParticipantBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Count = countLocal,
            Participants = participantsLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }
    public class ChannelsChannelParticipantsNotModified : ChannelsChannelParticipantsBase, ITlSerializable, ITlDeserializable<ChannelsChannelParticipantsNotModified> {
        public static readonly byte[] Identifier = [233,63,23,240,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static ChannelsChannelParticipantsNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChannelsChannelParticipantNs {
    public class ChannelsChannelParticipant : ChannelsChannelParticipantBase, ITlSerializable, ITlDeserializable<ChannelsChannelParticipant> {
        public static readonly byte[] Identifier = [23,3,184,223,];
        public required ChannelParticipantBase Participant {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Participant.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelsChannelParticipant TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var participantLocal =  ChannelParticipantBase.TlDeserialize(des);
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Participant = participantLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.HelpTermsOfServiceNs {
    public class HelpTermsOfService : HelpTermsOfServiceBase, ITlSerializable, ITlDeserializable<HelpTermsOfService> {
        public static readonly byte[] Identifier = [16,3,10,120,];
        private int Flags;
        public bool Popup {get;set;}
        public required DataJSONBase Id {get;set;}
        public required string Text {get;set;}
        public required List<MessageEntityBase> Entities {get;set;}
        public int? MinAgeConfirm {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (MinAgeConfirm is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(Entities.TlSerialize());
            if(MinAgeConfirm is not null) bytes.AddRange(MinAgeConfirm.TlSerialize());
            return bytes.ToArray();
        }

        public new static HelpTermsOfService TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var popupLocal = (flagsLocal & 1) is 0 ? default : true ;
            var idLocal =  DataJSONBase.TlDeserialize(des);
            var textLocal =  des.As<string>().Read();
            var entitiesLocal =  des.Read<MessageEntityBase>();
            var minAgeConfirmLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Popup = popupLocal,
            Id = idLocal,
            Text = textLocal,
            Entities = entitiesLocal,
            MinAgeConfirm = minAgeConfirmLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesSavedGifsNs {
    public class MessagesSavedGifsNotModified : MessagesSavedGifsBase, ITlSerializable, ITlDeserializable<MessagesSavedGifsNotModified> {
        public static readonly byte[] Identifier = [162,92,2,232,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static MessagesSavedGifsNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class MessagesSavedGifs : MessagesSavedGifsBase, ITlSerializable, ITlDeserializable<MessagesSavedGifs> {
        public static readonly byte[] Identifier = [13,42,160,132,];
        public required long Hash {get;set;}
        public required List<DocumentBase> Gifs {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(Gifs.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesSavedGifs TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var hashLocal =  des.As<long>().Read();
            var gifsLocal =  des.Read<DocumentBase>();
            return new() {
            Hash = hashLocal,
            Gifs = gifsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputBotInlineMessageNs {
    public class InputBotInlineMessageMediaAuto : InputBotInlineMessageBase, ITlSerializable, ITlDeserializable<InputBotInlineMessageMediaAuto> {
        public static readonly byte[] Identifier = [134,199,128,51,];
        public bool InvertMedia {get;set;}
        public required string Message {get;set;}
        public List<MessageEntityBase>? Entities {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Entities is not null ? 2 : 0) | (ReplyMarkup is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(Message.TlSerialize());
            if(Entities is not null) bytes.AddRange(Entities.TlSerialize());
            if(ReplyMarkup is not null) bytes.AddRange(ReplyMarkup.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputBotInlineMessageMediaAuto TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var invertMediaLocal = (flagsLocal & 8) is 0 ? default : true ;
            var messageLocal =  des.As<string>().Read();
            var entitiesLocal = (flagsLocal & 2) is 0 ? default : des.Read<MessageEntityBase>() ;
            var replyMarkupLocal = (flagsLocal & 4) is 0 ? default : ReplyMarkupBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            InvertMedia = invertMediaLocal,
            Message = messageLocal,
            Entities = entitiesLocal,
            ReplyMarkup = replyMarkupLocal,
            };
        }
    }
    public class InputBotInlineMessageText : InputBotInlineMessageBase, ITlSerializable, ITlDeserializable<InputBotInlineMessageText> {
        public static readonly byte[] Identifier = [135,122,205,61,];
        public bool NoWebpage {get;set;}
        public bool InvertMedia {get;set;}
        public required string Message {get;set;}
        public List<MessageEntityBase>? Entities {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Entities is not null ? 2 : 0) | (ReplyMarkup is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(Message.TlSerialize());
            if(Entities is not null) bytes.AddRange(Entities.TlSerialize());
            if(ReplyMarkup is not null) bytes.AddRange(ReplyMarkup.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputBotInlineMessageText TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var noWebpageLocal = (flagsLocal & 1) is 0 ? default : true ;
            var invertMediaLocal = (flagsLocal & 8) is 0 ? default : true ;
            var messageLocal =  des.As<string>().Read();
            var entitiesLocal = (flagsLocal & 2) is 0 ? default : des.Read<MessageEntityBase>() ;
            var replyMarkupLocal = (flagsLocal & 4) is 0 ? default : ReplyMarkupBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            NoWebpage = noWebpageLocal,
            InvertMedia = invertMediaLocal,
            Message = messageLocal,
            Entities = entitiesLocal,
            ReplyMarkup = replyMarkupLocal,
            };
        }
    }
    public class InputBotInlineMessageMediaGeo : InputBotInlineMessageBase, ITlSerializable, ITlDeserializable<InputBotInlineMessageMediaGeo> {
        public static readonly byte[] Identifier = [133,154,146,150,];
        public required InputGeoPointBase GeoPoint {get;set;}
        public int? Heading {get;set;}
        public int? Period {get;set;}
        public int? ProximityNotificationRadius {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Heading is not null ? 1 : 0) | (Period is not null ? 2 : 0) | (ProximityNotificationRadius is not null ? 8 : 0) | (ReplyMarkup is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(GeoPoint.TlSerialize());
            if(Heading is not null) bytes.AddRange(Heading.TlSerialize());
            if(Period is not null) bytes.AddRange(Period.TlSerialize());
            if(ProximityNotificationRadius is not null) bytes.AddRange(ProximityNotificationRadius.TlSerialize());
            if(ReplyMarkup is not null) bytes.AddRange(ReplyMarkup.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputBotInlineMessageMediaGeo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var geoPointLocal =  InputGeoPointBase.TlDeserialize(des);
            var headingLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var periodLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            var proximityNotificationRadiusLocal = (flagsLocal & 8) is 0 ? default : des.As<int>().Read() ;
            var replyMarkupLocal = (flagsLocal & 4) is 0 ? default : ReplyMarkupBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            GeoPoint = geoPointLocal,
            Heading = headingLocal,
            Period = periodLocal,
            ProximityNotificationRadius = proximityNotificationRadiusLocal,
            ReplyMarkup = replyMarkupLocal,
            };
        }
    }
    public class InputBotInlineMessageMediaVenue : InputBotInlineMessageBase, ITlSerializable, ITlDeserializable<InputBotInlineMessageMediaVenue> {
        public static readonly byte[] Identifier = [17,191,123,65,];
        public required InputGeoPointBase GeoPoint {get;set;}
        public required string Title {get;set;}
        public required string Address {get;set;}
        public required string Provider {get;set;}
        public required string VenueId {get;set;}
        public required string VenueType {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (ReplyMarkup is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(GeoPoint.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(Address.TlSerialize());
            bytes.AddRange(Provider.TlSerialize());
            bytes.AddRange(VenueId.TlSerialize());
            bytes.AddRange(VenueType.TlSerialize());
            if(ReplyMarkup is not null) bytes.AddRange(ReplyMarkup.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputBotInlineMessageMediaVenue TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var geoPointLocal =  InputGeoPointBase.TlDeserialize(des);
            var titleLocal =  des.As<string>().Read();
            var addressLocal =  des.As<string>().Read();
            var providerLocal =  des.As<string>().Read();
            var venueIdLocal =  des.As<string>().Read();
            var venueTypeLocal =  des.As<string>().Read();
            var replyMarkupLocal = (flagsLocal & 4) is 0 ? default : ReplyMarkupBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            GeoPoint = geoPointLocal,
            Title = titleLocal,
            Address = addressLocal,
            Provider = providerLocal,
            VenueId = venueIdLocal,
            VenueType = venueTypeLocal,
            ReplyMarkup = replyMarkupLocal,
            };
        }
    }
    public class InputBotInlineMessageMediaContact : InputBotInlineMessageBase, ITlSerializable, ITlDeserializable<InputBotInlineMessageMediaContact> {
        public static readonly byte[] Identifier = [253,191,237,166,];
        public required string PhoneNumber {get;set;}
        public required string FirstName {get;set;}
        public required string LastName {get;set;}
        public required string Vcard {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (ReplyMarkup is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(PhoneNumber.TlSerialize());
            bytes.AddRange(FirstName.TlSerialize());
            bytes.AddRange(LastName.TlSerialize());
            bytes.AddRange(Vcard.TlSerialize());
            if(ReplyMarkup is not null) bytes.AddRange(ReplyMarkup.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputBotInlineMessageMediaContact TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var phoneNumberLocal =  des.As<string>().Read();
            var firstNameLocal =  des.As<string>().Read();
            var lastNameLocal =  des.As<string>().Read();
            var vcardLocal =  des.As<string>().Read();
            var replyMarkupLocal = (flagsLocal & 4) is 0 ? default : ReplyMarkupBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            PhoneNumber = phoneNumberLocal,
            FirstName = firstNameLocal,
            LastName = lastNameLocal,
            Vcard = vcardLocal,
            ReplyMarkup = replyMarkupLocal,
            };
        }
    }
    public class InputBotInlineMessageGame : InputBotInlineMessageBase, ITlSerializable, ITlDeserializable<InputBotInlineMessageGame> {
        public static readonly byte[] Identifier = [100,88,66,75,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (ReplyMarkup is not null ? 4 : 0) ).TlSerialize());
            if(ReplyMarkup is not null) bytes.AddRange(ReplyMarkup.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputBotInlineMessageGame TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var replyMarkupLocal = (flagsLocal & 4) is 0 ? default : ReplyMarkupBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            ReplyMarkup = replyMarkupLocal,
            };
        }
    }
    public class InputBotInlineMessageMediaInvoice : InputBotInlineMessageBase, ITlSerializable, ITlDeserializable<InputBotInlineMessageMediaInvoice> {
        public static readonly byte[] Identifier = [37,130,231,215,];
        public required string Title {get;set;}
        public required string Description {get;set;}
        public InputWebDocumentBase? Photo {get;set;}
        public required InvoiceBase Invoice {get;set;}
        public required byte[] Payload {get;set;}
        public required string Provider {get;set;}
        public required DataJSONBase ProviderData {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Photo is not null ? 1 : 0) | (ReplyMarkup is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(Description.TlSerialize());
            if(Photo is not null) bytes.AddRange(Photo.TlSerialize());
            bytes.AddRange(Invoice.TlSerialize());
            bytes.AddRange(Payload.TlSerialize());
            bytes.AddRange(Provider.TlSerialize());
            bytes.AddRange(ProviderData.TlSerialize());
            if(ReplyMarkup is not null) bytes.AddRange(ReplyMarkup.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputBotInlineMessageMediaInvoice TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var titleLocal =  des.As<string>().Read();
            var descriptionLocal =  des.As<string>().Read();
            var photoLocal = (flagsLocal & 1) is 0 ? default : InputWebDocumentBase.TlDeserialize(des) ;
            var invoiceLocal =  InvoiceBase.TlDeserialize(des);
            var payloadLocal =  des.As<byte[]>().Read();
            var providerLocal =  des.As<string>().Read();
            var providerDataLocal =  DataJSONBase.TlDeserialize(des);
            var replyMarkupLocal = (flagsLocal & 4) is 0 ? default : ReplyMarkupBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Title = titleLocal,
            Description = descriptionLocal,
            Photo = photoLocal,
            Invoice = invoiceLocal,
            Payload = payloadLocal,
            Provider = providerLocal,
            ProviderData = providerDataLocal,
            ReplyMarkup = replyMarkupLocal,
            };
        }
    }
    public class InputBotInlineMessageMediaWebPage : InputBotInlineMessageBase, ITlSerializable, ITlDeserializable<InputBotInlineMessageMediaWebPage> {
        public static readonly byte[] Identifier = [16,197,220,189,];
        public bool InvertMedia {get;set;}
        public bool ForceLargeMedia {get;set;}
        public bool ForceSmallMedia {get;set;}
        public bool Optional {get;set;}
        public required string Message {get;set;}
        public List<MessageEntityBase>? Entities {get;set;}
        public required string Url {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Entities is not null ? 2 : 0) | (ReplyMarkup is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(Message.TlSerialize());
            if(Entities is not null) bytes.AddRange(Entities.TlSerialize());
            bytes.AddRange(Url.TlSerialize());
            if(ReplyMarkup is not null) bytes.AddRange(ReplyMarkup.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputBotInlineMessageMediaWebPage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var invertMediaLocal = (flagsLocal & 8) is 0 ? default : true ;
            var forceLargeMediaLocal = (flagsLocal & 16) is 0 ? default : true ;
            var forceSmallMediaLocal = (flagsLocal & 32) is 0 ? default : true ;
            var optionalLocal = (flagsLocal & 64) is 0 ? default : true ;
            var messageLocal =  des.As<string>().Read();
            var entitiesLocal = (flagsLocal & 2) is 0 ? default : des.Read<MessageEntityBase>() ;
            var urlLocal =  des.As<string>().Read();
            var replyMarkupLocal = (flagsLocal & 4) is 0 ? default : ReplyMarkupBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            InvertMedia = invertMediaLocal,
            ForceLargeMedia = forceLargeMediaLocal,
            ForceSmallMedia = forceSmallMediaLocal,
            Optional = optionalLocal,
            Message = messageLocal,
            Entities = entitiesLocal,
            Url = urlLocal,
            ReplyMarkup = replyMarkupLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputBotInlineResultNs {
    public class InputBotInlineResult : InputBotInlineResultBase, ITlSerializable, ITlDeserializable<InputBotInlineResult> {
        public static readonly byte[] Identifier = [25,147,191,136,];
        private int Flags;
        public required string Type {get;set;}
        public string? Title {get;set;}
        public string? Description {get;set;}
        public string? Url {get;set;}
        public InputWebDocumentBase? Thumb {get;set;}
        public InputWebDocumentBase? Content {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Title is not null ? 2 : 0) | (Description is not null ? 4 : 0) | (Url is not null ? 8 : 0) | (Thumb is not null ? 16 : 0) | (Content is not null ? 32 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Type.TlSerialize());
            if(Title is not null) bytes.AddRange(Title.TlSerialize());
            if(Description is not null) bytes.AddRange(Description.TlSerialize());
            if(Url is not null) bytes.AddRange(Url.TlSerialize());
            if(Thumb is not null) bytes.AddRange(Thumb.TlSerialize());
            if(Content is not null) bytes.AddRange(Content.TlSerialize());
            bytes.AddRange(SendMessage.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputBotInlineResult TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var idLocal =  des.As<string>().Read();
            var typeLocal =  des.As<string>().Read();
            var titleLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var descriptionLocal = (flagsLocal & 4) is 0 ? default : des.As<string>().Read() ;
            var urlLocal = (flagsLocal & 8) is 0 ? default : des.As<string>().Read() ;
            var thumbLocal = (flagsLocal & 16) is 0 ? default : InputWebDocumentBase.TlDeserialize(des) ;
            var contentLocal = (flagsLocal & 32) is 0 ? default : InputWebDocumentBase.TlDeserialize(des) ;
            var sendMessageLocal =  InputBotInlineMessageBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Id = idLocal,
            Type = typeLocal,
            Title = titleLocal,
            Description = descriptionLocal,
            Url = urlLocal,
            Thumb = thumbLocal,
            Content = contentLocal,
            SendMessage = sendMessageLocal,
            };
        }
    }
    public class InputBotInlineResultPhoto : InputBotInlineResultBase, ITlSerializable, ITlDeserializable<InputBotInlineResultPhoto> {
        public static readonly byte[] Identifier = [167,100,216,168,];
        public required string Type {get;set;}
        public required InputPhotoBase Photo {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Type.TlSerialize());
            bytes.AddRange(Photo.TlSerialize());
            bytes.AddRange(SendMessage.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputBotInlineResultPhoto TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<string>().Read();
            var typeLocal =  des.As<string>().Read();
            var photoLocal =  InputPhotoBase.TlDeserialize(des);
            var sendMessageLocal =  InputBotInlineMessageBase.TlDeserialize(des);
            return new() {
            Id = idLocal,
            Type = typeLocal,
            Photo = photoLocal,
            SendMessage = sendMessageLocal,
            };
        }
    }
    public class InputBotInlineResultDocument : InputBotInlineResultBase, ITlSerializable, ITlDeserializable<InputBotInlineResultDocument> {
        public static readonly byte[] Identifier = [196,253,248,255,];
        private int Flags;
        public required string Type {get;set;}
        public string? Title {get;set;}
        public string? Description {get;set;}
        public required InputDocumentBase Document {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Title is not null ? 2 : 0) | (Description is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Type.TlSerialize());
            if(Title is not null) bytes.AddRange(Title.TlSerialize());
            if(Description is not null) bytes.AddRange(Description.TlSerialize());
            bytes.AddRange(Document.TlSerialize());
            bytes.AddRange(SendMessage.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputBotInlineResultDocument TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var idLocal =  des.As<string>().Read();
            var typeLocal =  des.As<string>().Read();
            var titleLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var descriptionLocal = (flagsLocal & 4) is 0 ? default : des.As<string>().Read() ;
            var documentLocal =  InputDocumentBase.TlDeserialize(des);
            var sendMessageLocal =  InputBotInlineMessageBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Id = idLocal,
            Type = typeLocal,
            Title = titleLocal,
            Description = descriptionLocal,
            Document = documentLocal,
            SendMessage = sendMessageLocal,
            };
        }
    }
    public class InputBotInlineResultGame : InputBotInlineResultBase, ITlSerializable, ITlDeserializable<InputBotInlineResultGame> {
        public static readonly byte[] Identifier = [242,23,164,79,];
        public required string ShortName {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(ShortName.TlSerialize());
            bytes.AddRange(SendMessage.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputBotInlineResultGame TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<string>().Read();
            var shortNameLocal =  des.As<string>().Read();
            var sendMessageLocal =  InputBotInlineMessageBase.TlDeserialize(des);
            return new() {
            Id = idLocal,
            ShortName = shortNameLocal,
            SendMessage = sendMessageLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.BotInlineMessageNs {
    public class BotInlineMessageMediaAuto : BotInlineMessageBase, ITlSerializable, ITlDeserializable<BotInlineMessageMediaAuto> {
        public static readonly byte[] Identifier = [16,248,76,118,];
        public bool InvertMedia {get;set;}
        public required string Message {get;set;}
        public List<MessageEntityBase>? Entities {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Entities is not null ? 2 : 0) | (ReplyMarkup is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(Message.TlSerialize());
            if(Entities is not null) bytes.AddRange(Entities.TlSerialize());
            if(ReplyMarkup is not null) bytes.AddRange(ReplyMarkup.TlSerialize());
            return bytes.ToArray();
        }

        public new static BotInlineMessageMediaAuto TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var invertMediaLocal = (flagsLocal & 8) is 0 ? default : true ;
            var messageLocal =  des.As<string>().Read();
            var entitiesLocal = (flagsLocal & 2) is 0 ? default : des.Read<MessageEntityBase>() ;
            var replyMarkupLocal = (flagsLocal & 4) is 0 ? default : ReplyMarkupBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            InvertMedia = invertMediaLocal,
            Message = messageLocal,
            Entities = entitiesLocal,
            ReplyMarkup = replyMarkupLocal,
            };
        }
    }
    public class BotInlineMessageText : BotInlineMessageBase, ITlSerializable, ITlDeserializable<BotInlineMessageText> {
        public static readonly byte[] Identifier = [226,101,127,140,];
        public bool NoWebpage {get;set;}
        public bool InvertMedia {get;set;}
        public required string Message {get;set;}
        public List<MessageEntityBase>? Entities {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Entities is not null ? 2 : 0) | (ReplyMarkup is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(Message.TlSerialize());
            if(Entities is not null) bytes.AddRange(Entities.TlSerialize());
            if(ReplyMarkup is not null) bytes.AddRange(ReplyMarkup.TlSerialize());
            return bytes.ToArray();
        }

        public new static BotInlineMessageText TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var noWebpageLocal = (flagsLocal & 1) is 0 ? default : true ;
            var invertMediaLocal = (flagsLocal & 8) is 0 ? default : true ;
            var messageLocal =  des.As<string>().Read();
            var entitiesLocal = (flagsLocal & 2) is 0 ? default : des.Read<MessageEntityBase>() ;
            var replyMarkupLocal = (flagsLocal & 4) is 0 ? default : ReplyMarkupBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            NoWebpage = noWebpageLocal,
            InvertMedia = invertMediaLocal,
            Message = messageLocal,
            Entities = entitiesLocal,
            ReplyMarkup = replyMarkupLocal,
            };
        }
    }
    public class BotInlineMessageMediaGeo : BotInlineMessageBase, ITlSerializable, ITlDeserializable<BotInlineMessageMediaGeo> {
        public static readonly byte[] Identifier = [253,70,24,5,];
        public required GeoPointBase Geo {get;set;}
        public int? Heading {get;set;}
        public int? Period {get;set;}
        public int? ProximityNotificationRadius {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Heading is not null ? 1 : 0) | (Period is not null ? 2 : 0) | (ProximityNotificationRadius is not null ? 8 : 0) | (ReplyMarkup is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(Geo.TlSerialize());
            if(Heading is not null) bytes.AddRange(Heading.TlSerialize());
            if(Period is not null) bytes.AddRange(Period.TlSerialize());
            if(ProximityNotificationRadius is not null) bytes.AddRange(ProximityNotificationRadius.TlSerialize());
            if(ReplyMarkup is not null) bytes.AddRange(ReplyMarkup.TlSerialize());
            return bytes.ToArray();
        }

        public new static BotInlineMessageMediaGeo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var geoLocal =  GeoPointBase.TlDeserialize(des);
            var headingLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var periodLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            var proximityNotificationRadiusLocal = (flagsLocal & 8) is 0 ? default : des.As<int>().Read() ;
            var replyMarkupLocal = (flagsLocal & 4) is 0 ? default : ReplyMarkupBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Geo = geoLocal,
            Heading = headingLocal,
            Period = periodLocal,
            ProximityNotificationRadius = proximityNotificationRadiusLocal,
            ReplyMarkup = replyMarkupLocal,
            };
        }
    }
    public class BotInlineMessageMediaVenue : BotInlineMessageBase, ITlSerializable, ITlDeserializable<BotInlineMessageMediaVenue> {
        public static readonly byte[] Identifier = [156,101,134,138,];
        public required GeoPointBase Geo {get;set;}
        public required string Title {get;set;}
        public required string Address {get;set;}
        public required string Provider {get;set;}
        public required string VenueId {get;set;}
        public required string VenueType {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (ReplyMarkup is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(Geo.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(Address.TlSerialize());
            bytes.AddRange(Provider.TlSerialize());
            bytes.AddRange(VenueId.TlSerialize());
            bytes.AddRange(VenueType.TlSerialize());
            if(ReplyMarkup is not null) bytes.AddRange(ReplyMarkup.TlSerialize());
            return bytes.ToArray();
        }

        public new static BotInlineMessageMediaVenue TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var geoLocal =  GeoPointBase.TlDeserialize(des);
            var titleLocal =  des.As<string>().Read();
            var addressLocal =  des.As<string>().Read();
            var providerLocal =  des.As<string>().Read();
            var venueIdLocal =  des.As<string>().Read();
            var venueTypeLocal =  des.As<string>().Read();
            var replyMarkupLocal = (flagsLocal & 4) is 0 ? default : ReplyMarkupBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Geo = geoLocal,
            Title = titleLocal,
            Address = addressLocal,
            Provider = providerLocal,
            VenueId = venueIdLocal,
            VenueType = venueTypeLocal,
            ReplyMarkup = replyMarkupLocal,
            };
        }
    }
    public class BotInlineMessageMediaContact : BotInlineMessageBase, ITlSerializable, ITlDeserializable<BotInlineMessageMediaContact> {
        public static readonly byte[] Identifier = [194,205,209,24,];
        public required string PhoneNumber {get;set;}
        public required string FirstName {get;set;}
        public required string LastName {get;set;}
        public required string Vcard {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (ReplyMarkup is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(PhoneNumber.TlSerialize());
            bytes.AddRange(FirstName.TlSerialize());
            bytes.AddRange(LastName.TlSerialize());
            bytes.AddRange(Vcard.TlSerialize());
            if(ReplyMarkup is not null) bytes.AddRange(ReplyMarkup.TlSerialize());
            return bytes.ToArray();
        }

        public new static BotInlineMessageMediaContact TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var phoneNumberLocal =  des.As<string>().Read();
            var firstNameLocal =  des.As<string>().Read();
            var lastNameLocal =  des.As<string>().Read();
            var vcardLocal =  des.As<string>().Read();
            var replyMarkupLocal = (flagsLocal & 4) is 0 ? default : ReplyMarkupBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            PhoneNumber = phoneNumberLocal,
            FirstName = firstNameLocal,
            LastName = lastNameLocal,
            Vcard = vcardLocal,
            ReplyMarkup = replyMarkupLocal,
            };
        }
    }
    public class BotInlineMessageMediaInvoice : BotInlineMessageBase, ITlSerializable, ITlDeserializable<BotInlineMessageMediaInvoice> {
        public static readonly byte[] Identifier = [9,155,74,53,];
        public bool ShippingAddressRequested {get;set;}
        public bool Test {get;set;}
        public required string Title {get;set;}
        public required string Description {get;set;}
        public WebDocumentBase? Photo {get;set;}
        public required string Currency {get;set;}
        public required long TotalAmount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Photo is not null ? 1 : 0) | (ReplyMarkup is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(Description.TlSerialize());
            if(Photo is not null) bytes.AddRange(Photo.TlSerialize());
            bytes.AddRange(Currency.TlSerialize());
            bytes.AddRange(TotalAmount.TlSerialize());
            if(ReplyMarkup is not null) bytes.AddRange(ReplyMarkup.TlSerialize());
            return bytes.ToArray();
        }

        public new static BotInlineMessageMediaInvoice TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var shippingAddressRequestedLocal = (flagsLocal & 2) is 0 ? default : true ;
            var testLocal = (flagsLocal & 8) is 0 ? default : true ;
            var titleLocal =  des.As<string>().Read();
            var descriptionLocal =  des.As<string>().Read();
            var photoLocal = (flagsLocal & 1) is 0 ? default : WebDocumentBase.TlDeserialize(des) ;
            var currencyLocal =  des.As<string>().Read();
            var totalAmountLocal =  des.As<long>().Read();
            var replyMarkupLocal = (flagsLocal & 4) is 0 ? default : ReplyMarkupBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            ShippingAddressRequested = shippingAddressRequestedLocal,
            Test = testLocal,
            Title = titleLocal,
            Description = descriptionLocal,
            Photo = photoLocal,
            Currency = currencyLocal,
            TotalAmount = totalAmountLocal,
            ReplyMarkup = replyMarkupLocal,
            };
        }
    }
    public class BotInlineMessageMediaWebPage : BotInlineMessageBase, ITlSerializable, ITlDeserializable<BotInlineMessageMediaWebPage> {
        public static readonly byte[] Identifier = [166,217,154,128,];
        public bool InvertMedia {get;set;}
        public bool ForceLargeMedia {get;set;}
        public bool ForceSmallMedia {get;set;}
        public bool Manual {get;set;}
        public bool Safe {get;set;}
        public required string Message {get;set;}
        public List<MessageEntityBase>? Entities {get;set;}
        public required string Url {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Entities is not null ? 2 : 0) | (ReplyMarkup is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(Message.TlSerialize());
            if(Entities is not null) bytes.AddRange(Entities.TlSerialize());
            bytes.AddRange(Url.TlSerialize());
            if(ReplyMarkup is not null) bytes.AddRange(ReplyMarkup.TlSerialize());
            return bytes.ToArray();
        }

        public new static BotInlineMessageMediaWebPage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var invertMediaLocal = (flagsLocal & 8) is 0 ? default : true ;
            var forceLargeMediaLocal = (flagsLocal & 16) is 0 ? default : true ;
            var forceSmallMediaLocal = (flagsLocal & 32) is 0 ? default : true ;
            var manualLocal = (flagsLocal & 128) is 0 ? default : true ;
            var safeLocal = (flagsLocal & 256) is 0 ? default : true ;
            var messageLocal =  des.As<string>().Read();
            var entitiesLocal = (flagsLocal & 2) is 0 ? default : des.Read<MessageEntityBase>() ;
            var urlLocal =  des.As<string>().Read();
            var replyMarkupLocal = (flagsLocal & 4) is 0 ? default : ReplyMarkupBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            InvertMedia = invertMediaLocal,
            ForceLargeMedia = forceLargeMediaLocal,
            ForceSmallMedia = forceSmallMediaLocal,
            Manual = manualLocal,
            Safe = safeLocal,
            Message = messageLocal,
            Entities = entitiesLocal,
            Url = urlLocal,
            ReplyMarkup = replyMarkupLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.BotInlineResultNs {
    public class BotInlineResult : BotInlineResultBase, ITlSerializable, ITlDeserializable<BotInlineResult> {
        public static readonly byte[] Identifier = [58,95,150,17,];
        public string? Url {get;set;}
        public WebDocumentBase? Thumb {get;set;}
        public WebDocumentBase? Content {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Title is not null ? 2 : 0) | (Description is not null ? 4 : 0) | (Url is not null ? 8 : 0) | (Thumb is not null ? 16 : 0) | (Content is not null ? 32 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Type.TlSerialize());
            if(Title is not null) bytes.AddRange(Title.TlSerialize());
            if(Description is not null) bytes.AddRange(Description.TlSerialize());
            if(Url is not null) bytes.AddRange(Url.TlSerialize());
            if(Thumb is not null) bytes.AddRange(Thumb.TlSerialize());
            if(Content is not null) bytes.AddRange(Content.TlSerialize());
            bytes.AddRange(SendMessage.TlSerialize());
            return bytes.ToArray();
        }

        public new static BotInlineResult TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var idLocal =  des.As<string>().Read();
            var typeLocal =  des.As<string>().Read();
            var titleLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var descriptionLocal = (flagsLocal & 4) is 0 ? default : des.As<string>().Read() ;
            var urlLocal = (flagsLocal & 8) is 0 ? default : des.As<string>().Read() ;
            var thumbLocal = (flagsLocal & 16) is 0 ? default : WebDocumentBase.TlDeserialize(des) ;
            var contentLocal = (flagsLocal & 32) is 0 ? default : WebDocumentBase.TlDeserialize(des) ;
            var sendMessageLocal =  BotInlineMessageBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Id = idLocal,
            Type = typeLocal,
            Title = titleLocal,
            Description = descriptionLocal,
            Url = urlLocal,
            Thumb = thumbLocal,
            Content = contentLocal,
            SendMessage = sendMessageLocal,
            };
        }
    }
    public class BotInlineMediaResult : BotInlineResultBase, ITlSerializable, ITlDeserializable<BotInlineMediaResult> {
        public static readonly byte[] Identifier = [11,148,219,23,];
        public PhotoBase? Photo {get;set;}
        public DocumentBase? Document {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Photo is not null ? 1 : 0) | (Document is not null ? 2 : 0) | (Title is not null ? 4 : 0) | (Description is not null ? 8 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Type.TlSerialize());
            if(Photo is not null) bytes.AddRange(Photo.TlSerialize());
            if(Document is not null) bytes.AddRange(Document.TlSerialize());
            if(Title is not null) bytes.AddRange(Title.TlSerialize());
            if(Description is not null) bytes.AddRange(Description.TlSerialize());
            bytes.AddRange(SendMessage.TlSerialize());
            return bytes.ToArray();
        }

        public new static BotInlineMediaResult TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var idLocal =  des.As<string>().Read();
            var typeLocal =  des.As<string>().Read();
            var photoLocal = (flagsLocal & 1) is 0 ? default : PhotoBase.TlDeserialize(des) ;
            var documentLocal = (flagsLocal & 2) is 0 ? default : DocumentBase.TlDeserialize(des) ;
            var titleLocal = (flagsLocal & 4) is 0 ? default : des.As<string>().Read() ;
            var descriptionLocal = (flagsLocal & 8) is 0 ? default : des.As<string>().Read() ;
            var sendMessageLocal =  BotInlineMessageBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Id = idLocal,
            Type = typeLocal,
            Photo = photoLocal,
            Document = documentLocal,
            Title = titleLocal,
            Description = descriptionLocal,
            SendMessage = sendMessageLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesBotResultsNs {
    public class MessagesBotResults : MessagesBotResultsBase, ITlSerializable, ITlDeserializable<MessagesBotResults> {
        public static readonly byte[] Identifier = [246,242,33,224,];
        private int Flags;
        public bool Gallery {get;set;}
        public required long QueryId {get;set;}
        public string? NextOffset {get;set;}
        public InlineBotSwitchPMBase? SwitchPm {get;set;}
        public InlineBotWebViewBase? SwitchWebview {get;set;}
        public required List<BotInlineResultBase> Results {get;set;}
        public required int CacheTime {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (NextOffset is not null ? 2 : 0) | (SwitchPm is not null ? 4 : 0) | (SwitchWebview is not null ? 8 : 0) ).TlSerialize());
            bytes.AddRange(QueryId.TlSerialize());
            if(NextOffset is not null) bytes.AddRange(NextOffset.TlSerialize());
            if(SwitchPm is not null) bytes.AddRange(SwitchPm.TlSerialize());
            if(SwitchWebview is not null) bytes.AddRange(SwitchWebview.TlSerialize());
            bytes.AddRange(Results.TlSerialize());
            bytes.AddRange(CacheTime.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesBotResults TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var galleryLocal = (flagsLocal & 1) is 0 ? default : true ;
            var queryIdLocal =  des.As<long>().Read();
            var nextOffsetLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var switchPmLocal = (flagsLocal & 4) is 0 ? default : InlineBotSwitchPMBase.TlDeserialize(des) ;
            var switchWebviewLocal = (flagsLocal & 8) is 0 ? default : InlineBotWebViewBase.TlDeserialize(des) ;
            var resultsLocal =  des.Read<BotInlineResultBase>();
            var cacheTimeLocal =  des.As<int>().Read();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Flags = flagsLocal,
            Gallery = galleryLocal,
            QueryId = queryIdLocal,
            NextOffset = nextOffsetLocal,
            SwitchPm = switchPmLocal,
            SwitchWebview = switchWebviewLocal,
            Results = resultsLocal,
            CacheTime = cacheTimeLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ExportedMessageLinkNs {
    public class ExportedMessageLink : ExportedMessageLinkBase, ITlSerializable, ITlDeserializable<ExportedMessageLink> {
        public static readonly byte[] Identifier = [244,26,171,93,];
        public required string Link {get;set;}
        public required string Html {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Link.TlSerialize());
            bytes.AddRange(Html.TlSerialize());
            return bytes.ToArray();
        }

        public new static ExportedMessageLink TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var linkLocal =  des.As<string>().Read();
            var htmlLocal =  des.As<string>().Read();
            return new() {
            Link = linkLocal,
            Html = htmlLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessageFwdHeaderNs {
    public class MessageFwdHeader : MessageFwdHeaderBase, ITlSerializable, ITlDeserializable<MessageFwdHeader> {
        public static readonly byte[] Identifier = [187,244,77,78,];
        private int Flags;
        public bool Imported {get;set;}
        public bool SavedOut {get;set;}
        public PeerBase? FromId {get;set;}
        public string? FromName {get;set;}
        public required int Date {get;set;}
        public int? ChannelPost {get;set;}
        public string? PostAuthor {get;set;}
        public PeerBase? SavedFromPeer {get;set;}
        public int? SavedFromMsgId {get;set;}
        public PeerBase? SavedFromId {get;set;}
        public string? SavedFromName {get;set;}
        public int? SavedDate {get;set;}
        public string? PsaType {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (FromId is not null ? 1 : 0) | (FromName is not null ? 32 : 0) | (ChannelPost is not null ? 4 : 0) | (PostAuthor is not null ? 8 : 0) | (SavedFromPeer is not null ? 16 : 0) | (SavedFromMsgId is not null ? 16 : 0) | (SavedFromId is not null ? 256 : 0) | (SavedFromName is not null ? 512 : 0) | (SavedDate is not null ? 1024 : 0) | (PsaType is not null ? 64 : 0) ).TlSerialize());
            if(FromId is not null) bytes.AddRange(FromId.TlSerialize());
            if(FromName is not null) bytes.AddRange(FromName.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            if(ChannelPost is not null) bytes.AddRange(ChannelPost.TlSerialize());
            if(PostAuthor is not null) bytes.AddRange(PostAuthor.TlSerialize());
            if(SavedFromPeer is not null) bytes.AddRange(SavedFromPeer.TlSerialize());
            if(SavedFromMsgId is not null) bytes.AddRange(SavedFromMsgId.TlSerialize());
            if(SavedFromId is not null) bytes.AddRange(SavedFromId.TlSerialize());
            if(SavedFromName is not null) bytes.AddRange(SavedFromName.TlSerialize());
            if(SavedDate is not null) bytes.AddRange(SavedDate.TlSerialize());
            if(PsaType is not null) bytes.AddRange(PsaType.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageFwdHeader TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var importedLocal = (flagsLocal & 128) is 0 ? default : true ;
            var savedOutLocal = (flagsLocal & 2048) is 0 ? default : true ;
            var fromIdLocal = (flagsLocal & 1) is 0 ? default : PeerBase.TlDeserialize(des) ;
            var fromNameLocal = (flagsLocal & 32) is 0 ? default : des.As<string>().Read() ;
            var dateLocal =  des.As<int>().Read();
            var channelPostLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            var postAuthorLocal = (flagsLocal & 8) is 0 ? default : des.As<string>().Read() ;
            var savedFromPeerLocal = (flagsLocal & 16) is 0 ? default : PeerBase.TlDeserialize(des) ;
            var savedFromMsgIdLocal = (flagsLocal & 16) is 0 ? default : des.As<int>().Read() ;
            var savedFromIdLocal = (flagsLocal & 256) is 0 ? default : PeerBase.TlDeserialize(des) ;
            var savedFromNameLocal = (flagsLocal & 512) is 0 ? default : des.As<string>().Read() ;
            var savedDateLocal = (flagsLocal & 1024) is 0 ? default : des.As<int>().Read() ;
            var psaTypeLocal = (flagsLocal & 64) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            Imported = importedLocal,
            SavedOut = savedOutLocal,
            FromId = fromIdLocal,
            FromName = fromNameLocal,
            Date = dateLocal,
            ChannelPost = channelPostLocal,
            PostAuthor = postAuthorLocal,
            SavedFromPeer = savedFromPeerLocal,
            SavedFromMsgId = savedFromMsgIdLocal,
            SavedFromId = savedFromIdLocal,
            SavedFromName = savedFromNameLocal,
            SavedDate = savedDateLocal,
            PsaType = psaTypeLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AuthCodeTypeNs {
    public class AuthCodeTypeSms : AuthCodeTypeBase, ITlSerializable, ITlDeserializable<AuthCodeTypeSms> {
        public static readonly byte[] Identifier = [140,21,163,114,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static AuthCodeTypeSms TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class AuthCodeTypeCall : AuthCodeTypeBase, ITlSerializable, ITlDeserializable<AuthCodeTypeCall> {
        public static readonly byte[] Identifier = [227,211,28,116,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static AuthCodeTypeCall TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class AuthCodeTypeFlashCall : AuthCodeTypeBase, ITlSerializable, ITlDeserializable<AuthCodeTypeFlashCall> {
        public static readonly byte[] Identifier = [251,206,108,34,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static AuthCodeTypeFlashCall TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class AuthCodeTypeMissedCall : AuthCodeTypeBase, ITlSerializable, ITlDeserializable<AuthCodeTypeMissedCall> {
        public static readonly byte[] Identifier = [238,214,26,214,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static AuthCodeTypeMissedCall TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class AuthCodeTypeFragmentSms : AuthCodeTypeBase, ITlSerializable, ITlDeserializable<AuthCodeTypeFragmentSms> {
        public static readonly byte[] Identifier = [140,153,237,6,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static AuthCodeTypeFragmentSms TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AuthSentCodeTypeNs {
    public class AuthSentCodeTypeApp : AuthSentCodeTypeBase, ITlSerializable, ITlDeserializable<AuthSentCodeTypeApp> {
        public static readonly byte[] Identifier = [134,89,187,61,];
        public required int Length {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static AuthSentCodeTypeApp TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var lengthLocal =  des.As<int>().Read();
            return new() {
            Length = lengthLocal,
            };
        }
    }
    public class AuthSentCodeTypeSms : AuthSentCodeTypeBase, ITlSerializable, ITlDeserializable<AuthSentCodeTypeSms> {
        public static readonly byte[] Identifier = [162,187,0,192,];
        public required int Length {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static AuthSentCodeTypeSms TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var lengthLocal =  des.As<int>().Read();
            return new() {
            Length = lengthLocal,
            };
        }
    }
    public class AuthSentCodeTypeCall : AuthSentCodeTypeBase, ITlSerializable, ITlDeserializable<AuthSentCodeTypeCall> {
        public static readonly byte[] Identifier = [167,229,83,83,];
        public required int Length {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static AuthSentCodeTypeCall TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var lengthLocal =  des.As<int>().Read();
            return new() {
            Length = lengthLocal,
            };
        }
    }
    public class AuthSentCodeTypeFlashCall : AuthSentCodeTypeBase, ITlSerializable, ITlDeserializable<AuthSentCodeTypeFlashCall> {
        public static readonly byte[] Identifier = [217,198,3,171,];
        public required string Pattern {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Pattern.TlSerialize());
            return bytes.ToArray();
        }

        public new static AuthSentCodeTypeFlashCall TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var patternLocal =  des.As<string>().Read();
            return new() {
            Pattern = patternLocal,
            };
        }
    }
    public class AuthSentCodeTypeMissedCall : AuthSentCodeTypeBase, ITlSerializable, ITlDeserializable<AuthSentCodeTypeMissedCall> {
        public static readonly byte[] Identifier = [132,100,0,130,];
        public required string Prefix {get;set;}
        public required int Length {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Prefix.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static AuthSentCodeTypeMissedCall TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var prefixLocal =  des.As<string>().Read();
            var lengthLocal =  des.As<int>().Read();
            return new() {
            Prefix = prefixLocal,
            Length = lengthLocal,
            };
        }
    }
    public class AuthSentCodeTypeEmailCode : AuthSentCodeTypeBase, ITlSerializable, ITlDeserializable<AuthSentCodeTypeEmailCode> {
        public static readonly byte[] Identifier = [155,245,80,244,];
        private int Flags;
        public bool AppleSigninAllowed {get;set;}
        public bool GoogleSigninAllowed {get;set;}
        public required string EmailPattern {get;set;}
        public required int Length {get;set;}
        public int? ResetAvailablePeriod {get;set;}
        public int? ResetPendingDate {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (ResetAvailablePeriod is not null ? 8 : 0) | (ResetPendingDate is not null ? 16 : 0) ).TlSerialize());
            bytes.AddRange(EmailPattern.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            if(ResetAvailablePeriod is not null) bytes.AddRange(ResetAvailablePeriod.TlSerialize());
            if(ResetPendingDate is not null) bytes.AddRange(ResetPendingDate.TlSerialize());
            return bytes.ToArray();
        }

        public new static AuthSentCodeTypeEmailCode TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var appleSigninAllowedLocal = (flagsLocal & 1) is 0 ? default : true ;
            var googleSigninAllowedLocal = (flagsLocal & 2) is 0 ? default : true ;
            var emailPatternLocal =  des.As<string>().Read();
            var lengthLocal =  des.As<int>().Read();
            var resetAvailablePeriodLocal = (flagsLocal & 8) is 0 ? default : des.As<int>().Read() ;
            var resetPendingDateLocal = (flagsLocal & 16) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            AppleSigninAllowed = appleSigninAllowedLocal,
            GoogleSigninAllowed = googleSigninAllowedLocal,
            EmailPattern = emailPatternLocal,
            Length = lengthLocal,
            ResetAvailablePeriod = resetAvailablePeriodLocal,
            ResetPendingDate = resetPendingDateLocal,
            };
        }
    }
    public class AuthSentCodeTypeSetUpEmailRequired : AuthSentCodeTypeBase, ITlSerializable, ITlDeserializable<AuthSentCodeTypeSetUpEmailRequired> {
        public static readonly byte[] Identifier = [234,29,73,165,];
        private int Flags;
        public bool AppleSigninAllowed {get;set;}
        public bool GoogleSigninAllowed {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            return bytes.ToArray();
        }

        public new static AuthSentCodeTypeSetUpEmailRequired TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var appleSigninAllowedLocal = (flagsLocal & 1) is 0 ? default : true ;
            var googleSigninAllowedLocal = (flagsLocal & 2) is 0 ? default : true ;
            return new() {
            Flags = flagsLocal,
            AppleSigninAllowed = appleSigninAllowedLocal,
            GoogleSigninAllowed = googleSigninAllowedLocal,
            };
        }
    }
    public class AuthSentCodeTypeFragmentSms : AuthSentCodeTypeBase, ITlSerializable, ITlDeserializable<AuthSentCodeTypeFragmentSms> {
        public static readonly byte[] Identifier = [57,92,86,217,];
        public required string Url {get;set;}
        public required int Length {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static AuthSentCodeTypeFragmentSms TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlLocal =  des.As<string>().Read();
            var lengthLocal =  des.As<int>().Read();
            return new() {
            Url = urlLocal,
            Length = lengthLocal,
            };
        }
    }
    public class AuthSentCodeTypeFirebaseSms : AuthSentCodeTypeBase, ITlSerializable, ITlDeserializable<AuthSentCodeTypeFirebaseSms> {
        public static readonly byte[] Identifier = [50,20,123,229,];
        private int Flags;
        public byte[]? Nonce {get;set;}
        public string? Receipt {get;set;}
        public int? PushTimeout {get;set;}
        public required int Length {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Nonce is not null ? 1 : 0) | (Receipt is not null ? 2 : 0) | (PushTimeout is not null ? 2 : 0) ).TlSerialize());
            if(Nonce is not null) bytes.AddRange(Nonce.TlSerialize());
            if(Receipt is not null) bytes.AddRange(Receipt.TlSerialize());
            if(PushTimeout is not null) bytes.AddRange(PushTimeout.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static AuthSentCodeTypeFirebaseSms TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var nonceLocal = (flagsLocal & 1) is 0 ? default : des.As<byte[]>().Read() ;
            var receiptLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var pushTimeoutLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            var lengthLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            Nonce = nonceLocal,
            Receipt = receiptLocal,
            PushTimeout = pushTimeoutLocal,
            Length = lengthLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesBotCallbackAnswerNs {
    public class MessagesBotCallbackAnswer : MessagesBotCallbackAnswerBase, ITlSerializable, ITlDeserializable<MessagesBotCallbackAnswer> {
        public static readonly byte[] Identifier = [164,94,88,54,];
        private int Flags;
        public bool Alert {get;set;}
        public bool HasUrl {get;set;}
        public bool NativeUi {get;set;}
        public string? Message {get;set;}
        public string? Url {get;set;}
        public required int CacheTime {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Message is not null ? 1 : 0) | (Url is not null ? 4 : 0) ).TlSerialize());
            if(Message is not null) bytes.AddRange(Message.TlSerialize());
            if(Url is not null) bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(CacheTime.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesBotCallbackAnswer TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var alertLocal = (flagsLocal & 2) is 0 ? default : true ;
            var hasUrlLocal = (flagsLocal & 8) is 0 ? default : true ;
            var nativeUiLocal = (flagsLocal & 16) is 0 ? default : true ;
            var messageLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var urlLocal = (flagsLocal & 4) is 0 ? default : des.As<string>().Read() ;
            var cacheTimeLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            Alert = alertLocal,
            HasUrl = hasUrlLocal,
            NativeUi = nativeUiLocal,
            Message = messageLocal,
            Url = urlLocal,
            CacheTime = cacheTimeLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesMessageEditDataNs {
    public class MessagesMessageEditData : MessagesMessageEditDataBase, ITlSerializable, ITlDeserializable<MessagesMessageEditData> {
        public static readonly byte[] Identifier = [230,221,181,38,];
        private int Flags;
        public bool Caption {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesMessageEditData TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var captionLocal = (flagsLocal & 1) is 0 ? default : true ;
            return new() {
            Flags = flagsLocal,
            Caption = captionLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputBotInlineMessageIDNs {
    public class InputBotInlineMessageID : InputBotInlineMessageIDBase, ITlSerializable, ITlDeserializable<InputBotInlineMessageID> {
        public static readonly byte[] Identifier = [137,61,12,137,];
        public required long Id {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(DcId.TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputBotInlineMessageID TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var dcIdLocal =  des.As<int>().Read();
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            return new() {
            DcId = dcIdLocal,
            Id = idLocal,
            AccessHash = accessHashLocal,
            };
        }
    }
    public class InputBotInlineMessageID64 : InputBotInlineMessageIDBase, ITlSerializable, ITlDeserializable<InputBotInlineMessageID64> {
        public static readonly byte[] Identifier = [215,21,217,182,];
        public required long OwnerId {get;set;}
        public required int Id {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(DcId.TlSerialize());
            bytes.AddRange(OwnerId.TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputBotInlineMessageID64 TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var dcIdLocal =  des.As<int>().Read();
            var ownerIdLocal =  des.As<long>().Read();
            var idLocal =  des.As<int>().Read();
            var accessHashLocal =  des.As<long>().Read();
            return new() {
            DcId = dcIdLocal,
            OwnerId = ownerIdLocal,
            Id = idLocal,
            AccessHash = accessHashLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InlineBotSwitchPMNs {
    public class InlineBotSwitchPM : InlineBotSwitchPMBase, ITlSerializable, ITlDeserializable<InlineBotSwitchPM> {
        public static readonly byte[] Identifier = [159,98,32,60,];
        public required string Text {get;set;}
        public required string StartParam {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(StartParam.TlSerialize());
            return bytes.ToArray();
        }

        public new static InlineBotSwitchPM TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  des.As<string>().Read();
            var startParamLocal =  des.As<string>().Read();
            return new() {
            Text = textLocal,
            StartParam = startParamLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesPeerDialogsNs {
    public class MessagesPeerDialogs : MessagesPeerDialogsBase, ITlSerializable, ITlDeserializable<MessagesPeerDialogs> {
        public static readonly byte[] Identifier = [84,195,113,51,];
        public required List<DialogBase> Dialogs {get;set;}
        public required List<MessageBase> Messages {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public required UpdatesStateBase State {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Dialogs.TlSerialize());
            bytes.AddRange(Messages.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            bytes.AddRange(State.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesPeerDialogs TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var dialogsLocal =  des.Read<DialogBase>();
            var messagesLocal =  des.Read<MessageBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            var stateLocal =  UpdatesStateBase.TlDeserialize(des);
            return new() {
            Dialogs = dialogsLocal,
            Messages = messagesLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            State = stateLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.TopPeerNs {
    public class TopPeer : TopPeerBase, ITlSerializable, ITlDeserializable<TopPeer> {
        public static readonly byte[] Identifier = [91,192,205,237,];
        public required PeerBase Peer {get;set;}
        public required double Rating {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(Rating.TlSerialize());
            return bytes.ToArray();
        }

        public new static TopPeer TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var ratingLocal =  des.As<double>().Read();
            return new() {
            Peer = peerLocal,
            Rating = ratingLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.TopPeerCategoryNs {
    public class TopPeerCategoryBotsPM : TopPeerCategoryBase, ITlSerializable, ITlDeserializable<TopPeerCategoryBotsPM> {
        public static readonly byte[] Identifier = [91,27,102,171,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static TopPeerCategoryBotsPM TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class TopPeerCategoryBotsInline : TopPeerCategoryBase, ITlSerializable, ITlDeserializable<TopPeerCategoryBotsInline> {
        public static readonly byte[] Identifier = [226,119,134,20,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static TopPeerCategoryBotsInline TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class TopPeerCategoryCorrespondents : TopPeerCategoryBase, ITlSerializable, ITlDeserializable<TopPeerCategoryCorrespondents> {
        public static readonly byte[] Identifier = [237,183,55,6,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static TopPeerCategoryCorrespondents TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class TopPeerCategoryGroups : TopPeerCategoryBase, ITlSerializable, ITlDeserializable<TopPeerCategoryGroups> {
        public static readonly byte[] Identifier = [74,161,23,189,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static TopPeerCategoryGroups TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class TopPeerCategoryChannels : TopPeerCategoryBase, ITlSerializable, ITlDeserializable<TopPeerCategoryChannels> {
        public static readonly byte[] Identifier = [40,150,29,22,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static TopPeerCategoryChannels TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class TopPeerCategoryPhoneCalls : TopPeerCategoryBase, ITlSerializable, ITlDeserializable<TopPeerCategoryPhoneCalls> {
        public static readonly byte[] Identifier = [140,167,118,30,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static TopPeerCategoryPhoneCalls TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class TopPeerCategoryForwardUsers : TopPeerCategoryBase, ITlSerializable, ITlDeserializable<TopPeerCategoryForwardUsers> {
        public static readonly byte[] Identifier = [169,108,64,168,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static TopPeerCategoryForwardUsers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class TopPeerCategoryForwardChats : TopPeerCategoryBase, ITlSerializable, ITlDeserializable<TopPeerCategoryForwardChats> {
        public static readonly byte[] Identifier = [240,192,238,251,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static TopPeerCategoryForwardChats TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.TopPeerCategoryPeersNs {
    public class TopPeerCategoryPeers : TopPeerCategoryPeersBase, ITlSerializable, ITlDeserializable<TopPeerCategoryPeers> {
        public static readonly byte[] Identifier = [145,66,131,251,];
        public required TopPeerCategoryBase Category {get;set;}
        public required int Count {get;set;}
        public required List<TopPeerBase> Peers {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Category.TlSerialize());
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(Peers.TlSerialize());
            return bytes.ToArray();
        }

        public new static TopPeerCategoryPeers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var categoryLocal =  TopPeerCategoryBase.TlDeserialize(des);
            var countLocal =  des.As<int>().Read();
            var peersLocal =  des.Read<TopPeerBase>();
            return new() {
            Category = categoryLocal,
            Count = countLocal,
            Peers = peersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ContactsTopPeersNs {
    public class ContactsTopPeersNotModified : ContactsTopPeersBase, ITlSerializable, ITlDeserializable<ContactsTopPeersNotModified> {
        public static readonly byte[] Identifier = [245,110,38,222,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static ContactsTopPeersNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class ContactsTopPeers : ContactsTopPeersBase, ITlSerializable, ITlDeserializable<ContactsTopPeers> {
        public static readonly byte[] Identifier = [168,114,183,112,];
        public required List<TopPeerCategoryPeersBase> Categories {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Categories.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static ContactsTopPeers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var categoriesLocal =  des.Read<TopPeerCategoryPeersBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Categories = categoriesLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }
    public class ContactsTopPeersDisabled : ContactsTopPeersBase, ITlSerializable, ITlDeserializable<ContactsTopPeersDisabled> {
        public static readonly byte[] Identifier = [157,147,44,181,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static ContactsTopPeersDisabled TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.DraftMessageNs {
    public class DraftMessageEmpty : DraftMessageBase, ITlSerializable, ITlDeserializable<DraftMessageEmpty> {
        public static readonly byte[] Identifier = [26,132,12,27,];
        public int? Date {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Date is not null ? 1 : 0) ).TlSerialize());
            if(Date is not null) bytes.AddRange(Date.TlSerialize());
            return bytes.ToArray();
        }

        public new static DraftMessageEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var dateLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Date = dateLocal,
            };
        }
    }
    public class DraftMessage : DraftMessageBase, ITlSerializable, ITlDeserializable<DraftMessage> {
        public static readonly byte[] Identifier = [239,247,204,63,];
        public bool NoWebpage {get;set;}
        public bool InvertMedia {get;set;}
        public InputReplyToBase? ReplyTo {get;set;}
        public required string Message {get;set;}
        public List<MessageEntityBase>? Entities {get;set;}
        public InputMediaBase? Media {get;set;}
        public required int Date {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (ReplyTo is not null ? 16 : 0) | (Entities is not null ? 8 : 0) | (Media is not null ? 32 : 0) ).TlSerialize());
            if(ReplyTo is not null) bytes.AddRange(ReplyTo.TlSerialize());
            bytes.AddRange(Message.TlSerialize());
            if(Entities is not null) bytes.AddRange(Entities.TlSerialize());
            if(Media is not null) bytes.AddRange(Media.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            return bytes.ToArray();
        }

        public new static DraftMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var noWebpageLocal = (flagsLocal & 2) is 0 ? default : true ;
            var invertMediaLocal = (flagsLocal & 64) is 0 ? default : true ;
            var replyToLocal = (flagsLocal & 16) is 0 ? default : InputReplyToBase.TlDeserialize(des) ;
            var messageLocal =  des.As<string>().Read();
            var entitiesLocal = (flagsLocal & 8) is 0 ? default : des.Read<MessageEntityBase>() ;
            var mediaLocal = (flagsLocal & 32) is 0 ? default : InputMediaBase.TlDeserialize(des) ;
            var dateLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            NoWebpage = noWebpageLocal,
            InvertMedia = invertMediaLocal,
            ReplyTo = replyToLocal,
            Message = messageLocal,
            Entities = entitiesLocal,
            Media = mediaLocal,
            Date = dateLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesFeaturedStickersNs {
    public class MessagesFeaturedStickersNotModified : MessagesFeaturedStickersBase, ITlSerializable, ITlDeserializable<MessagesFeaturedStickersNotModified> {
        public static readonly byte[] Identifier = [102,12,220,198,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Count.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesFeaturedStickersNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var countLocal =  des.As<int>().Read();
            return new() {
            Count = countLocal,
            };
        }
    }
    public class MessagesFeaturedStickers : MessagesFeaturedStickersBase, ITlSerializable, ITlDeserializable<MessagesFeaturedStickers> {
        public static readonly byte[] Identifier = [6,41,56,190,];
        private int Flags;
        public bool Premium {get;set;}
        public required long Hash {get;set;}
        public required List<StickerSetCoveredBase> Sets {get;set;}
        public required List<long> Unread {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(Sets.TlSerialize());
            bytes.AddRange(Unread.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesFeaturedStickers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var premiumLocal = (flagsLocal & 1) is 0 ? default : true ;
            var hashLocal =  des.As<long>().Read();
            var countLocal =  des.As<int>().Read();
            var setsLocal =  des.Read<StickerSetCoveredBase>();
            var unreadLocal =  des.ReadNumbers<long>();
            return new() {
            Flags = flagsLocal,
            Premium = premiumLocal,
            Hash = hashLocal,
            Count = countLocal,
            Sets = setsLocal,
            Unread = unreadLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesRecentStickersNs {
    public class MessagesRecentStickersNotModified : MessagesRecentStickersBase, ITlSerializable, ITlDeserializable<MessagesRecentStickersNotModified> {
        public static readonly byte[] Identifier = [144,248,23,11,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static MessagesRecentStickersNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class MessagesRecentStickers : MessagesRecentStickersBase, ITlSerializable, ITlDeserializable<MessagesRecentStickers> {
        public static readonly byte[] Identifier = [86,124,211,136,];
        public required long Hash {get;set;}
        public required List<StickerPackBase> Packs {get;set;}
        public required List<DocumentBase> Stickers {get;set;}
        public required List<int> Dates {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(Packs.TlSerialize());
            bytes.AddRange(Stickers.TlSerialize());
            bytes.AddRange(Dates.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesRecentStickers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var hashLocal =  des.As<long>().Read();
            var packsLocal =  des.Read<StickerPackBase>();
            var stickersLocal =  des.Read<DocumentBase>();
            var datesLocal =  des.ReadNumbers<int>();
            return new() {
            Hash = hashLocal,
            Packs = packsLocal,
            Stickers = stickersLocal,
            Dates = datesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesArchivedStickersNs {
    public class MessagesArchivedStickers : MessagesArchivedStickersBase, ITlSerializable, ITlDeserializable<MessagesArchivedStickers> {
        public static readonly byte[] Identifier = [200,169,203,79,];
        public required int Count {get;set;}
        public required List<StickerSetCoveredBase> Sets {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(Sets.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesArchivedStickers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var countLocal =  des.As<int>().Read();
            var setsLocal =  des.Read<StickerSetCoveredBase>();
            return new() {
            Count = countLocal,
            Sets = setsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesStickerSetInstallResultNs {
    public class MessagesStickerSetInstallResultSuccess : MessagesStickerSetInstallResultBase, ITlSerializable, ITlDeserializable<MessagesStickerSetInstallResultSuccess> {
        public static readonly byte[] Identifier = [40,22,100,56,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static MessagesStickerSetInstallResultSuccess TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class MessagesStickerSetInstallResultArchive : MessagesStickerSetInstallResultBase, ITlSerializable, ITlDeserializable<MessagesStickerSetInstallResultArchive> {
        public static readonly byte[] Identifier = [168,16,228,53,];
        public required List<StickerSetCoveredBase> Sets {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Sets.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesStickerSetInstallResultArchive TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var setsLocal =  des.Read<StickerSetCoveredBase>();
            return new() {
            Sets = setsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StickerSetCoveredNs {
    public class StickerSetCovered : StickerSetCoveredBase, ITlSerializable, ITlDeserializable<StickerSetCovered> {
        public static readonly byte[] Identifier = [210,165,16,100,];
        public required DocumentBase Cover {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Set.TlSerialize());
            bytes.AddRange(Cover.TlSerialize());
            return bytes.ToArray();
        }

        public new static StickerSetCovered TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var setLocal =  StickerSetBase.TlDeserialize(des);
            var coverLocal =  DocumentBase.TlDeserialize(des);
            return new() {
            Set = setLocal,
            Cover = coverLocal,
            };
        }
    }
    public class StickerSetMultiCovered : StickerSetCoveredBase, ITlSerializable, ITlDeserializable<StickerSetMultiCovered> {
        public static readonly byte[] Identifier = [27,229,7,52,];
        public required List<DocumentBase> Covers {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Set.TlSerialize());
            bytes.AddRange(Covers.TlSerialize());
            return bytes.ToArray();
        }

        public new static StickerSetMultiCovered TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var setLocal =  StickerSetBase.TlDeserialize(des);
            var coversLocal =  des.Read<DocumentBase>();
            return new() {
            Set = setLocal,
            Covers = coversLocal,
            };
        }
    }
    public class StickerSetFullCovered : StickerSetCoveredBase, ITlSerializable, ITlDeserializable<StickerSetFullCovered> {
        public static readonly byte[] Identifier = [14,60,209,64,];
        public required List<StickerPackBase> Packs {get;set;}
        public required List<StickerKeywordBase> Keywords {get;set;}
        public required List<DocumentBase> Documents {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Set.TlSerialize());
            bytes.AddRange(Packs.TlSerialize());
            bytes.AddRange(Keywords.TlSerialize());
            bytes.AddRange(Documents.TlSerialize());
            return bytes.ToArray();
        }

        public new static StickerSetFullCovered TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var setLocal =  StickerSetBase.TlDeserialize(des);
            var packsLocal =  des.Read<StickerPackBase>();
            var keywordsLocal =  des.Read<StickerKeywordBase>();
            var documentsLocal =  des.Read<DocumentBase>();
            return new() {
            Set = setLocal,
            Packs = packsLocal,
            Keywords = keywordsLocal,
            Documents = documentsLocal,
            };
        }
    }
    public class StickerSetNoCovered : StickerSetCoveredBase, ITlSerializable, ITlDeserializable<StickerSetNoCovered> {
        public static readonly byte[] Identifier = [28,93,177,119,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Set.TlSerialize());
            return bytes.ToArray();
        }

        public new static StickerSetNoCovered TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var setLocal =  StickerSetBase.TlDeserialize(des);
            return new() {
            Set = setLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MaskCoordsNs {
    public class MaskCoords : MaskCoordsBase, ITlSerializable, ITlDeserializable<MaskCoords> {
        public static readonly byte[] Identifier = [178,219,214,174,];
        public required int N {get;set;}
        public required double X {get;set;}
        public required double Y {get;set;}
        public required double Zoom {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(N.TlSerialize());
            bytes.AddRange(X.TlSerialize());
            bytes.AddRange(Y.TlSerialize());
            bytes.AddRange(Zoom.TlSerialize());
            return bytes.ToArray();
        }

        public new static MaskCoords TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var nLocal =  des.As<int>().Read();
            var xLocal =  des.As<double>().Read();
            var yLocal =  des.As<double>().Read();
            var zoomLocal =  des.As<double>().Read();
            return new() {
            N = nLocal,
            X = xLocal,
            Y = yLocal,
            Zoom = zoomLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputStickeredMediaNs {
    public class InputStickeredMediaPhoto : InputStickeredMediaBase, ITlSerializable, ITlDeserializable<InputStickeredMediaPhoto> {
        public static readonly byte[] Identifier = [87,33,153,74,];
        public required InputPhotoBase Id {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputStickeredMediaPhoto TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  InputPhotoBase.TlDeserialize(des);
            return new() {
            Id = idLocal,
            };
        }
    }
    public class InputStickeredMediaDocument : InputStickeredMediaBase, ITlSerializable, ITlDeserializable<InputStickeredMediaDocument> {
        public static readonly byte[] Identifier = [91,134,56,4,];
        public required InputDocumentBase Id {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputStickeredMediaDocument TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  InputDocumentBase.TlDeserialize(des);
            return new() {
            Id = idLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.GameNs {
    public class Game : GameBase, ITlSerializable, ITlDeserializable<Game> {
        public static readonly byte[] Identifier = [59,101,249,189,];
        private int Flags;
        public required long Id {get;set;}
        public required long AccessHash {get;set;}
        public required string ShortName {get;set;}
        public required string Title {get;set;}
        public required string Description {get;set;}
        public required PhotoBase Photo {get;set;}
        public DocumentBase? Document {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Document is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(ShortName.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(Description.TlSerialize());
            bytes.AddRange(Photo.TlSerialize());
            if(Document is not null) bytes.AddRange(Document.TlSerialize());
            return bytes.ToArray();
        }

        public new static Game TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var shortNameLocal =  des.As<string>().Read();
            var titleLocal =  des.As<string>().Read();
            var descriptionLocal =  des.As<string>().Read();
            var photoLocal =  PhotoBase.TlDeserialize(des);
            var documentLocal = (flagsLocal & 1) is 0 ? default : DocumentBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Id = idLocal,
            AccessHash = accessHashLocal,
            ShortName = shortNameLocal,
            Title = titleLocal,
            Description = descriptionLocal,
            Photo = photoLocal,
            Document = documentLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputGameNs {
    public class InputGameID : InputGameBase, ITlSerializable, ITlDeserializable<InputGameID> {
        public static readonly byte[] Identifier = [119,62,44,3,];
        public required long Id {get;set;}
        public required long AccessHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputGameID TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            AccessHash = accessHashLocal,
            };
        }
    }
    public class InputGameShortName : InputGameBase, ITlSerializable, ITlDeserializable<InputGameShortName> {
        public static readonly byte[] Identifier = [10,232,49,195,];
        public required InputUserBase BotId {get;set;}
        public required string ShortName {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(BotId.TlSerialize());
            bytes.AddRange(ShortName.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputGameShortName TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var botIdLocal =  InputUserBase.TlDeserialize(des);
            var shortNameLocal =  des.As<string>().Read();
            return new() {
            BotId = botIdLocal,
            ShortName = shortNameLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.HighScoreNs {
    public class HighScore : HighScoreBase, ITlSerializable, ITlDeserializable<HighScore> {
        public static readonly byte[] Identifier = [235,121,163,115,];
        public required int Pos {get;set;}
        public required long UserId {get;set;}
        public required int Score {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Pos.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Score.TlSerialize());
            return bytes.ToArray();
        }

        public new static HighScore TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var posLocal =  des.As<int>().Read();
            var userIdLocal =  des.As<long>().Read();
            var scoreLocal =  des.As<int>().Read();
            return new() {
            Pos = posLocal,
            UserId = userIdLocal,
            Score = scoreLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesHighScoresNs {
    public class MessagesHighScores : MessagesHighScoresBase, ITlSerializable, ITlDeserializable<MessagesHighScores> {
        public static readonly byte[] Identifier = [153,253,59,154,];
        public required List<HighScoreBase> Scores {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Scores.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesHighScores TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var scoresLocal =  des.Read<HighScoreBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Scores = scoresLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.RichTextNs {
    public class TextEmpty : RichTextBase, ITlSerializable, ITlDeserializable<TextEmpty> {
        public static readonly byte[] Identifier = [79,130,61,220,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static TextEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class TextPlain : RichTextBase, ITlSerializable, ITlDeserializable<TextPlain> {
        public static readonly byte[] Identifier = [224,148,70,116,];
        public required string Text {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static TextPlain TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  des.As<string>().Read();
            return new() {
            Text = textLocal,
            };
        }
    }
    public class TextBold : RichTextBase, ITlSerializable, ITlDeserializable<TextBold> {
        public static readonly byte[] Identifier = [196,171,36,103,];
        public required RichTextBase Text {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static TextBold TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            return new() {
            Text = textLocal,
            };
        }
    }
    public class TextItalic : RichTextBase, ITlSerializable, ITlDeserializable<TextItalic> {
        public static readonly byte[] Identifier = [156,165,18,217,];
        public required RichTextBase Text {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static TextItalic TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            return new() {
            Text = textLocal,
            };
        }
    }
    public class TextUnderline : RichTextBase, ITlSerializable, ITlDeserializable<TextUnderline> {
        public static readonly byte[] Identifier = [196,34,38,193,];
        public required RichTextBase Text {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static TextUnderline TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            return new() {
            Text = textLocal,
            };
        }
    }
    public class TextStrike : RichTextBase, ITlSerializable, ITlDeserializable<TextStrike> {
        public static readonly byte[] Identifier = [149,187,248,155,];
        public required RichTextBase Text {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static TextStrike TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            return new() {
            Text = textLocal,
            };
        }
    }
    public class TextFixed : RichTextBase, ITlSerializable, ITlDeserializable<TextFixed> {
        public static readonly byte[] Identifier = [185,25,63,108,];
        public required RichTextBase Text {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static TextFixed TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            return new() {
            Text = textLocal,
            };
        }
    }
    public class TextUrl : RichTextBase, ITlSerializable, ITlDeserializable<TextUrl> {
        public static readonly byte[] Identifier = [193,132,40,60,];
        public required RichTextBase Text {get;set;}
        public required string Url {get;set;}
        public required long WebpageId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(WebpageId.TlSerialize());
            return bytes.ToArray();
        }

        public new static TextUrl TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            var urlLocal =  des.As<string>().Read();
            var webpageIdLocal =  des.As<long>().Read();
            return new() {
            Text = textLocal,
            Url = urlLocal,
            WebpageId = webpageIdLocal,
            };
        }
    }
    public class TextEmail : RichTextBase, ITlSerializable, ITlDeserializable<TextEmail> {
        public static readonly byte[] Identifier = [214,13,90,222,];
        public required RichTextBase Text {get;set;}
        public required string Email {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(Email.TlSerialize());
            return bytes.ToArray();
        }

        public new static TextEmail TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            var emailLocal =  des.As<string>().Read();
            return new() {
            Text = textLocal,
            Email = emailLocal,
            };
        }
    }
    public class TextConcat : RichTextBase, ITlSerializable, ITlDeserializable<TextConcat> {
        public static readonly byte[] Identifier = [215,96,98,126,];
        public required List<RichTextBase> Texts {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Texts.TlSerialize());
            return bytes.ToArray();
        }

        public new static TextConcat TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textsLocal =  des.Read<RichTextBase>();
            return new() {
            Texts = textsLocal,
            };
        }
    }
    public class TextSubscript : RichTextBase, ITlSerializable, ITlDeserializable<TextSubscript> {
        public static readonly byte[] Identifier = [4,133,106,237,];
        public required RichTextBase Text {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static TextSubscript TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            return new() {
            Text = textLocal,
            };
        }
    }
    public class TextSuperscript : RichTextBase, ITlSerializable, ITlDeserializable<TextSuperscript> {
        public static readonly byte[] Identifier = [1,94,251,199,];
        public required RichTextBase Text {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static TextSuperscript TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            return new() {
            Text = textLocal,
            };
        }
    }
    public class TextMarked : RichTextBase, ITlSerializable, ITlDeserializable<TextMarked> {
        public static readonly byte[] Identifier = [33,134,75,3,];
        public required RichTextBase Text {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static TextMarked TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            return new() {
            Text = textLocal,
            };
        }
    }
    public class TextPhone : RichTextBase, ITlSerializable, ITlDeserializable<TextPhone> {
        public static readonly byte[] Identifier = [106,150,203,28,];
        public required RichTextBase Text {get;set;}
        public required string Phone {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(Phone.TlSerialize());
            return bytes.ToArray();
        }

        public new static TextPhone TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            var phoneLocal =  des.As<string>().Read();
            return new() {
            Text = textLocal,
            Phone = phoneLocal,
            };
        }
    }
    public class TextImage : RichTextBase, ITlSerializable, ITlDeserializable<TextImage> {
        public static readonly byte[] Identifier = [79,207,28,8,];
        public required long DocumentId {get;set;}
        public required int W {get;set;}
        public required int H {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(DocumentId.TlSerialize());
            bytes.AddRange(W.TlSerialize());
            bytes.AddRange(H.TlSerialize());
            return bytes.ToArray();
        }

        public new static TextImage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var documentIdLocal =  des.As<long>().Read();
            var wLocal =  des.As<int>().Read();
            var hLocal =  des.As<int>().Read();
            return new() {
            DocumentId = documentIdLocal,
            W = wLocal,
            H = hLocal,
            };
        }
    }
    public class TextAnchor : RichTextBase, ITlSerializable, ITlDeserializable<TextAnchor> {
        public static readonly byte[] Identifier = [98,55,85,53,];
        public required RichTextBase Text {get;set;}
        public required string Name {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(Name.TlSerialize());
            return bytes.ToArray();
        }

        public new static TextAnchor TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            var nameLocal =  des.As<string>().Read();
            return new() {
            Text = textLocal,
            Name = nameLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PageBlockNs {
    public class PageBlockUnsupported : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockUnsupported> {
        public static readonly byte[] Identifier = [138,126,86,19,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static PageBlockUnsupported TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class PageBlockTitle : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockTitle> {
        public static readonly byte[] Identifier = [253,195,171,112,];
        public required RichTextBase Text {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockTitle TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            return new() {
            Text = textLocal,
            };
        }
    }
    public class PageBlockSubtitle : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockSubtitle> {
        public static readonly byte[] Identifier = [31,154,250,143,];
        public required RichTextBase Text {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockSubtitle TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            return new() {
            Text = textLocal,
            };
        }
    }
    public class PageBlockAuthorDate : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockAuthorDate> {
        public static readonly byte[] Identifier = [224,229,175,186,];
        public required RichTextBase Author {get;set;}
        public required int PublishedDate {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Author.TlSerialize());
            bytes.AddRange(PublishedDate.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockAuthorDate TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var authorLocal =  RichTextBase.TlDeserialize(des);
            var publishedDateLocal =  des.As<int>().Read();
            return new() {
            Author = authorLocal,
            PublishedDate = publishedDateLocal,
            };
        }
    }
    public class PageBlockHeader : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockHeader> {
        public static readonly byte[] Identifier = [236,100,208,191,];
        public required RichTextBase Text {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockHeader TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            return new() {
            Text = textLocal,
            };
        }
    }
    public class PageBlockSubheader : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockSubheader> {
        public static readonly byte[] Identifier = [225,182,43,241,];
        public required RichTextBase Text {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockSubheader TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            return new() {
            Text = textLocal,
            };
        }
    }
    public class PageBlockParagraph : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockParagraph> {
        public static readonly byte[] Identifier = [102,7,122,70,];
        public required RichTextBase Text {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockParagraph TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            return new() {
            Text = textLocal,
            };
        }
    }
    public class PageBlockPreformatted : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockPreformatted> {
        public static readonly byte[] Identifier = [62,217,112,192,];
        public required RichTextBase Text {get;set;}
        public required string Language {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(Language.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockPreformatted TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            var languageLocal =  des.As<string>().Read();
            return new() {
            Text = textLocal,
            Language = languageLocal,
            };
        }
    }
    public class PageBlockFooter : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockFooter> {
        public static readonly byte[] Identifier = [153,9,135,72,];
        public required RichTextBase Text {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockFooter TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            return new() {
            Text = textLocal,
            };
        }
    }
    public class PageBlockDivider : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockDivider> {
        public static readonly byte[] Identifier = [136,177,32,219,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static PageBlockDivider TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class PageBlockAnchor : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockAnchor> {
        public static readonly byte[] Identifier = [176,55,13,206,];
        public required string Name {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Name.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockAnchor TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var nameLocal =  des.As<string>().Read();
            return new() {
            Name = nameLocal,
            };
        }
    }
    public class PageBlockList : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockList> {
        public static readonly byte[] Identifier = [17,128,232,228,];
        public required List<PageListItemBase> Items {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Items.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockList TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var itemsLocal =  des.Read<PageListItemBase>();
            return new() {
            Items = itemsLocal,
            };
        }
    }
    public class PageBlockBlockquote : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockBlockquote> {
        public static readonly byte[] Identifier = [38,124,61,38,];
        public required RichTextBase Text {get;set;}
        public required RichTextBase Caption {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(Caption.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockBlockquote TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            var captionLocal =  RichTextBase.TlDeserialize(des);
            return new() {
            Text = textLocal,
            Caption = captionLocal,
            };
        }
    }
    public class PageBlockPullquote : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockPullquote> {
        public static readonly byte[] Identifier = [211,86,68,79,];
        public required RichTextBase Text {get;set;}
        public required RichTextBase Caption {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(Caption.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockPullquote TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            var captionLocal =  RichTextBase.TlDeserialize(des);
            return new() {
            Text = textLocal,
            Caption = captionLocal,
            };
        }
    }
    public class PageBlockPhoto : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockPhoto> {
        public static readonly byte[] Identifier = [96,197,89,23,];
        private int Flags;
        public required long PhotoId {get;set;}
        public required PageCaptionBase Caption {get;set;}
        public string? Url {get;set;}
        public long? WebpageId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Url is not null ? 1 : 0) | (WebpageId is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(PhotoId.TlSerialize());
            bytes.AddRange(Caption.TlSerialize());
            if(Url is not null) bytes.AddRange(Url.TlSerialize());
            if(WebpageId is not null) bytes.AddRange(WebpageId.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockPhoto TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var photoIdLocal =  des.As<long>().Read();
            var captionLocal =  PageCaptionBase.TlDeserialize(des);
            var urlLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var webpageIdLocal = (flagsLocal & 1) is 0 ? default : des.As<long>().Read() ;
            return new() {
            Flags = flagsLocal,
            PhotoId = photoIdLocal,
            Caption = captionLocal,
            Url = urlLocal,
            WebpageId = webpageIdLocal,
            };
        }
    }
    public class PageBlockVideo : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockVideo> {
        public static readonly byte[] Identifier = [182,231,143,124,];
        private int Flags;
        public bool Autoplay {get;set;}
        public bool Loop {get;set;}
        public required long VideoId {get;set;}
        public required PageCaptionBase Caption {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(VideoId.TlSerialize());
            bytes.AddRange(Caption.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockVideo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var autoplayLocal = (flagsLocal & 1) is 0 ? default : true ;
            var loopLocal = (flagsLocal & 2) is 0 ? default : true ;
            var videoIdLocal =  des.As<long>().Read();
            var captionLocal =  PageCaptionBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Autoplay = autoplayLocal,
            Loop = loopLocal,
            VideoId = videoIdLocal,
            Caption = captionLocal,
            };
        }
    }
    public class PageBlockCover : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockCover> {
        public static readonly byte[] Identifier = [0,51,242,57,];
        public required PageBlockBase Cover {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Cover.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockCover TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var coverLocal =  PageBlockBase.TlDeserialize(des);
            return new() {
            Cover = coverLocal,
            };
        }
    }
    public class PageBlockEmbed : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockEmbed> {
        public static readonly byte[] Identifier = [197,141,113,168,];
        private int Flags;
        public bool FullWidth {get;set;}
        public bool AllowScrolling {get;set;}
        public string? Url {get;set;}
        public string? Html {get;set;}
        public long? PosterPhotoId {get;set;}
        public int? W {get;set;}
        public int? H {get;set;}
        public required PageCaptionBase Caption {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Url is not null ? 2 : 0) | (Html is not null ? 4 : 0) | (PosterPhotoId is not null ? 16 : 0) | (W is not null ? 32 : 0) | (H is not null ? 32 : 0) ).TlSerialize());
            if(Url is not null) bytes.AddRange(Url.TlSerialize());
            if(Html is not null) bytes.AddRange(Html.TlSerialize());
            if(PosterPhotoId is not null) bytes.AddRange(PosterPhotoId.TlSerialize());
            if(W is not null) bytes.AddRange(W.TlSerialize());
            if(H is not null) bytes.AddRange(H.TlSerialize());
            bytes.AddRange(Caption.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockEmbed TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var fullWidthLocal = (flagsLocal & 1) is 0 ? default : true ;
            var allowScrollingLocal = (flagsLocal & 8) is 0 ? default : true ;
            var urlLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var htmlLocal = (flagsLocal & 4) is 0 ? default : des.As<string>().Read() ;
            var posterPhotoIdLocal = (flagsLocal & 16) is 0 ? default : des.As<long>().Read() ;
            var wLocal = (flagsLocal & 32) is 0 ? default : des.As<int>().Read() ;
            var hLocal = (flagsLocal & 32) is 0 ? default : des.As<int>().Read() ;
            var captionLocal =  PageCaptionBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            FullWidth = fullWidthLocal,
            AllowScrolling = allowScrollingLocal,
            Url = urlLocal,
            Html = htmlLocal,
            PosterPhotoId = posterPhotoIdLocal,
            W = wLocal,
            H = hLocal,
            Caption = captionLocal,
            };
        }
    }
    public class PageBlockEmbedPost : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockEmbedPost> {
        public static readonly byte[] Identifier = [11,168,89,242,];
        public required string Url {get;set;}
        public required long WebpageId {get;set;}
        public required long AuthorPhotoId {get;set;}
        public required string Author {get;set;}
        public required int Date {get;set;}
        public required List<PageBlockBase> Blocks {get;set;}
        public required PageCaptionBase Caption {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(WebpageId.TlSerialize());
            bytes.AddRange(AuthorPhotoId.TlSerialize());
            bytes.AddRange(Author.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(Blocks.TlSerialize());
            bytes.AddRange(Caption.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockEmbedPost TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlLocal =  des.As<string>().Read();
            var webpageIdLocal =  des.As<long>().Read();
            var authorPhotoIdLocal =  des.As<long>().Read();
            var authorLocal =  des.As<string>().Read();
            var dateLocal =  des.As<int>().Read();
            var blocksLocal =  des.Read<PageBlockBase>();
            var captionLocal =  PageCaptionBase.TlDeserialize(des);
            return new() {
            Url = urlLocal,
            WebpageId = webpageIdLocal,
            AuthorPhotoId = authorPhotoIdLocal,
            Author = authorLocal,
            Date = dateLocal,
            Blocks = blocksLocal,
            Caption = captionLocal,
            };
        }
    }
    public class PageBlockCollage : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockCollage> {
        public static readonly byte[] Identifier = [77,250,160,101,];
        public required List<PageBlockBase> Items {get;set;}
        public required PageCaptionBase Caption {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Items.TlSerialize());
            bytes.AddRange(Caption.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockCollage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var itemsLocal =  des.Read<PageBlockBase>();
            var captionLocal =  PageCaptionBase.TlDeserialize(des);
            return new() {
            Items = itemsLocal,
            Caption = captionLocal,
            };
        }
    }
    public class PageBlockSlideshow : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockSlideshow> {
        public static readonly byte[] Identifier = [144,149,31,3,];
        public required List<PageBlockBase> Items {get;set;}
        public required PageCaptionBase Caption {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Items.TlSerialize());
            bytes.AddRange(Caption.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockSlideshow TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var itemsLocal =  des.Read<PageBlockBase>();
            var captionLocal =  PageCaptionBase.TlDeserialize(des);
            return new() {
            Items = itemsLocal,
            Caption = captionLocal,
            };
        }
    }
    public class PageBlockChannel : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockChannel> {
        public static readonly byte[] Identifier = [181,81,23,239,];
        public required ChatBase Channel {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Channel.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockChannel TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var channelLocal =  ChatBase.TlDeserialize(des);
            return new() {
            Channel = channelLocal,
            };
        }
    }
    public class PageBlockAudio : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockAudio> {
        public static readonly byte[] Identifier = [234,97,67,128,];
        public required long AudioId {get;set;}
        public required PageCaptionBase Caption {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(AudioId.TlSerialize());
            bytes.AddRange(Caption.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockAudio TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var audioIdLocal =  des.As<long>().Read();
            var captionLocal =  PageCaptionBase.TlDeserialize(des);
            return new() {
            AudioId = audioIdLocal,
            Caption = captionLocal,
            };
        }
    }
    public class PageBlockKicker : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockKicker> {
        public static readonly byte[] Identifier = [144,131,20,30,];
        public required RichTextBase Text {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockKicker TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            return new() {
            Text = textLocal,
            };
        }
    }
    public class PageBlockTable : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockTable> {
        public static readonly byte[] Identifier = [130,234,77,191,];
        private int Flags;
        public bool Bordered {get;set;}
        public bool Striped {get;set;}
        public required RichTextBase Title {get;set;}
        public required List<PageTableRowBase> Rows {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(Rows.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockTable TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var borderedLocal = (flagsLocal & 1) is 0 ? default : true ;
            var stripedLocal = (flagsLocal & 2) is 0 ? default : true ;
            var titleLocal =  RichTextBase.TlDeserialize(des);
            var rowsLocal =  des.Read<PageTableRowBase>();
            return new() {
            Flags = flagsLocal,
            Bordered = borderedLocal,
            Striped = stripedLocal,
            Title = titleLocal,
            Rows = rowsLocal,
            };
        }
    }
    public class PageBlockOrderedList : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockOrderedList> {
        public static readonly byte[] Identifier = [225,225,138,154,];
        public required List<PageListOrderedItemBase> Items {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Items.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockOrderedList TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var itemsLocal =  des.Read<PageListOrderedItemBase>();
            return new() {
            Items = itemsLocal,
            };
        }
    }
    public class PageBlockDetails : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockDetails> {
        public static readonly byte[] Identifier = [237,139,118,118,];
        private int Flags;
        public bool Open {get;set;}
        public required List<PageBlockBase> Blocks {get;set;}
        public required RichTextBase Title {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Blocks.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockDetails TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var openLocal = (flagsLocal & 1) is 0 ? default : true ;
            var blocksLocal =  des.Read<PageBlockBase>();
            var titleLocal =  RichTextBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Open = openLocal,
            Blocks = blocksLocal,
            Title = titleLocal,
            };
        }
    }
    public class PageBlockRelatedArticles : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockRelatedArticles> {
        public static readonly byte[] Identifier = [150,90,17,22,];
        public required RichTextBase Title {get;set;}
        public required List<PageRelatedArticleBase> Articles {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(Articles.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockRelatedArticles TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var titleLocal =  RichTextBase.TlDeserialize(des);
            var articlesLocal =  des.Read<PageRelatedArticleBase>();
            return new() {
            Title = titleLocal,
            Articles = articlesLocal,
            };
        }
    }
    public class PageBlockMap : PageBlockBase, ITlSerializable, ITlDeserializable<PageBlockMap> {
        public static readonly byte[] Identifier = [246,62,79,164,];
        public required GeoPointBase Geo {get;set;}
        public required int Zoom {get;set;}
        public required int W {get;set;}
        public required int H {get;set;}
        public required PageCaptionBase Caption {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Geo.TlSerialize());
            bytes.AddRange(Zoom.TlSerialize());
            bytes.AddRange(W.TlSerialize());
            bytes.AddRange(H.TlSerialize());
            bytes.AddRange(Caption.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageBlockMap TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var geoLocal =  GeoPointBase.TlDeserialize(des);
            var zoomLocal =  des.As<int>().Read();
            var wLocal =  des.As<int>().Read();
            var hLocal =  des.As<int>().Read();
            var captionLocal =  PageCaptionBase.TlDeserialize(des);
            return new() {
            Geo = geoLocal,
            Zoom = zoomLocal,
            W = wLocal,
            H = hLocal,
            Caption = captionLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PhoneCallDiscardReasonNs {
    public class PhoneCallDiscardReasonMissed : PhoneCallDiscardReasonBase, ITlSerializable, ITlDeserializable<PhoneCallDiscardReasonMissed> {
        public static readonly byte[] Identifier = [1,35,228,133,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static PhoneCallDiscardReasonMissed TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class PhoneCallDiscardReasonDisconnect : PhoneCallDiscardReasonBase, ITlSerializable, ITlDeserializable<PhoneCallDiscardReasonDisconnect> {
        public static readonly byte[] Identifier = [160,193,149,224,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static PhoneCallDiscardReasonDisconnect TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class PhoneCallDiscardReasonHangup : PhoneCallDiscardReasonBase, ITlSerializable, ITlDeserializable<PhoneCallDiscardReasonHangup> {
        public static readonly byte[] Identifier = [144,198,173,87,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static PhoneCallDiscardReasonHangup TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class PhoneCallDiscardReasonBusy : PhoneCallDiscardReasonBase, ITlSerializable, ITlDeserializable<PhoneCallDiscardReasonBusy> {
        public static readonly byte[] Identifier = [201,232,247,250,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static PhoneCallDiscardReasonBusy TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.DataJSONNs {
    public class DataJSON : DataJSONBase, ITlSerializable, ITlDeserializable<DataJSON> {
        public static readonly byte[] Identifier = [4,141,116,125,];
        public required string Data {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Data.TlSerialize());
            return bytes.ToArray();
        }

        public new static DataJSON TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var dataLocal =  des.As<string>().Read();
            return new() {
            Data = dataLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.LabeledPriceNs {
    public class LabeledPrice : LabeledPriceBase, ITlSerializable, ITlDeserializable<LabeledPrice> {
        public static readonly byte[] Identifier = [248,107,41,203,];
        public required string Label {get;set;}
        public required long Amount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Label.TlSerialize());
            bytes.AddRange(Amount.TlSerialize());
            return bytes.ToArray();
        }

        public new static LabeledPrice TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var labelLocal =  des.As<string>().Read();
            var amountLocal =  des.As<long>().Read();
            return new() {
            Label = labelLocal,
            Amount = amountLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InvoiceNs {
    public class Invoice : InvoiceBase, ITlSerializable, ITlDeserializable<Invoice> {
        public static readonly byte[] Identifier = [21,90,185,93,];
        private int Flags;
        public bool Test {get;set;}
        public bool NameRequested {get;set;}
        public bool PhoneRequested {get;set;}
        public bool EmailRequested {get;set;}
        public bool ShippingAddressRequested {get;set;}
        public bool Flexible {get;set;}
        public bool PhoneToProvider {get;set;}
        public bool EmailToProvider {get;set;}
        public bool Recurring {get;set;}
        public required string Currency {get;set;}
        public required List<LabeledPriceBase> Prices {get;set;}
        public long? MaxTipAmount {get;set;}
        public List<long>? SuggestedTipAmounts {get;set;}
        public string? TermsUrl {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (MaxTipAmount is not null ? 256 : 0) | (SuggestedTipAmounts is not null ? 256 : 0) | (TermsUrl is not null ? 1024 : 0) ).TlSerialize());
            bytes.AddRange(Currency.TlSerialize());
            bytes.AddRange(Prices.TlSerialize());
            if(MaxTipAmount is not null) bytes.AddRange(MaxTipAmount.TlSerialize());
            if(SuggestedTipAmounts is not null) bytes.AddRange(SuggestedTipAmounts.TlSerialize());
            if(TermsUrl is not null) bytes.AddRange(TermsUrl.TlSerialize());
            return bytes.ToArray();
        }

        public new static Invoice TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var testLocal = (flagsLocal & 1) is 0 ? default : true ;
            var nameRequestedLocal = (flagsLocal & 2) is 0 ? default : true ;
            var phoneRequestedLocal = (flagsLocal & 4) is 0 ? default : true ;
            var emailRequestedLocal = (flagsLocal & 8) is 0 ? default : true ;
            var shippingAddressRequestedLocal = (flagsLocal & 16) is 0 ? default : true ;
            var flexibleLocal = (flagsLocal & 32) is 0 ? default : true ;
            var phoneToProviderLocal = (flagsLocal & 64) is 0 ? default : true ;
            var emailToProviderLocal = (flagsLocal & 128) is 0 ? default : true ;
            var recurringLocal = (flagsLocal & 512) is 0 ? default : true ;
            var currencyLocal =  des.As<string>().Read();
            var pricesLocal =  des.Read<LabeledPriceBase>();
            var maxTipAmountLocal = (flagsLocal & 256) is 0 ? default : des.As<long>().Read() ;
            var suggestedTipAmountsLocal = (flagsLocal & 256) is 0 ? default : des.ReadNumbers<long>() ;
            var termsUrlLocal = (flagsLocal & 1024) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            Test = testLocal,
            NameRequested = nameRequestedLocal,
            PhoneRequested = phoneRequestedLocal,
            EmailRequested = emailRequestedLocal,
            ShippingAddressRequested = shippingAddressRequestedLocal,
            Flexible = flexibleLocal,
            PhoneToProvider = phoneToProviderLocal,
            EmailToProvider = emailToProviderLocal,
            Recurring = recurringLocal,
            Currency = currencyLocal,
            Prices = pricesLocal,
            MaxTipAmount = maxTipAmountLocal,
            SuggestedTipAmounts = suggestedTipAmountsLocal,
            TermsUrl = termsUrlLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PaymentChargeNs {
    public class PaymentCharge : PaymentChargeBase, ITlSerializable, ITlDeserializable<PaymentCharge> {
        public static readonly byte[] Identifier = [126,194,2,234,];
        public required string Id {get;set;}
        public required string ProviderChargeId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(ProviderChargeId.TlSerialize());
            return bytes.ToArray();
        }

        public new static PaymentCharge TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<string>().Read();
            var providerChargeIdLocal =  des.As<string>().Read();
            return new() {
            Id = idLocal,
            ProviderChargeId = providerChargeIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PostAddressNs {
    public class PostAddress : PostAddressBase, ITlSerializable, ITlDeserializable<PostAddress> {
        public static readonly byte[] Identifier = [235,170,140,30,];
        public required string StreetLine1 {get;set;}
        public required string StreetLine2 {get;set;}
        public required string City {get;set;}
        public required string State {get;set;}
        public required string CountryIso2 {get;set;}
        public required string PostCode {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(StreetLine1.TlSerialize());
            bytes.AddRange(StreetLine2.TlSerialize());
            bytes.AddRange(City.TlSerialize());
            bytes.AddRange(State.TlSerialize());
            bytes.AddRange(CountryIso2.TlSerialize());
            bytes.AddRange(PostCode.TlSerialize());
            return bytes.ToArray();
        }

        public new static PostAddress TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var streetLine1Local =  des.As<string>().Read();
            var streetLine2Local =  des.As<string>().Read();
            var cityLocal =  des.As<string>().Read();
            var stateLocal =  des.As<string>().Read();
            var countryIso2Local =  des.As<string>().Read();
            var postCodeLocal =  des.As<string>().Read();
            return new() {
            StreetLine1 = streetLine1Local,
            StreetLine2 = streetLine2Local,
            City = cityLocal,
            State = stateLocal,
            CountryIso2 = countryIso2Local,
            PostCode = postCodeLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PaymentRequestedInfoNs {
    public class PaymentRequestedInfo : PaymentRequestedInfoBase, ITlSerializable, ITlDeserializable<PaymentRequestedInfo> {
        public static readonly byte[] Identifier = [148,63,156,144,];
        private int Flags;
        public string? Name {get;set;}
        public string? Phone {get;set;}
        public string? Email {get;set;}
        public PostAddressBase? ShippingAddress {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Name is not null ? 1 : 0) | (Phone is not null ? 2 : 0) | (Email is not null ? 4 : 0) | (ShippingAddress is not null ? 8 : 0) ).TlSerialize());
            if(Name is not null) bytes.AddRange(Name.TlSerialize());
            if(Phone is not null) bytes.AddRange(Phone.TlSerialize());
            if(Email is not null) bytes.AddRange(Email.TlSerialize());
            if(ShippingAddress is not null) bytes.AddRange(ShippingAddress.TlSerialize());
            return bytes.ToArray();
        }

        public new static PaymentRequestedInfo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var nameLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var phoneLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var emailLocal = (flagsLocal & 4) is 0 ? default : des.As<string>().Read() ;
            var shippingAddressLocal = (flagsLocal & 8) is 0 ? default : PostAddressBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Name = nameLocal,
            Phone = phoneLocal,
            Email = emailLocal,
            ShippingAddress = shippingAddressLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PaymentSavedCredentialsNs {
    public class PaymentSavedCredentialsCard : PaymentSavedCredentialsBase, ITlSerializable, ITlDeserializable<PaymentSavedCredentialsCard> {
        public static readonly byte[] Identifier = [31,122,194,205,];
        public required string Id {get;set;}
        public required string Title {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            return bytes.ToArray();
        }

        public new static PaymentSavedCredentialsCard TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<string>().Read();
            var titleLocal =  des.As<string>().Read();
            return new() {
            Id = idLocal,
            Title = titleLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.WebDocumentNs {
    public class WebDocument : WebDocumentBase, ITlSerializable, ITlDeserializable<WebDocument> {
        public static readonly byte[] Identifier = [209,14,87,28,];
        public required long AccessHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(Size.TlSerialize());
            bytes.AddRange(MimeType.TlSerialize());
            bytes.AddRange(Attributes.TlSerialize());
            return bytes.ToArray();
        }

        public new static WebDocument TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlLocal =  des.As<string>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var sizeLocal =  des.As<int>().Read();
            var mimeTypeLocal =  des.As<string>().Read();
            var attributesLocal =  des.Read<DocumentAttributeBase>();
            return new() {
            Url = urlLocal,
            AccessHash = accessHashLocal,
            Size = sizeLocal,
            MimeType = mimeTypeLocal,
            Attributes = attributesLocal,
            };
        }
    }
    public class WebDocumentNoProxy : WebDocumentBase, ITlSerializable, ITlDeserializable<WebDocumentNoProxy> {
        public static readonly byte[] Identifier = [198,188,200,249,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(Size.TlSerialize());
            bytes.AddRange(MimeType.TlSerialize());
            bytes.AddRange(Attributes.TlSerialize());
            return bytes.ToArray();
        }

        public new static WebDocumentNoProxy TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlLocal =  des.As<string>().Read();
            var sizeLocal =  des.As<int>().Read();
            var mimeTypeLocal =  des.As<string>().Read();
            var attributesLocal =  des.Read<DocumentAttributeBase>();
            return new() {
            Url = urlLocal,
            Size = sizeLocal,
            MimeType = mimeTypeLocal,
            Attributes = attributesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputWebDocumentNs {
    public class InputWebDocument : InputWebDocumentBase, ITlSerializable, ITlDeserializable<InputWebDocument> {
        public static readonly byte[] Identifier = [77,67,237,155,];
        public required string Url {get;set;}
        public required int Size {get;set;}
        public required string MimeType {get;set;}
        public required List<DocumentAttributeBase> Attributes {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(Size.TlSerialize());
            bytes.AddRange(MimeType.TlSerialize());
            bytes.AddRange(Attributes.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputWebDocument TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlLocal =  des.As<string>().Read();
            var sizeLocal =  des.As<int>().Read();
            var mimeTypeLocal =  des.As<string>().Read();
            var attributesLocal =  des.Read<DocumentAttributeBase>();
            return new() {
            Url = urlLocal,
            Size = sizeLocal,
            MimeType = mimeTypeLocal,
            Attributes = attributesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputWebFileLocationNs {
    public class InputWebFileLocation : InputWebFileLocationBase, ITlSerializable, ITlDeserializable<InputWebFileLocation> {
        public static readonly byte[] Identifier = [134,214,57,194,];
        public required string Url {get;set;}
        public required long AccessHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputWebFileLocation TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlLocal =  des.As<string>().Read();
            var accessHashLocal =  des.As<long>().Read();
            return new() {
            Url = urlLocal,
            AccessHash = accessHashLocal,
            };
        }
    }
    public class InputWebFileGeoPointLocation : InputWebFileLocationBase, ITlSerializable, ITlDeserializable<InputWebFileGeoPointLocation> {
        public static readonly byte[] Identifier = [201,33,34,159,];
        public required InputGeoPointBase GeoPoint {get;set;}
        public required long AccessHash {get;set;}
        public required int W {get;set;}
        public required int H {get;set;}
        public required int Zoom {get;set;}
        public required int Scale {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(GeoPoint.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(W.TlSerialize());
            bytes.AddRange(H.TlSerialize());
            bytes.AddRange(Zoom.TlSerialize());
            bytes.AddRange(Scale.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputWebFileGeoPointLocation TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var geoPointLocal =  InputGeoPointBase.TlDeserialize(des);
            var accessHashLocal =  des.As<long>().Read();
            var wLocal =  des.As<int>().Read();
            var hLocal =  des.As<int>().Read();
            var zoomLocal =  des.As<int>().Read();
            var scaleLocal =  des.As<int>().Read();
            return new() {
            GeoPoint = geoPointLocal,
            AccessHash = accessHashLocal,
            W = wLocal,
            H = hLocal,
            Zoom = zoomLocal,
            Scale = scaleLocal,
            };
        }
    }
    public class InputWebFileAudioAlbumThumbLocation : InputWebFileLocationBase, ITlSerializable, ITlDeserializable<InputWebFileAudioAlbumThumbLocation> {
        public static readonly byte[] Identifier = [36,233,111,244,];
        private int Flags;
        public bool Small {get;set;}
        public InputDocumentBase? Document {get;set;}
        public string? Title {get;set;}
        public string? Performer {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Document is not null ? 1 : 0) | (Title is not null ? 2 : 0) | (Performer is not null ? 2 : 0) ).TlSerialize());
            if(Document is not null) bytes.AddRange(Document.TlSerialize());
            if(Title is not null) bytes.AddRange(Title.TlSerialize());
            if(Performer is not null) bytes.AddRange(Performer.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputWebFileAudioAlbumThumbLocation TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var smallLocal = (flagsLocal & 4) is 0 ? default : true ;
            var documentLocal = (flagsLocal & 1) is 0 ? default : InputDocumentBase.TlDeserialize(des) ;
            var titleLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var performerLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            Small = smallLocal,
            Document = documentLocal,
            Title = titleLocal,
            Performer = performerLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.UploadWebFileNs {
    public class UploadWebFile : UploadWebFileBase, ITlSerializable, ITlDeserializable<UploadWebFile> {
        public static readonly byte[] Identifier = [188,83,231,33,];
        public required int Size {get;set;}
        public required string MimeType {get;set;}
        public required StorageFileTypeBase FileType {get;set;}
        public required int Mtime {get;set;}
        public required byte[] Bytes {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Size.TlSerialize());
            bytes.AddRange(MimeType.TlSerialize());
            bytes.AddRange(FileType.TlSerialize());
            bytes.AddRange(Mtime.TlSerialize());
            bytes.AddRange(Bytes.TlSerialize());
            return bytes.ToArray();
        }

        public new static UploadWebFile TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var sizeLocal =  des.As<int>().Read();
            var mimeTypeLocal =  des.As<string>().Read();
            var fileTypeLocal =  StorageFileTypeBase.TlDeserialize(des);
            var mtimeLocal =  des.As<int>().Read();
            var bytesLocal =  des.As<byte[]>().Read();
            return new() {
            Size = sizeLocal,
            MimeType = mimeTypeLocal,
            FileType = fileTypeLocal,
            Mtime = mtimeLocal,
            Bytes = bytesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PaymentsPaymentFormNs {
    public class PaymentsPaymentForm : PaymentsPaymentFormBase, ITlSerializable, ITlDeserializable<PaymentsPaymentForm> {
        public static readonly byte[] Identifier = [81,135,5,160,];
        private int Flags;
        public bool CanSaveCredentials {get;set;}
        public bool PasswordMissing {get;set;}
        public required long FormId {get;set;}
        public required long BotId {get;set;}
        public required string Title {get;set;}
        public required string Description {get;set;}
        public WebDocumentBase? Photo {get;set;}
        public required InvoiceBase Invoice {get;set;}
        public required long ProviderId {get;set;}
        public required string Url {get;set;}
        public string? NativeProvider {get;set;}
        public DataJSONBase? NativeParams {get;set;}
        public List<PaymentFormMethodBase>? AdditionalMethods {get;set;}
        public PaymentRequestedInfoBase? SavedInfo {get;set;}
        public List<PaymentSavedCredentialsBase>? SavedCredentials {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Photo is not null ? 32 : 0) | (NativeProvider is not null ? 16 : 0) | (NativeParams is not null ? 16 : 0) | (AdditionalMethods is not null ? 64 : 0) | (SavedInfo is not null ? 1 : 0) | (SavedCredentials is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(FormId.TlSerialize());
            bytes.AddRange(BotId.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(Description.TlSerialize());
            if(Photo is not null) bytes.AddRange(Photo.TlSerialize());
            bytes.AddRange(Invoice.TlSerialize());
            bytes.AddRange(ProviderId.TlSerialize());
            bytes.AddRange(Url.TlSerialize());
            if(NativeProvider is not null) bytes.AddRange(NativeProvider.TlSerialize());
            if(NativeParams is not null) bytes.AddRange(NativeParams.TlSerialize());
            if(AdditionalMethods is not null) bytes.AddRange(AdditionalMethods.TlSerialize());
            if(SavedInfo is not null) bytes.AddRange(SavedInfo.TlSerialize());
            if(SavedCredentials is not null) bytes.AddRange(SavedCredentials.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static PaymentsPaymentForm TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var canSaveCredentialsLocal = (flagsLocal & 4) is 0 ? default : true ;
            var passwordMissingLocal = (flagsLocal & 8) is 0 ? default : true ;
            var formIdLocal =  des.As<long>().Read();
            var botIdLocal =  des.As<long>().Read();
            var titleLocal =  des.As<string>().Read();
            var descriptionLocal =  des.As<string>().Read();
            var photoLocal = (flagsLocal & 32) is 0 ? default : WebDocumentBase.TlDeserialize(des) ;
            var invoiceLocal =  InvoiceBase.TlDeserialize(des);
            var providerIdLocal =  des.As<long>().Read();
            var urlLocal =  des.As<string>().Read();
            var nativeProviderLocal = (flagsLocal & 16) is 0 ? default : des.As<string>().Read() ;
            var nativeParamsLocal = (flagsLocal & 16) is 0 ? default : DataJSONBase.TlDeserialize(des) ;
            var additionalMethodsLocal = (flagsLocal & 64) is 0 ? default : des.Read<PaymentFormMethodBase>() ;
            var savedInfoLocal = (flagsLocal & 1) is 0 ? default : PaymentRequestedInfoBase.TlDeserialize(des) ;
            var savedCredentialsLocal = (flagsLocal & 2) is 0 ? default : des.Read<PaymentSavedCredentialsBase>() ;
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Flags = flagsLocal,
            CanSaveCredentials = canSaveCredentialsLocal,
            PasswordMissing = passwordMissingLocal,
            FormId = formIdLocal,
            BotId = botIdLocal,
            Title = titleLocal,
            Description = descriptionLocal,
            Photo = photoLocal,
            Invoice = invoiceLocal,
            ProviderId = providerIdLocal,
            Url = urlLocal,
            NativeProvider = nativeProviderLocal,
            NativeParams = nativeParamsLocal,
            AdditionalMethods = additionalMethodsLocal,
            SavedInfo = savedInfoLocal,
            SavedCredentials = savedCredentialsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PaymentsValidatedRequestedInfoNs {
    public class PaymentsValidatedRequestedInfo : PaymentsValidatedRequestedInfoBase, ITlSerializable, ITlDeserializable<PaymentsValidatedRequestedInfo> {
        public static readonly byte[] Identifier = [131,24,69,209,];
        private int Flags;
        public string? Id {get;set;}
        public List<ShippingOptionBase>? ShippingOptions {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Id is not null ? 1 : 0) | (ShippingOptions is not null ? 2 : 0) ).TlSerialize());
            if(Id is not null) bytes.AddRange(Id.TlSerialize());
            if(ShippingOptions is not null) bytes.AddRange(ShippingOptions.TlSerialize());
            return bytes.ToArray();
        }

        public new static PaymentsValidatedRequestedInfo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var idLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var shippingOptionsLocal = (flagsLocal & 2) is 0 ? default : des.Read<ShippingOptionBase>() ;
            return new() {
            Flags = flagsLocal,
            Id = idLocal,
            ShippingOptions = shippingOptionsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PaymentsPaymentResultNs {
    public class PaymentsPaymentResult : PaymentsPaymentResultBase, ITlSerializable, ITlDeserializable<PaymentsPaymentResult> {
        public static readonly byte[] Identifier = [13,129,95,78,];
        public required UpdatesBase Updates {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Updates.TlSerialize());
            return bytes.ToArray();
        }

        public new static PaymentsPaymentResult TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var updatesLocal =  UpdatesBase.TlDeserialize(des);
            return new() {
            Updates = updatesLocal,
            };
        }
    }
    public class PaymentsPaymentVerificationNeeded : PaymentsPaymentResultBase, ITlSerializable, ITlDeserializable<PaymentsPaymentVerificationNeeded> {
        public static readonly byte[] Identifier = [57,17,65,216,];
        public required string Url {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Url.TlSerialize());
            return bytes.ToArray();
        }

        public new static PaymentsPaymentVerificationNeeded TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlLocal =  des.As<string>().Read();
            return new() {
            Url = urlLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PaymentsPaymentReceiptNs {
    public class PaymentsPaymentReceipt : PaymentsPaymentReceiptBase, ITlSerializable, ITlDeserializable<PaymentsPaymentReceipt> {
        public static readonly byte[] Identifier = [3,254,196,112,];
        private int Flags;
        public required int Date {get;set;}
        public required long BotId {get;set;}
        public required long ProviderId {get;set;}
        public required string Title {get;set;}
        public required string Description {get;set;}
        public WebDocumentBase? Photo {get;set;}
        public required InvoiceBase Invoice {get;set;}
        public PaymentRequestedInfoBase? Info {get;set;}
        public ShippingOptionBase? Shipping {get;set;}
        public long? TipAmount {get;set;}
        public required string Currency {get;set;}
        public required long TotalAmount {get;set;}
        public required string CredentialsTitle {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Photo is not null ? 4 : 0) | (Info is not null ? 1 : 0) | (Shipping is not null ? 2 : 0) | (TipAmount is not null ? 8 : 0) ).TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(BotId.TlSerialize());
            bytes.AddRange(ProviderId.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(Description.TlSerialize());
            if(Photo is not null) bytes.AddRange(Photo.TlSerialize());
            bytes.AddRange(Invoice.TlSerialize());
            if(Info is not null) bytes.AddRange(Info.TlSerialize());
            if(Shipping is not null) bytes.AddRange(Shipping.TlSerialize());
            if(TipAmount is not null) bytes.AddRange(TipAmount.TlSerialize());
            bytes.AddRange(Currency.TlSerialize());
            bytes.AddRange(TotalAmount.TlSerialize());
            bytes.AddRange(CredentialsTitle.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static PaymentsPaymentReceipt TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var dateLocal =  des.As<int>().Read();
            var botIdLocal =  des.As<long>().Read();
            var providerIdLocal =  des.As<long>().Read();
            var titleLocal =  des.As<string>().Read();
            var descriptionLocal =  des.As<string>().Read();
            var photoLocal = (flagsLocal & 4) is 0 ? default : WebDocumentBase.TlDeserialize(des) ;
            var invoiceLocal =  InvoiceBase.TlDeserialize(des);
            var infoLocal = (flagsLocal & 1) is 0 ? default : PaymentRequestedInfoBase.TlDeserialize(des) ;
            var shippingLocal = (flagsLocal & 2) is 0 ? default : ShippingOptionBase.TlDeserialize(des) ;
            var tipAmountLocal = (flagsLocal & 8) is 0 ? default : des.As<long>().Read() ;
            var currencyLocal =  des.As<string>().Read();
            var totalAmountLocal =  des.As<long>().Read();
            var credentialsTitleLocal =  des.As<string>().Read();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Flags = flagsLocal,
            Date = dateLocal,
            BotId = botIdLocal,
            ProviderId = providerIdLocal,
            Title = titleLocal,
            Description = descriptionLocal,
            Photo = photoLocal,
            Invoice = invoiceLocal,
            Info = infoLocal,
            Shipping = shippingLocal,
            TipAmount = tipAmountLocal,
            Currency = currencyLocal,
            TotalAmount = totalAmountLocal,
            CredentialsTitle = credentialsTitleLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PaymentsSavedInfoNs {
    public class PaymentsSavedInfo : PaymentsSavedInfoBase, ITlSerializable, ITlDeserializable<PaymentsSavedInfo> {
        public static readonly byte[] Identifier = [60,228,143,251,];
        private int Flags;
        public bool HasSavedCredentials {get;set;}
        public PaymentRequestedInfoBase? SavedInfo {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (SavedInfo is not null ? 1 : 0) ).TlSerialize());
            if(SavedInfo is not null) bytes.AddRange(SavedInfo.TlSerialize());
            return bytes.ToArray();
        }

        public new static PaymentsSavedInfo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var hasSavedCredentialsLocal = (flagsLocal & 2) is 0 ? default : true ;
            var savedInfoLocal = (flagsLocal & 1) is 0 ? default : PaymentRequestedInfoBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            HasSavedCredentials = hasSavedCredentialsLocal,
            SavedInfo = savedInfoLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputPaymentCredentialsNs {
    public class InputPaymentCredentialsSaved : InputPaymentCredentialsBase, ITlSerializable, ITlDeserializable<InputPaymentCredentialsSaved> {
        public static readonly byte[] Identifier = [207,178,14,193,];
        public required string Id {get;set;}
        public required byte[] TmpPassword {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(TmpPassword.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputPaymentCredentialsSaved TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<string>().Read();
            var tmpPasswordLocal =  des.As<byte[]>().Read();
            return new() {
            Id = idLocal,
            TmpPassword = tmpPasswordLocal,
            };
        }
    }
    public class InputPaymentCredentials : InputPaymentCredentialsBase, ITlSerializable, ITlDeserializable<InputPaymentCredentials> {
        public static readonly byte[] Identifier = [40,215,23,52,];
        private int Flags;
        public bool Save {get;set;}
        public required DataJSONBase Data {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Data.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputPaymentCredentials TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var saveLocal = (flagsLocal & 1) is 0 ? default : true ;
            var dataLocal =  DataJSONBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Save = saveLocal,
            Data = dataLocal,
            };
        }
    }
    public class InputPaymentCredentialsApplePay : InputPaymentCredentialsBase, ITlSerializable, ITlDeserializable<InputPaymentCredentialsApplePay> {
        public static readonly byte[] Identifier = [159,195,161,10,];
        public required DataJSONBase PaymentData {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PaymentData.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputPaymentCredentialsApplePay TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var paymentDataLocal =  DataJSONBase.TlDeserialize(des);
            return new() {
            PaymentData = paymentDataLocal,
            };
        }
    }
    public class InputPaymentCredentialsGooglePay : InputPaymentCredentialsBase, ITlSerializable, ITlDeserializable<InputPaymentCredentialsGooglePay> {
        public static readonly byte[] Identifier = [1,40,195,138,];
        public required DataJSONBase PaymentToken {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PaymentToken.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputPaymentCredentialsGooglePay TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var paymentTokenLocal =  DataJSONBase.TlDeserialize(des);
            return new() {
            PaymentToken = paymentTokenLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AccountTmpPasswordNs {
    public class AccountTmpPassword : AccountTmpPasswordBase, ITlSerializable, ITlDeserializable<AccountTmpPassword> {
        public static readonly byte[] Identifier = [52,253,100,219,];
        public required byte[] TmpPassword {get;set;}
        public required int ValidUntil {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(TmpPassword.TlSerialize());
            bytes.AddRange(ValidUntil.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountTmpPassword TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var tmpPasswordLocal =  des.As<byte[]>().Read();
            var validUntilLocal =  des.As<int>().Read();
            return new() {
            TmpPassword = tmpPasswordLocal,
            ValidUntil = validUntilLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ShippingOptionNs {
    public class ShippingOption : ShippingOptionBase, ITlSerializable, ITlDeserializable<ShippingOption> {
        public static readonly byte[] Identifier = [223,60,33,182,];
        public required string Id {get;set;}
        public required string Title {get;set;}
        public required List<LabeledPriceBase> Prices {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(Prices.TlSerialize());
            return bytes.ToArray();
        }

        public new static ShippingOption TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<string>().Read();
            var titleLocal =  des.As<string>().Read();
            var pricesLocal =  des.Read<LabeledPriceBase>();
            return new() {
            Id = idLocal,
            Title = titleLocal,
            Prices = pricesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputStickerSetItemNs {
    public class InputStickerSetItem : InputStickerSetItemBase, ITlSerializable, ITlDeserializable<InputStickerSetItem> {
        public static readonly byte[] Identifier = [156,158,218,50,];
        private int Flags;
        public required InputDocumentBase Document {get;set;}
        public required string Emoji {get;set;}
        public MaskCoordsBase? MaskCoords {get;set;}
        public string? Keywords {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (MaskCoords is not null ? 1 : 0) | (Keywords is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(Document.TlSerialize());
            bytes.AddRange(Emoji.TlSerialize());
            if(MaskCoords is not null) bytes.AddRange(MaskCoords.TlSerialize());
            if(Keywords is not null) bytes.AddRange(Keywords.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputStickerSetItem TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var documentLocal =  InputDocumentBase.TlDeserialize(des);
            var emojiLocal =  des.As<string>().Read();
            var maskCoordsLocal = (flagsLocal & 1) is 0 ? default : MaskCoordsBase.TlDeserialize(des) ;
            var keywordsLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            Document = documentLocal,
            Emoji = emojiLocal,
            MaskCoords = maskCoordsLocal,
            Keywords = keywordsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputPhoneCallNs {
    public class InputPhoneCall : InputPhoneCallBase, ITlSerializable, ITlDeserializable<InputPhoneCall> {
        public static readonly byte[] Identifier = [237,253,54,30,];
        public required long Id {get;set;}
        public required long AccessHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputPhoneCall TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            AccessHash = accessHashLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PhoneCallNs {
    public class PhoneCallEmpty : PhoneCallBase, ITlSerializable, ITlDeserializable<PhoneCallEmpty> {
        public static readonly byte[] Identifier = [21,201,102,83,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhoneCallEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            };
        }
    }
    public class PhoneCallWaiting : PhoneCallBase, ITlSerializable, ITlDeserializable<PhoneCallWaiting> {
        public static readonly byte[] Identifier = [23,111,34,197,];
        private int Flags;
        public bool Video {get;set;}
        public required long AccessHash {get;set;}
        public required int Date {get;set;}
        public required long AdminId {get;set;}
        public required long ParticipantId {get;set;}
        public required PhoneCallProtocolBase Protocol {get;set;}
        public int? ReceiveDate {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (ReceiveDate is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(AdminId.TlSerialize());
            bytes.AddRange(ParticipantId.TlSerialize());
            bytes.AddRange(Protocol.TlSerialize());
            if(ReceiveDate is not null) bytes.AddRange(ReceiveDate.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhoneCallWaiting TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var videoLocal = (flagsLocal & 64) is 0 ? default : true ;
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var dateLocal =  des.As<int>().Read();
            var adminIdLocal =  des.As<long>().Read();
            var participantIdLocal =  des.As<long>().Read();
            var protocolLocal =  PhoneCallProtocolBase.TlDeserialize(des);
            var receiveDateLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Video = videoLocal,
            Id = idLocal,
            AccessHash = accessHashLocal,
            Date = dateLocal,
            AdminId = adminIdLocal,
            ParticipantId = participantIdLocal,
            Protocol = protocolLocal,
            ReceiveDate = receiveDateLocal,
            };
        }
    }
    public class PhoneCallRequested : PhoneCallBase, ITlSerializable, ITlDeserializable<PhoneCallRequested> {
        public static readonly byte[] Identifier = [12,237,176,20,];
        private int Flags;
        public bool Video {get;set;}
        public required long AccessHash {get;set;}
        public required int Date {get;set;}
        public required long AdminId {get;set;}
        public required long ParticipantId {get;set;}
        public required byte[] GAHash {get;set;}
        public required PhoneCallProtocolBase Protocol {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(AdminId.TlSerialize());
            bytes.AddRange(ParticipantId.TlSerialize());
            bytes.AddRange(GAHash.TlSerialize());
            bytes.AddRange(Protocol.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhoneCallRequested TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var videoLocal = (flagsLocal & 64) is 0 ? default : true ;
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var dateLocal =  des.As<int>().Read();
            var adminIdLocal =  des.As<long>().Read();
            var participantIdLocal =  des.As<long>().Read();
            var gAHashLocal =  des.As<byte[]>().Read();
            var protocolLocal =  PhoneCallProtocolBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Video = videoLocal,
            Id = idLocal,
            AccessHash = accessHashLocal,
            Date = dateLocal,
            AdminId = adminIdLocal,
            ParticipantId = participantIdLocal,
            GAHash = gAHashLocal,
            Protocol = protocolLocal,
            };
        }
    }
    public class PhoneCallAccepted : PhoneCallBase, ITlSerializable, ITlDeserializable<PhoneCallAccepted> {
        public static readonly byte[] Identifier = [17,195,96,54,];
        private int Flags;
        public bool Video {get;set;}
        public required long AccessHash {get;set;}
        public required int Date {get;set;}
        public required long AdminId {get;set;}
        public required long ParticipantId {get;set;}
        public required byte[] GB {get;set;}
        public required PhoneCallProtocolBase Protocol {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(AdminId.TlSerialize());
            bytes.AddRange(ParticipantId.TlSerialize());
            bytes.AddRange(GB.TlSerialize());
            bytes.AddRange(Protocol.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhoneCallAccepted TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var videoLocal = (flagsLocal & 64) is 0 ? default : true ;
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var dateLocal =  des.As<int>().Read();
            var adminIdLocal =  des.As<long>().Read();
            var participantIdLocal =  des.As<long>().Read();
            var gBLocal =  des.As<byte[]>().Read();
            var protocolLocal =  PhoneCallProtocolBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Video = videoLocal,
            Id = idLocal,
            AccessHash = accessHashLocal,
            Date = dateLocal,
            AdminId = adminIdLocal,
            ParticipantId = participantIdLocal,
            GB = gBLocal,
            Protocol = protocolLocal,
            };
        }
    }
    public class PhoneCall : PhoneCallBase, ITlSerializable, ITlDeserializable<PhoneCall> {
        public static readonly byte[] Identifier = [103,124,127,150,];
        private int Flags;
        public bool P2pAllowed {get;set;}
        public bool Video {get;set;}
        public required long AccessHash {get;set;}
        public required int Date {get;set;}
        public required long AdminId {get;set;}
        public required long ParticipantId {get;set;}
        public required byte[] GAOrB {get;set;}
        public required long KeyFingerprint {get;set;}
        public required PhoneCallProtocolBase Protocol {get;set;}
        public required List<PhoneConnectionBase> Connections {get;set;}
        public required int StartDate {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(AdminId.TlSerialize());
            bytes.AddRange(ParticipantId.TlSerialize());
            bytes.AddRange(GAOrB.TlSerialize());
            bytes.AddRange(KeyFingerprint.TlSerialize());
            bytes.AddRange(Protocol.TlSerialize());
            bytes.AddRange(Connections.TlSerialize());
            bytes.AddRange(StartDate.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhoneCall TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var p2pAllowedLocal = (flagsLocal & 32) is 0 ? default : true ;
            var videoLocal = (flagsLocal & 64) is 0 ? default : true ;
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var dateLocal =  des.As<int>().Read();
            var adminIdLocal =  des.As<long>().Read();
            var participantIdLocal =  des.As<long>().Read();
            var gAOrBLocal =  des.As<byte[]>().Read();
            var keyFingerprintLocal =  des.As<long>().Read();
            var protocolLocal =  PhoneCallProtocolBase.TlDeserialize(des);
            var connectionsLocal =  des.Read<PhoneConnectionBase>();
            var startDateLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            P2pAllowed = p2pAllowedLocal,
            Video = videoLocal,
            Id = idLocal,
            AccessHash = accessHashLocal,
            Date = dateLocal,
            AdminId = adminIdLocal,
            ParticipantId = participantIdLocal,
            GAOrB = gAOrBLocal,
            KeyFingerprint = keyFingerprintLocal,
            Protocol = protocolLocal,
            Connections = connectionsLocal,
            StartDate = startDateLocal,
            };
        }
    }
    public class PhoneCallDiscarded : PhoneCallBase, ITlSerializable, ITlDeserializable<PhoneCallDiscarded> {
        public static readonly byte[] Identifier = [225,77,202,80,];
        private int Flags;
        public bool NeedRating {get;set;}
        public bool NeedDebug {get;set;}
        public bool Video {get;set;}
        public PhoneCallDiscardReasonBase? Reason {get;set;}
        public int? Duration {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Reason is not null ? 1 : 0) | (Duration is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            if(Reason is not null) bytes.AddRange(Reason.TlSerialize());
            if(Duration is not null) bytes.AddRange(Duration.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhoneCallDiscarded TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var needRatingLocal = (flagsLocal & 4) is 0 ? default : true ;
            var needDebugLocal = (flagsLocal & 8) is 0 ? default : true ;
            var videoLocal = (flagsLocal & 64) is 0 ? default : true ;
            var idLocal =  des.As<long>().Read();
            var reasonLocal = (flagsLocal & 1) is 0 ? default : PhoneCallDiscardReasonBase.TlDeserialize(des) ;
            var durationLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            NeedRating = needRatingLocal,
            NeedDebug = needDebugLocal,
            Video = videoLocal,
            Id = idLocal,
            Reason = reasonLocal,
            Duration = durationLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PhoneConnectionNs {
    public class PhoneConnection : PhoneConnectionBase, ITlSerializable, ITlDeserializable<PhoneConnection> {
        public static readonly byte[] Identifier = [199,35,193,156,];
        public bool Tcp {get;set;}
        public required byte[] PeerTag {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Ip.TlSerialize());
            bytes.AddRange(Ipv6.TlSerialize());
            bytes.AddRange(Port.TlSerialize());
            bytes.AddRange(PeerTag.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhoneConnection TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var tcpLocal = (flagsLocal & 1) is 0 ? default : true ;
            var idLocal =  des.As<long>().Read();
            var ipLocal =  des.As<string>().Read();
            var ipv6Local =  des.As<string>().Read();
            var portLocal =  des.As<int>().Read();
            var peerTagLocal =  des.As<byte[]>().Read();
            return new() {
            Flags = flagsLocal,
            Tcp = tcpLocal,
            Id = idLocal,
            Ip = ipLocal,
            Ipv6 = ipv6Local,
            Port = portLocal,
            PeerTag = peerTagLocal,
            };
        }
    }
    public class PhoneConnectionWebrtc : PhoneConnectionBase, ITlSerializable, ITlDeserializable<PhoneConnectionWebrtc> {
        public static readonly byte[] Identifier = [117,227,95,99,];
        public bool Turn {get;set;}
        public bool Stun {get;set;}
        public required string Username {get;set;}
        public required string Password {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Ip.TlSerialize());
            bytes.AddRange(Ipv6.TlSerialize());
            bytes.AddRange(Port.TlSerialize());
            bytes.AddRange(Username.TlSerialize());
            bytes.AddRange(Password.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhoneConnectionWebrtc TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var turnLocal = (flagsLocal & 1) is 0 ? default : true ;
            var stunLocal = (flagsLocal & 2) is 0 ? default : true ;
            var idLocal =  des.As<long>().Read();
            var ipLocal =  des.As<string>().Read();
            var ipv6Local =  des.As<string>().Read();
            var portLocal =  des.As<int>().Read();
            var usernameLocal =  des.As<string>().Read();
            var passwordLocal =  des.As<string>().Read();
            return new() {
            Flags = flagsLocal,
            Turn = turnLocal,
            Stun = stunLocal,
            Id = idLocal,
            Ip = ipLocal,
            Ipv6 = ipv6Local,
            Port = portLocal,
            Username = usernameLocal,
            Password = passwordLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PhoneCallProtocolNs {
    public class PhoneCallProtocol : PhoneCallProtocolBase, ITlSerializable, ITlDeserializable<PhoneCallProtocol> {
        public static readonly byte[] Identifier = [200,143,135,252,];
        private int Flags;
        public bool UdpP2p {get;set;}
        public bool UdpReflector {get;set;}
        public required int MinLayer {get;set;}
        public required int MaxLayer {get;set;}
        public required List<string> LibraryVersions {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(MinLayer.TlSerialize());
            bytes.AddRange(MaxLayer.TlSerialize());
            bytes.AddRange(LibraryVersions.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhoneCallProtocol TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var udpP2pLocal = (flagsLocal & 1) is 0 ? default : true ;
            var udpReflectorLocal = (flagsLocal & 2) is 0 ? default : true ;
            var minLayerLocal =  des.As<int>().Read();
            var maxLayerLocal =  des.As<int>().Read();
            var libraryVersionsLocal =  des.ReadStrings();
            return new() {
            Flags = flagsLocal,
            UdpP2p = udpP2pLocal,
            UdpReflector = udpReflectorLocal,
            MinLayer = minLayerLocal,
            MaxLayer = maxLayerLocal,
            LibraryVersions = libraryVersionsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PhonePhoneCallNs {
    public class PhonePhoneCall : PhonePhoneCallBase, ITlSerializable, ITlDeserializable<PhonePhoneCall> {
        public static readonly byte[] Identifier = [64,225,130,236,];
        public required PhoneCallBase PhoneCall {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PhoneCall.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhonePhoneCall TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var phoneCallLocal =  PhoneCallBase.TlDeserialize(des);
            var usersLocal =  des.Read<UserBase>();
            return new() {
            PhoneCall = phoneCallLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.UploadCdnFileNs {
    public class UploadCdnFileReuploadNeeded : UploadCdnFileBase, ITlSerializable, ITlDeserializable<UploadCdnFileReuploadNeeded> {
        public static readonly byte[] Identifier = [110,228,168,238,];
        public required byte[] RequestToken {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(RequestToken.TlSerialize());
            return bytes.ToArray();
        }

        public new static UploadCdnFileReuploadNeeded TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var requestTokenLocal =  des.As<byte[]>().Read();
            return new() {
            RequestToken = requestTokenLocal,
            };
        }
    }
    public class UploadCdnFile : UploadCdnFileBase, ITlSerializable, ITlDeserializable<UploadCdnFile> {
        public static readonly byte[] Identifier = [79,202,159,169,];
        public required byte[] Bytes {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Bytes.TlSerialize());
            return bytes.ToArray();
        }

        public new static UploadCdnFile TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var bytesLocal =  des.As<byte[]>().Read();
            return new() {
            Bytes = bytesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.CdnPublicKeyNs {
    public class CdnPublicKey : CdnPublicKeyBase, ITlSerializable, ITlDeserializable<CdnPublicKey> {
        public static readonly byte[] Identifier = [186,234,130,201,];
        public required int DcId {get;set;}
        public required string PublicKey {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(DcId.TlSerialize());
            bytes.AddRange(PublicKey.TlSerialize());
            return bytes.ToArray();
        }

        public new static CdnPublicKey TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var dcIdLocal =  des.As<int>().Read();
            var publicKeyLocal =  des.As<string>().Read();
            return new() {
            DcId = dcIdLocal,
            PublicKey = publicKeyLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.CdnConfigNs {
    public class CdnConfig : CdnConfigBase, ITlSerializable, ITlDeserializable<CdnConfig> {
        public static readonly byte[] Identifier = [10,228,37,87,];
        public required List<CdnPublicKeyBase> PublicKeys {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PublicKeys.TlSerialize());
            return bytes.ToArray();
        }

        public new static CdnConfig TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var publicKeysLocal =  des.Read<CdnPublicKeyBase>();
            return new() {
            PublicKeys = publicKeysLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.LangPackStringNs {
    public class LangPackString : LangPackStringBase, ITlSerializable, ITlDeserializable<LangPackString> {
        public static readonly byte[] Identifier = [246,129,209,202,];
        public required string Value {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Key.TlSerialize());
            bytes.AddRange(Value.TlSerialize());
            return bytes.ToArray();
        }

        public new static LangPackString TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var keyLocal =  des.As<string>().Read();
            var valueLocal =  des.As<string>().Read();
            return new() {
            Key = keyLocal,
            Value = valueLocal,
            };
        }
    }
    public class LangPackStringPluralized : LangPackStringBase, ITlSerializable, ITlDeserializable<LangPackStringPluralized> {
        public static readonly byte[] Identifier = [159,172,71,108,];
        private int Flags;
        public string? ZeroValue {get;set;}
        public string? OneValue {get;set;}
        public string? TwoValue {get;set;}
        public string? FewValue {get;set;}
        public string? ManyValue {get;set;}
        public required string OtherValue {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (ZeroValue is not null ? 1 : 0) | (OneValue is not null ? 2 : 0) | (TwoValue is not null ? 4 : 0) | (FewValue is not null ? 8 : 0) | (ManyValue is not null ? 16 : 0) ).TlSerialize());
            bytes.AddRange(Key.TlSerialize());
            if(ZeroValue is not null) bytes.AddRange(ZeroValue.TlSerialize());
            if(OneValue is not null) bytes.AddRange(OneValue.TlSerialize());
            if(TwoValue is not null) bytes.AddRange(TwoValue.TlSerialize());
            if(FewValue is not null) bytes.AddRange(FewValue.TlSerialize());
            if(ManyValue is not null) bytes.AddRange(ManyValue.TlSerialize());
            bytes.AddRange(OtherValue.TlSerialize());
            return bytes.ToArray();
        }

        public new static LangPackStringPluralized TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var keyLocal =  des.As<string>().Read();
            var zeroValueLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var oneValueLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var twoValueLocal = (flagsLocal & 4) is 0 ? default : des.As<string>().Read() ;
            var fewValueLocal = (flagsLocal & 8) is 0 ? default : des.As<string>().Read() ;
            var manyValueLocal = (flagsLocal & 16) is 0 ? default : des.As<string>().Read() ;
            var otherValueLocal =  des.As<string>().Read();
            return new() {
            Flags = flagsLocal,
            Key = keyLocal,
            ZeroValue = zeroValueLocal,
            OneValue = oneValueLocal,
            TwoValue = twoValueLocal,
            FewValue = fewValueLocal,
            ManyValue = manyValueLocal,
            OtherValue = otherValueLocal,
            };
        }
    }
    public class LangPackStringDeleted : LangPackStringBase, ITlSerializable, ITlDeserializable<LangPackStringDeleted> {
        public static readonly byte[] Identifier = [178,238,121,41,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Key.TlSerialize());
            return bytes.ToArray();
        }

        public new static LangPackStringDeleted TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var keyLocal =  des.As<string>().Read();
            return new() {
            Key = keyLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.LangPackDifferenceNs {
    public class LangPackDifference : LangPackDifferenceBase, ITlSerializable, ITlDeserializable<LangPackDifference> {
        public static readonly byte[] Identifier = [246,193,133,243,];
        public required string LangCode {get;set;}
        public required int FromVersion {get;set;}
        public required int Version {get;set;}
        public required List<LangPackStringBase> Strings {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(LangCode.TlSerialize());
            bytes.AddRange(FromVersion.TlSerialize());
            bytes.AddRange(Version.TlSerialize());
            bytes.AddRange(Strings.TlSerialize());
            return bytes.ToArray();
        }

        public new static LangPackDifference TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var langCodeLocal =  des.As<string>().Read();
            var fromVersionLocal =  des.As<int>().Read();
            var versionLocal =  des.As<int>().Read();
            var stringsLocal =  des.Read<LangPackStringBase>();
            return new() {
            LangCode = langCodeLocal,
            FromVersion = fromVersionLocal,
            Version = versionLocal,
            Strings = stringsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.LangPackLanguageNs {
    public class LangPackLanguage : LangPackLanguageBase, ITlSerializable, ITlDeserializable<LangPackLanguage> {
        public static readonly byte[] Identifier = [227,92,202,238,];
        private int Flags;
        public bool Official {get;set;}
        public bool Rtl {get;set;}
        public bool Beta {get;set;}
        public required string Name {get;set;}
        public required string NativeName {get;set;}
        public required string LangCode {get;set;}
        public string? BaseLangCode {get;set;}
        public required string PluralCode {get;set;}
        public required int StringsCount {get;set;}
        public required int TranslatedCount {get;set;}
        public required string TranslationsUrl {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (BaseLangCode is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(Name.TlSerialize());
            bytes.AddRange(NativeName.TlSerialize());
            bytes.AddRange(LangCode.TlSerialize());
            if(BaseLangCode is not null) bytes.AddRange(BaseLangCode.TlSerialize());
            bytes.AddRange(PluralCode.TlSerialize());
            bytes.AddRange(StringsCount.TlSerialize());
            bytes.AddRange(TranslatedCount.TlSerialize());
            bytes.AddRange(TranslationsUrl.TlSerialize());
            return bytes.ToArray();
        }

        public new static LangPackLanguage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var officialLocal = (flagsLocal & 1) is 0 ? default : true ;
            var rtlLocal = (flagsLocal & 4) is 0 ? default : true ;
            var betaLocal = (flagsLocal & 8) is 0 ? default : true ;
            var nameLocal =  des.As<string>().Read();
            var nativeNameLocal =  des.As<string>().Read();
            var langCodeLocal =  des.As<string>().Read();
            var baseLangCodeLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var pluralCodeLocal =  des.As<string>().Read();
            var stringsCountLocal =  des.As<int>().Read();
            var translatedCountLocal =  des.As<int>().Read();
            var translationsUrlLocal =  des.As<string>().Read();
            return new() {
            Flags = flagsLocal,
            Official = officialLocal,
            Rtl = rtlLocal,
            Beta = betaLocal,
            Name = nameLocal,
            NativeName = nativeNameLocal,
            LangCode = langCodeLocal,
            BaseLangCode = baseLangCodeLocal,
            PluralCode = pluralCodeLocal,
            StringsCount = stringsCountLocal,
            TranslatedCount = translatedCountLocal,
            TranslationsUrl = translationsUrlLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChannelAdminLogEventActionNs {
    public class ChannelAdminLogEventActionChangeTitle : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionChangeTitle> {
        public static readonly byte[] Identifier = [37,184,223,230,];
        public required string PrevValue {get;set;}
        public required string NewValue {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PrevValue.TlSerialize());
            bytes.AddRange(NewValue.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionChangeTitle TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var prevValueLocal =  des.As<string>().Read();
            var newValueLocal =  des.As<string>().Read();
            return new() {
            PrevValue = prevValueLocal,
            NewValue = newValueLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionChangeAbout : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionChangeAbout> {
        public static readonly byte[] Identifier = [46,138,24,85,];
        public required string PrevValue {get;set;}
        public required string NewValue {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PrevValue.TlSerialize());
            bytes.AddRange(NewValue.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionChangeAbout TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var prevValueLocal =  des.As<string>().Read();
            var newValueLocal =  des.As<string>().Read();
            return new() {
            PrevValue = prevValueLocal,
            NewValue = newValueLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionChangeUsername : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionChangeUsername> {
        public static readonly byte[] Identifier = [56,252,74,106,];
        public required string PrevValue {get;set;}
        public required string NewValue {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PrevValue.TlSerialize());
            bytes.AddRange(NewValue.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionChangeUsername TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var prevValueLocal =  des.As<string>().Read();
            var newValueLocal =  des.As<string>().Read();
            return new() {
            PrevValue = prevValueLocal,
            NewValue = newValueLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionChangePhoto : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionChangePhoto> {
        public static readonly byte[] Identifier = [175,210,75,67,];
        public required PhotoBase PrevPhoto {get;set;}
        public required PhotoBase NewPhoto {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PrevPhoto.TlSerialize());
            bytes.AddRange(NewPhoto.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionChangePhoto TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var prevPhotoLocal =  PhotoBase.TlDeserialize(des);
            var newPhotoLocal =  PhotoBase.TlDeserialize(des);
            return new() {
            PrevPhoto = prevPhotoLocal,
            NewPhoto = newPhotoLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionToggleInvites : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionToggleInvites> {
        public static readonly byte[] Identifier = [174,7,121,27,];
        public bool NewValue {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionToggleInvites TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var newValueLocal =  des.As<bool>().Read();
            return new() {
            NewValue = newValueLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionToggleSignatures : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionToggleSignatures> {
        public static readonly byte[] Identifier = [113,9,174,38,];
        public bool NewValue {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionToggleSignatures TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var newValueLocal =  des.As<bool>().Read();
            return new() {
            NewValue = newValueLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionUpdatePinned : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionUpdatePinned> {
        public static readonly byte[] Identifier = [24,44,232,233,];
        public required MessageBase Message {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Message.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionUpdatePinned TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var messageLocal =  MessageBase.TlDeserialize(des);
            return new() {
            Message = messageLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionEditMessage : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionEditMessage> {
        public static readonly byte[] Identifier = [5,36,155,112,];
        public required MessageBase PrevMessage {get;set;}
        public required MessageBase NewMessage {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PrevMessage.TlSerialize());
            bytes.AddRange(NewMessage.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionEditMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var prevMessageLocal =  MessageBase.TlDeserialize(des);
            var newMessageLocal =  MessageBase.TlDeserialize(des);
            return new() {
            PrevMessage = prevMessageLocal,
            NewMessage = newMessageLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionDeleteMessage : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionDeleteMessage> {
        public static readonly byte[] Identifier = [187,71,224,66,];
        public required MessageBase Message {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Message.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionDeleteMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var messageLocal =  MessageBase.TlDeserialize(des);
            return new() {
            Message = messageLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionParticipantJoin : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionParticipantJoin> {
        public static readonly byte[] Identifier = [211,64,48,24,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionParticipantJoin TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class ChannelAdminLogEventActionParticipantLeave : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionParticipantLeave> {
        public static readonly byte[] Identifier = [242,119,151,248,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionParticipantLeave TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class ChannelAdminLogEventActionParticipantInvite : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionParticipantInvite> {
        public static readonly byte[] Identifier = [216,52,28,227,];
        public required ChannelParticipantBase Participant {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Participant.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionParticipantInvite TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var participantLocal =  ChannelParticipantBase.TlDeserialize(des);
            return new() {
            Participant = participantLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionParticipantToggleBan : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionParticipantToggleBan> {
        public static readonly byte[] Identifier = [126,61,216,230,];
        public required ChannelParticipantBase PrevParticipant {get;set;}
        public required ChannelParticipantBase NewParticipant {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PrevParticipant.TlSerialize());
            bytes.AddRange(NewParticipant.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionParticipantToggleBan TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var prevParticipantLocal =  ChannelParticipantBase.TlDeserialize(des);
            var newParticipantLocal =  ChannelParticipantBase.TlDeserialize(des);
            return new() {
            PrevParticipant = prevParticipantLocal,
            NewParticipant = newParticipantLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionParticipantToggleAdmin : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionParticipantToggleAdmin> {
        public static readonly byte[] Identifier = [16,103,103,213,];
        public required ChannelParticipantBase PrevParticipant {get;set;}
        public required ChannelParticipantBase NewParticipant {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PrevParticipant.TlSerialize());
            bytes.AddRange(NewParticipant.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionParticipantToggleAdmin TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var prevParticipantLocal =  ChannelParticipantBase.TlDeserialize(des);
            var newParticipantLocal =  ChannelParticipantBase.TlDeserialize(des);
            return new() {
            PrevParticipant = prevParticipantLocal,
            NewParticipant = newParticipantLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionChangeStickerSet : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionChangeStickerSet> {
        public static readonly byte[] Identifier = [167,202,195,177,];
        public required InputStickerSetBase PrevStickerset {get;set;}
        public required InputStickerSetBase NewStickerset {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PrevStickerset.TlSerialize());
            bytes.AddRange(NewStickerset.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionChangeStickerSet TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var prevStickersetLocal =  InputStickerSetBase.TlDeserialize(des);
            var newStickersetLocal =  InputStickerSetBase.TlDeserialize(des);
            return new() {
            PrevStickerset = prevStickersetLocal,
            NewStickerset = newStickersetLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionTogglePreHistoryHidden : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionTogglePreHistoryHidden> {
        public static readonly byte[] Identifier = [241,149,92,95,];
        public bool NewValue {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionTogglePreHistoryHidden TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var newValueLocal =  des.As<bool>().Read();
            return new() {
            NewValue = newValueLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionDefaultBannedRights : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionDefaultBannedRights> {
        public static readonly byte[] Identifier = [10,252,245,45,];
        public required ChatBannedRightsBase PrevBannedRights {get;set;}
        public required ChatBannedRightsBase NewBannedRights {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PrevBannedRights.TlSerialize());
            bytes.AddRange(NewBannedRights.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionDefaultBannedRights TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var prevBannedRightsLocal =  ChatBannedRightsBase.TlDeserialize(des);
            var newBannedRightsLocal =  ChatBannedRightsBase.TlDeserialize(des);
            return new() {
            PrevBannedRights = prevBannedRightsLocal,
            NewBannedRights = newBannedRightsLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionStopPoll : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionStopPoll> {
        public static readonly byte[] Identifier = [67,150,7,143,];
        public required MessageBase Message {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Message.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionStopPoll TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var messageLocal =  MessageBase.TlDeserialize(des);
            return new() {
            Message = messageLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionChangeLinkedChat : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionChangeLinkedChat> {
        public static readonly byte[] Identifier = [200,122,12,5,];
        public required long PrevValue {get;set;}
        public required long NewValue {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PrevValue.TlSerialize());
            bytes.AddRange(NewValue.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionChangeLinkedChat TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var prevValueLocal =  des.As<long>().Read();
            var newValueLocal =  des.As<long>().Read();
            return new() {
            PrevValue = prevValueLocal,
            NewValue = newValueLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionChangeLocation : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionChangeLocation> {
        public static readonly byte[] Identifier = [174,118,107,14,];
        public required ChannelLocationBase PrevValue {get;set;}
        public required ChannelLocationBase NewValue {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PrevValue.TlSerialize());
            bytes.AddRange(NewValue.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionChangeLocation TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var prevValueLocal =  ChannelLocationBase.TlDeserialize(des);
            var newValueLocal =  ChannelLocationBase.TlDeserialize(des);
            return new() {
            PrevValue = prevValueLocal,
            NewValue = newValueLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionToggleSlowMode : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionToggleSlowMode> {
        public static readonly byte[] Identifier = [121,151,144,83,];
        public required int PrevValue {get;set;}
        public required int NewValue {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PrevValue.TlSerialize());
            bytes.AddRange(NewValue.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionToggleSlowMode TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var prevValueLocal =  des.As<int>().Read();
            var newValueLocal =  des.As<int>().Read();
            return new() {
            PrevValue = prevValueLocal,
            NewValue = newValueLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionStartGroupCall : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionStartGroupCall> {
        public static readonly byte[] Identifier = [69,151,32,35,];
        public required InputGroupCallBase Call {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Call.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionStartGroupCall TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var callLocal =  InputGroupCallBase.TlDeserialize(des);
            return new() {
            Call = callLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionDiscardGroupCall : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionDiscardGroupCall> {
        public static readonly byte[] Identifier = [64,145,159,219,];
        public required InputGroupCallBase Call {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Call.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionDiscardGroupCall TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var callLocal =  InputGroupCallBase.TlDeserialize(des);
            return new() {
            Call = callLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionParticipantMute : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionParticipantMute> {
        public static readonly byte[] Identifier = [210,36,36,249,];
        public required GroupCallParticipantBase Participant {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Participant.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionParticipantMute TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var participantLocal =  GroupCallParticipantBase.TlDeserialize(des);
            return new() {
            Participant = participantLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionParticipantUnmute : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionParticipantUnmute> {
        public static readonly byte[] Identifier = [192,41,68,230,];
        public required GroupCallParticipantBase Participant {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Participant.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionParticipantUnmute TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var participantLocal =  GroupCallParticipantBase.TlDeserialize(des);
            return new() {
            Participant = participantLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionToggleGroupCallSetting : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionToggleGroupCallSetting> {
        public static readonly byte[] Identifier = [71,162,214,86,];
        public bool JoinMuted {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionToggleGroupCallSetting TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var joinMutedLocal =  des.As<bool>().Read();
            return new() {
            JoinMuted = joinMutedLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionParticipantJoinByInvite : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionParticipantJoinByInvite> {
        public static readonly byte[] Identifier = [88,193,159,254,];
        private int Flags;
        public bool ViaChatlist {get;set;}
        public required ExportedChatInviteBase Invite {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Invite.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionParticipantJoinByInvite TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var viaChatlistLocal = (flagsLocal & 1) is 0 ? default : true ;
            var inviteLocal =  ExportedChatInviteBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            ViaChatlist = viaChatlistLocal,
            Invite = inviteLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionExportedInviteDelete : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionExportedInviteDelete> {
        public static readonly byte[] Identifier = [164,252,80,90,];
        public required ExportedChatInviteBase Invite {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Invite.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionExportedInviteDelete TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var inviteLocal =  ExportedChatInviteBase.TlDeserialize(des);
            return new() {
            Invite = inviteLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionExportedInviteRevoke : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionExportedInviteRevoke> {
        public static readonly byte[] Identifier = [78,19,10,65,];
        public required ExportedChatInviteBase Invite {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Invite.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionExportedInviteRevoke TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var inviteLocal =  ExportedChatInviteBase.TlDeserialize(des);
            return new() {
            Invite = inviteLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionExportedInviteEdit : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionExportedInviteEdit> {
        public static readonly byte[] Identifier = [89,187,14,233,];
        public required ExportedChatInviteBase PrevInvite {get;set;}
        public required ExportedChatInviteBase NewInvite {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PrevInvite.TlSerialize());
            bytes.AddRange(NewInvite.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionExportedInviteEdit TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var prevInviteLocal =  ExportedChatInviteBase.TlDeserialize(des);
            var newInviteLocal =  ExportedChatInviteBase.TlDeserialize(des);
            return new() {
            PrevInvite = prevInviteLocal,
            NewInvite = newInviteLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionParticipantVolume : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionParticipantVolume> {
        public static readonly byte[] Identifier = [71,104,127,62,];
        public required GroupCallParticipantBase Participant {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Participant.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionParticipantVolume TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var participantLocal =  GroupCallParticipantBase.TlDeserialize(des);
            return new() {
            Participant = participantLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionChangeHistoryTTL : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionChangeHistoryTTL> {
        public static readonly byte[] Identifier = [56,26,148,110,];
        public required int PrevValue {get;set;}
        public required int NewValue {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PrevValue.TlSerialize());
            bytes.AddRange(NewValue.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionChangeHistoryTTL TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var prevValueLocal =  des.As<int>().Read();
            var newValueLocal =  des.As<int>().Read();
            return new() {
            PrevValue = prevValueLocal,
            NewValue = newValueLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionParticipantJoinByRequest : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionParticipantJoinByRequest> {
        public static readonly byte[] Identifier = [74,20,182,175,];
        public required ExportedChatInviteBase Invite {get;set;}
        public required long ApprovedBy {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Invite.TlSerialize());
            bytes.AddRange(ApprovedBy.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionParticipantJoinByRequest TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var inviteLocal =  ExportedChatInviteBase.TlDeserialize(des);
            var approvedByLocal =  des.As<long>().Read();
            return new() {
            Invite = inviteLocal,
            ApprovedBy = approvedByLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionToggleNoForwards : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionToggleNoForwards> {
        public static readonly byte[] Identifier = [102,199,42,203,];
        public bool NewValue {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionToggleNoForwards TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var newValueLocal =  des.As<bool>().Read();
            return new() {
            NewValue = newValueLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionSendMessage : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionSendMessage> {
        public static readonly byte[] Identifier = [104,40,143,39,];
        public required MessageBase Message {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Message.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionSendMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var messageLocal =  MessageBase.TlDeserialize(des);
            return new() {
            Message = messageLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionChangeAvailableReactions : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionChangeAvailableReactions> {
        public static readonly byte[] Identifier = [248,14,78,190,];
        public required ChatReactionsBase PrevValue {get;set;}
        public required ChatReactionsBase NewValue {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PrevValue.TlSerialize());
            bytes.AddRange(NewValue.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionChangeAvailableReactions TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var prevValueLocal =  ChatReactionsBase.TlDeserialize(des);
            var newValueLocal =  ChatReactionsBase.TlDeserialize(des);
            return new() {
            PrevValue = prevValueLocal,
            NewValue = newValueLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionChangeUsernames : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionChangeUsernames> {
        public static readonly byte[] Identifier = [169,179,79,240,];
        public required List<string> PrevValue {get;set;}
        public required List<string> NewValue {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PrevValue.TlSerialize());
            bytes.AddRange(NewValue.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionChangeUsernames TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var prevValueLocal =  des.ReadStrings();
            var newValueLocal =  des.ReadStrings();
            return new() {
            PrevValue = prevValueLocal,
            NewValue = newValueLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionToggleForum : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionToggleForum> {
        public static readonly byte[] Identifier = [131,99,204,2,];
        public bool NewValue {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionToggleForum TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var newValueLocal =  des.As<bool>().Read();
            return new() {
            NewValue = newValueLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionCreateTopic : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionCreateTopic> {
        public static readonly byte[] Identifier = [40,125,112,88,];
        public required ForumTopicBase Topic {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Topic.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionCreateTopic TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var topicLocal =  ForumTopicBase.TlDeserialize(des);
            return new() {
            Topic = topicLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionEditTopic : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionEditTopic> {
        public static readonly byte[] Identifier = [8,226,111,240,];
        public required ForumTopicBase PrevTopic {get;set;}
        public required ForumTopicBase NewTopic {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PrevTopic.TlSerialize());
            bytes.AddRange(NewTopic.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionEditTopic TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var prevTopicLocal =  ForumTopicBase.TlDeserialize(des);
            var newTopicLocal =  ForumTopicBase.TlDeserialize(des);
            return new() {
            PrevTopic = prevTopicLocal,
            NewTopic = newTopicLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionDeleteTopic : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionDeleteTopic> {
        public static readonly byte[] Identifier = [9,137,22,174,];
        public required ForumTopicBase Topic {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Topic.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionDeleteTopic TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var topicLocal =  ForumTopicBase.TlDeserialize(des);
            return new() {
            Topic = topicLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionPinTopic : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionPinTopic> {
        public static readonly byte[] Identifier = [59,53,141,93,];
        private int Flags;
        public ForumTopicBase? PrevTopic {get;set;}
        public ForumTopicBase? NewTopic {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (PrevTopic is not null ? 1 : 0) | (NewTopic is not null ? 2 : 0) ).TlSerialize());
            if(PrevTopic is not null) bytes.AddRange(PrevTopic.TlSerialize());
            if(NewTopic is not null) bytes.AddRange(NewTopic.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionPinTopic TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var prevTopicLocal = (flagsLocal & 1) is 0 ? default : ForumTopicBase.TlDeserialize(des) ;
            var newTopicLocal = (flagsLocal & 2) is 0 ? default : ForumTopicBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            PrevTopic = prevTopicLocal,
            NewTopic = newTopicLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionToggleAntiSpam : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionToggleAntiSpam> {
        public static readonly byte[] Identifier = [252,109,243,100,];
        public bool NewValue {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionToggleAntiSpam TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var newValueLocal =  des.As<bool>().Read();
            return new() {
            NewValue = newValueLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionChangePeerColor : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionChangePeerColor> {
        public static readonly byte[] Identifier = [128,231,150,87,];
        public required PeerColorBase PrevValue {get;set;}
        public required PeerColorBase NewValue {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PrevValue.TlSerialize());
            bytes.AddRange(NewValue.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionChangePeerColor TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var prevValueLocal =  PeerColorBase.TlDeserialize(des);
            var newValueLocal =  PeerColorBase.TlDeserialize(des);
            return new() {
            PrevValue = prevValueLocal,
            NewValue = newValueLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionChangeProfilePeerColor : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionChangeProfilePeerColor> {
        public static readonly byte[] Identifier = [37,123,71,94,];
        public required PeerColorBase PrevValue {get;set;}
        public required PeerColorBase NewValue {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PrevValue.TlSerialize());
            bytes.AddRange(NewValue.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionChangeProfilePeerColor TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var prevValueLocal =  PeerColorBase.TlDeserialize(des);
            var newValueLocal =  PeerColorBase.TlDeserialize(des);
            return new() {
            PrevValue = prevValueLocal,
            NewValue = newValueLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionChangeWallpaper : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionChangeWallpaper> {
        public static readonly byte[] Identifier = [82,93,187,49,];
        public required WallPaperBase PrevValue {get;set;}
        public required WallPaperBase NewValue {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PrevValue.TlSerialize());
            bytes.AddRange(NewValue.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionChangeWallpaper TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var prevValueLocal =  WallPaperBase.TlDeserialize(des);
            var newValueLocal =  WallPaperBase.TlDeserialize(des);
            return new() {
            PrevValue = prevValueLocal,
            NewValue = newValueLocal,
            };
        }
    }
    public class ChannelAdminLogEventActionChangeEmojiStatus : ChannelAdminLogEventActionBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventActionChangeEmojiStatus> {
        public static readonly byte[] Identifier = [177,254,169,62,];
        public required EmojiStatusBase PrevValue {get;set;}
        public required EmojiStatusBase NewValue {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PrevValue.TlSerialize());
            bytes.AddRange(NewValue.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventActionChangeEmojiStatus TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var prevValueLocal =  EmojiStatusBase.TlDeserialize(des);
            var newValueLocal =  EmojiStatusBase.TlDeserialize(des);
            return new() {
            PrevValue = prevValueLocal,
            NewValue = newValueLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChannelAdminLogEventNs {
    public class ChannelAdminLogEvent : ChannelAdminLogEventBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEvent> {
        public static readonly byte[] Identifier = [205,104,173,31,];
        public required long Id {get;set;}
        public required int Date {get;set;}
        public required long UserId {get;set;}
        public required ChannelAdminLogEventActionBase Action {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Action.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEvent TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var dateLocal =  des.As<int>().Read();
            var userIdLocal =  des.As<long>().Read();
            var actionLocal =  ChannelAdminLogEventActionBase.TlDeserialize(des);
            return new() {
            Id = idLocal,
            Date = dateLocal,
            UserId = userIdLocal,
            Action = actionLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChannelsAdminLogResultsNs {
    public class ChannelsAdminLogResults : ChannelsAdminLogResultsBase, ITlSerializable, ITlDeserializable<ChannelsAdminLogResults> {
        public static readonly byte[] Identifier = [77,247,138,237,];
        public required List<ChannelAdminLogEventBase> Events {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Events.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelsAdminLogResults TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var eventsLocal =  des.Read<ChannelAdminLogEventBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Events = eventsLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChannelAdminLogEventsFilterNs {
    public class ChannelAdminLogEventsFilter : ChannelAdminLogEventsFilterBase, ITlSerializable, ITlDeserializable<ChannelAdminLogEventsFilter> {
        public static readonly byte[] Identifier = [228,122,16,234,];
        private int Flags;
        public bool Join {get;set;}
        public bool Leave {get;set;}
        public bool Invite {get;set;}
        public bool Ban {get;set;}
        public bool Unban {get;set;}
        public bool Kick {get;set;}
        public bool Unkick {get;set;}
        public bool Promote {get;set;}
        public bool Demote {get;set;}
        public bool Info {get;set;}
        public bool Settings {get;set;}
        public bool Pinned {get;set;}
        public bool Edit {get;set;}
        public bool Delete {get;set;}
        public bool GroupCall {get;set;}
        public bool Invites {get;set;}
        public bool Send {get;set;}
        public bool Forums {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelAdminLogEventsFilter TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var joinLocal = (flagsLocal & 1) is 0 ? default : true ;
            var leaveLocal = (flagsLocal & 2) is 0 ? default : true ;
            var inviteLocal = (flagsLocal & 4) is 0 ? default : true ;
            var banLocal = (flagsLocal & 8) is 0 ? default : true ;
            var unbanLocal = (flagsLocal & 16) is 0 ? default : true ;
            var kickLocal = (flagsLocal & 32) is 0 ? default : true ;
            var unkickLocal = (flagsLocal & 64) is 0 ? default : true ;
            var promoteLocal = (flagsLocal & 128) is 0 ? default : true ;
            var demoteLocal = (flagsLocal & 256) is 0 ? default : true ;
            var infoLocal = (flagsLocal & 512) is 0 ? default : true ;
            var settingsLocal = (flagsLocal & 1024) is 0 ? default : true ;
            var pinnedLocal = (flagsLocal & 2048) is 0 ? default : true ;
            var editLocal = (flagsLocal & 4096) is 0 ? default : true ;
            var deleteLocal = (flagsLocal & 8192) is 0 ? default : true ;
            var groupCallLocal = (flagsLocal & 16384) is 0 ? default : true ;
            var invitesLocal = (flagsLocal & 32768) is 0 ? default : true ;
            var sendLocal = (flagsLocal & 65536) is 0 ? default : true ;
            var forumsLocal = (flagsLocal & 131072) is 0 ? default : true ;
            return new() {
            Flags = flagsLocal,
            Join = joinLocal,
            Leave = leaveLocal,
            Invite = inviteLocal,
            Ban = banLocal,
            Unban = unbanLocal,
            Kick = kickLocal,
            Unkick = unkickLocal,
            Promote = promoteLocal,
            Demote = demoteLocal,
            Info = infoLocal,
            Settings = settingsLocal,
            Pinned = pinnedLocal,
            Edit = editLocal,
            Delete = deleteLocal,
            GroupCall = groupCallLocal,
            Invites = invitesLocal,
            Send = sendLocal,
            Forums = forumsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PopularContactNs {
    public class PopularContact : PopularContactBase, ITlSerializable, ITlDeserializable<PopularContact> {
        public static readonly byte[] Identifier = [117,65,225,92,];
        public required long ClientId {get;set;}
        public required int Importers {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ClientId.TlSerialize());
            bytes.AddRange(Importers.TlSerialize());
            return bytes.ToArray();
        }

        public new static PopularContact TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var clientIdLocal =  des.As<long>().Read();
            var importersLocal =  des.As<int>().Read();
            return new() {
            ClientId = clientIdLocal,
            Importers = importersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesFavedStickersNs {
    public class MessagesFavedStickersNotModified : MessagesFavedStickersBase, ITlSerializable, ITlDeserializable<MessagesFavedStickersNotModified> {
        public static readonly byte[] Identifier = [211,166,143,158,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static MessagesFavedStickersNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class MessagesFavedStickers : MessagesFavedStickersBase, ITlSerializable, ITlDeserializable<MessagesFavedStickers> {
        public static readonly byte[] Identifier = [151,16,181,44,];
        public required long Hash {get;set;}
        public required List<StickerPackBase> Packs {get;set;}
        public required List<DocumentBase> Stickers {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(Packs.TlSerialize());
            bytes.AddRange(Stickers.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesFavedStickers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var hashLocal =  des.As<long>().Read();
            var packsLocal =  des.Read<StickerPackBase>();
            var stickersLocal =  des.Read<DocumentBase>();
            return new() {
            Hash = hashLocal,
            Packs = packsLocal,
            Stickers = stickersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.RecentMeUrlNs {
    public class RecentMeUrlUnknown : RecentMeUrlBase, ITlSerializable, ITlDeserializable<RecentMeUrlUnknown> {
        public static readonly byte[] Identifier = [61,209,225,70,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Url.TlSerialize());
            return bytes.ToArray();
        }

        public new static RecentMeUrlUnknown TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlLocal =  des.As<string>().Read();
            return new() {
            Url = urlLocal,
            };
        }
    }
    public class RecentMeUrlUser : RecentMeUrlBase, ITlSerializable, ITlDeserializable<RecentMeUrlUser> {
        public static readonly byte[] Identifier = [226,9,44,185,];
        public required long UserId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            return bytes.ToArray();
        }

        public new static RecentMeUrlUser TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlLocal =  des.As<string>().Read();
            var userIdLocal =  des.As<long>().Read();
            return new() {
            Url = urlLocal,
            UserId = userIdLocal,
            };
        }
    }
    public class RecentMeUrlChat : RecentMeUrlBase, ITlSerializable, ITlDeserializable<RecentMeUrlChat> {
        public static readonly byte[] Identifier = [210,113,218,178,];
        public required long ChatId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(ChatId.TlSerialize());
            return bytes.ToArray();
        }

        public new static RecentMeUrlChat TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlLocal =  des.As<string>().Read();
            var chatIdLocal =  des.As<long>().Read();
            return new() {
            Url = urlLocal,
            ChatId = chatIdLocal,
            };
        }
    }
    public class RecentMeUrlChatInvite : RecentMeUrlBase, ITlSerializable, ITlDeserializable<RecentMeUrlChatInvite> {
        public static readonly byte[] Identifier = [29,8,73,235,];
        public required ChatInviteBase ChatInvite {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(ChatInvite.TlSerialize());
            return bytes.ToArray();
        }

        public new static RecentMeUrlChatInvite TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlLocal =  des.As<string>().Read();
            var chatInviteLocal =  ChatInviteBase.TlDeserialize(des);
            return new() {
            Url = urlLocal,
            ChatInvite = chatInviteLocal,
            };
        }
    }
    public class RecentMeUrlStickerSet : RecentMeUrlBase, ITlSerializable, ITlDeserializable<RecentMeUrlStickerSet> {
        public static readonly byte[] Identifier = [220,87,10,188,];
        public required StickerSetCoveredBase Set {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(Set.TlSerialize());
            return bytes.ToArray();
        }

        public new static RecentMeUrlStickerSet TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlLocal =  des.As<string>().Read();
            var setLocal =  StickerSetCoveredBase.TlDeserialize(des);
            return new() {
            Url = urlLocal,
            Set = setLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.HelpRecentMeUrlsNs {
    public class HelpRecentMeUrls : HelpRecentMeUrlsBase, ITlSerializable, ITlDeserializable<HelpRecentMeUrls> {
        public static readonly byte[] Identifier = [215,16,3,14,];
        public required List<RecentMeUrlBase> Urls {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Urls.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static HelpRecentMeUrls TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlsLocal =  des.Read<RecentMeUrlBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Urls = urlsLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputSingleMediaNs {
    public class InputSingleMedia : InputSingleMediaBase, ITlSerializable, ITlDeserializable<InputSingleMedia> {
        public static readonly byte[] Identifier = [31,233,198,28,];
        private int Flags;
        public required InputMediaBase Media {get;set;}
        public required long RandomId {get;set;}
        public required string Message {get;set;}
        public List<MessageEntityBase>? Entities {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Entities is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Media.TlSerialize());
            bytes.AddRange(RandomId.TlSerialize());
            bytes.AddRange(Message.TlSerialize());
            if(Entities is not null) bytes.AddRange(Entities.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputSingleMedia TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var mediaLocal =  InputMediaBase.TlDeserialize(des);
            var randomIdLocal =  des.As<long>().Read();
            var messageLocal =  des.As<string>().Read();
            var entitiesLocal = (flagsLocal & 1) is 0 ? default : des.Read<MessageEntityBase>() ;
            return new() {
            Flags = flagsLocal,
            Media = mediaLocal,
            RandomId = randomIdLocal,
            Message = messageLocal,
            Entities = entitiesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.WebAuthorizationNs {
    public class WebAuthorization : WebAuthorizationBase, ITlSerializable, ITlDeserializable<WebAuthorization> {
        public static readonly byte[] Identifier = [82,244,248,166,];
        public required long Hash {get;set;}
        public required long BotId {get;set;}
        public required string Domain {get;set;}
        public required string Browser {get;set;}
        public required string Platform {get;set;}
        public required int DateCreated {get;set;}
        public required int DateActive {get;set;}
        public required string Ip {get;set;}
        public required string Region {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(BotId.TlSerialize());
            bytes.AddRange(Domain.TlSerialize());
            bytes.AddRange(Browser.TlSerialize());
            bytes.AddRange(Platform.TlSerialize());
            bytes.AddRange(DateCreated.TlSerialize());
            bytes.AddRange(DateActive.TlSerialize());
            bytes.AddRange(Ip.TlSerialize());
            bytes.AddRange(Region.TlSerialize());
            return bytes.ToArray();
        }

        public new static WebAuthorization TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var hashLocal =  des.As<long>().Read();
            var botIdLocal =  des.As<long>().Read();
            var domainLocal =  des.As<string>().Read();
            var browserLocal =  des.As<string>().Read();
            var platformLocal =  des.As<string>().Read();
            var dateCreatedLocal =  des.As<int>().Read();
            var dateActiveLocal =  des.As<int>().Read();
            var ipLocal =  des.As<string>().Read();
            var regionLocal =  des.As<string>().Read();
            return new() {
            Hash = hashLocal,
            BotId = botIdLocal,
            Domain = domainLocal,
            Browser = browserLocal,
            Platform = platformLocal,
            DateCreated = dateCreatedLocal,
            DateActive = dateActiveLocal,
            Ip = ipLocal,
            Region = regionLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AccountWebAuthorizationsNs {
    public class AccountWebAuthorizations : AccountWebAuthorizationsBase, ITlSerializable, ITlDeserializable<AccountWebAuthorizations> {
        public static readonly byte[] Identifier = [252,201,86,237,];
        public required List<WebAuthorizationBase> Authorizations {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Authorizations.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountWebAuthorizations TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var authorizationsLocal =  des.Read<WebAuthorizationBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Authorizations = authorizationsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputMessageNs {
    public class InputMessageID : InputMessageBase, ITlSerializable, ITlDeserializable<InputMessageID> {
        public static readonly byte[] Identifier = [34,163,118,166,];
        public required int Id {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMessageID TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<int>().Read();
            return new() {
            Id = idLocal,
            };
        }
    }
    public class InputMessageReplyTo : InputMessageBase, ITlSerializable, ITlDeserializable<InputMessageReplyTo> {
        public static readonly byte[] Identifier = [149,131,216,186,];
        public required int Id {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMessageReplyTo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<int>().Read();
            return new() {
            Id = idLocal,
            };
        }
    }
    public class InputMessagePinned : InputMessageBase, ITlSerializable, ITlDeserializable<InputMessagePinned> {
        public static readonly byte[] Identifier = [56,37,135,134,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputMessagePinned TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputMessageCallbackQuery : InputMessageBase, ITlSerializable, ITlDeserializable<InputMessageCallbackQuery> {
        public static readonly byte[] Identifier = [126,26,250,172,];
        public required int Id {get;set;}
        public required long QueryId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(QueryId.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMessageCallbackQuery TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<int>().Read();
            var queryIdLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            QueryId = queryIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputDialogPeerNs {
    public class InputDialogPeer : InputDialogPeerBase, ITlSerializable, ITlDeserializable<InputDialogPeer> {
        public static readonly byte[] Identifier = [183,254,170,252,];
        public required InputPeerBase Peer {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputDialogPeer TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  InputPeerBase.TlDeserialize(des);
            return new() {
            Peer = peerLocal,
            };
        }
    }
    public class InputDialogPeerFolder : InputDialogPeerBase, ITlSerializable, ITlDeserializable<InputDialogPeerFolder> {
        public static readonly byte[] Identifier = [39,5,96,100,];
        public required int FolderId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(FolderId.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputDialogPeerFolder TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var folderIdLocal =  des.As<int>().Read();
            return new() {
            FolderId = folderIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.DialogPeerNs {
    public class DialogPeer : DialogPeerBase, ITlSerializable, ITlDeserializable<DialogPeer> {
        public static readonly byte[] Identifier = [5,191,109,229,];
        public required PeerBase Peer {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            return bytes.ToArray();
        }

        public new static DialogPeer TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            return new() {
            Peer = peerLocal,
            };
        }
    }
    public class DialogPeerFolder : DialogPeerBase, ITlSerializable, ITlDeserializable<DialogPeerFolder> {
        public static readonly byte[] Identifier = [226,25,69,81,];
        public required int FolderId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(FolderId.TlSerialize());
            return bytes.ToArray();
        }

        public new static DialogPeerFolder TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var folderIdLocal =  des.As<int>().Read();
            return new() {
            FolderId = folderIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesFoundStickerSetsNs {
    public class MessagesFoundStickerSetsNotModified : MessagesFoundStickerSetsBase, ITlSerializable, ITlDeserializable<MessagesFoundStickerSetsNotModified> {
        public static readonly byte[] Identifier = [93,182,84,13,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static MessagesFoundStickerSetsNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class MessagesFoundStickerSets : MessagesFoundStickerSetsBase, ITlSerializable, ITlDeserializable<MessagesFoundStickerSets> {
        public static readonly byte[] Identifier = [210,157,240,138,];
        public required long Hash {get;set;}
        public required List<StickerSetCoveredBase> Sets {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(Sets.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesFoundStickerSets TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var hashLocal =  des.As<long>().Read();
            var setsLocal =  des.Read<StickerSetCoveredBase>();
            return new() {
            Hash = hashLocal,
            Sets = setsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.FileHashNs {
    public class FileHash : FileHashBase, ITlSerializable, ITlDeserializable<FileHash> {
        public static readonly byte[] Identifier = [92,3,155,243,];
        public required long Offset {get;set;}
        public required int Limit {get;set;}
        public required byte[] Hash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Limit.TlSerialize());
            bytes.AddRange(Hash.TlSerialize());
            return bytes.ToArray();
        }

        public new static FileHash TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var offsetLocal =  des.As<long>().Read();
            var limitLocal =  des.As<int>().Read();
            var hashLocal =  des.As<byte[]>().Read();
            return new() {
            Offset = offsetLocal,
            Limit = limitLocal,
            Hash = hashLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputClientProxyNs {
    public class InputClientProxy : InputClientProxyBase, ITlSerializable, ITlDeserializable<InputClientProxy> {
        public static readonly byte[] Identifier = [63,139,88,117,];
        public required string Address {get;set;}
        public required int Port {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Address.TlSerialize());
            bytes.AddRange(Port.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputClientProxy TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var addressLocal =  des.As<string>().Read();
            var portLocal =  des.As<int>().Read();
            return new() {
            Address = addressLocal,
            Port = portLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.HelpTermsOfServiceUpdateNs {
    public class HelpTermsOfServiceUpdateEmpty : HelpTermsOfServiceUpdateBase, ITlSerializable, ITlDeserializable<HelpTermsOfServiceUpdateEmpty> {
        public static readonly byte[] Identifier = [127,159,48,227,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Expires.TlSerialize());
            return bytes.ToArray();
        }

        public new static HelpTermsOfServiceUpdateEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var expiresLocal =  des.As<int>().Read();
            return new() {
            Expires = expiresLocal,
            };
        }
    }
    public class HelpTermsOfServiceUpdate : HelpTermsOfServiceUpdateBase, ITlSerializable, ITlDeserializable<HelpTermsOfServiceUpdate> {
        public static readonly byte[] Identifier = [97,249,236,40,];
        public required HelpTermsOfServiceBase TermsOfService {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Expires.TlSerialize());
            bytes.AddRange(TermsOfService.TlSerialize());
            return bytes.ToArray();
        }

        public new static HelpTermsOfServiceUpdate TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var expiresLocal =  des.As<int>().Read();
            var termsOfServiceLocal =  HelpTermsOfServiceBase.TlDeserialize(des);
            return new() {
            Expires = expiresLocal,
            TermsOfService = termsOfServiceLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputSecureFileNs {
    public class InputSecureFileUploaded : InputSecureFileBase, ITlSerializable, ITlDeserializable<InputSecureFileUploaded> {
        public static readonly byte[] Identifier = [240,176,52,51,];
        public required int Parts {get;set;}
        public required string Md5Checksum {get;set;}
        public required byte[] FileHash {get;set;}
        public required byte[] Secret {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Parts.TlSerialize());
            bytes.AddRange(Md5Checksum.TlSerialize());
            bytes.AddRange(FileHash.TlSerialize());
            bytes.AddRange(Secret.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputSecureFileUploaded TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var partsLocal =  des.As<int>().Read();
            var md5ChecksumLocal =  des.As<string>().Read();
            var fileHashLocal =  des.As<byte[]>().Read();
            var secretLocal =  des.As<byte[]>().Read();
            return new() {
            Id = idLocal,
            Parts = partsLocal,
            Md5Checksum = md5ChecksumLocal,
            FileHash = fileHashLocal,
            Secret = secretLocal,
            };
        }
    }
    public class InputSecureFile : InputSecureFileBase, ITlSerializable, ITlDeserializable<InputSecureFile> {
        public static readonly byte[] Identifier = [190,229,103,83,];
        public required long AccessHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputSecureFile TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            AccessHash = accessHashLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.SecureFileNs {
    public class SecureFileEmpty : SecureFileBase, ITlSerializable, ITlDeserializable<SecureFileEmpty> {
        public static readonly byte[] Identifier = [68,151,25,100,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SecureFileEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SecureFile : SecureFileBase, ITlSerializable, ITlDeserializable<SecureFile> {
        public static readonly byte[] Identifier = [126,194,9,125,];
        public required long Id {get;set;}
        public required long AccessHash {get;set;}
        public required long Size {get;set;}
        public required int DcId {get;set;}
        public required int Date {get;set;}
        public required byte[] FileHash {get;set;}
        public required byte[] Secret {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(Size.TlSerialize());
            bytes.AddRange(DcId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(FileHash.TlSerialize());
            bytes.AddRange(Secret.TlSerialize());
            return bytes.ToArray();
        }

        public new static SecureFile TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var sizeLocal =  des.As<long>().Read();
            var dcIdLocal =  des.As<int>().Read();
            var dateLocal =  des.As<int>().Read();
            var fileHashLocal =  des.As<byte[]>().Read();
            var secretLocal =  des.As<byte[]>().Read();
            return new() {
            Id = idLocal,
            AccessHash = accessHashLocal,
            Size = sizeLocal,
            DcId = dcIdLocal,
            Date = dateLocal,
            FileHash = fileHashLocal,
            Secret = secretLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.SecureDataNs {
    public class SecureData : SecureDataBase, ITlSerializable, ITlDeserializable<SecureData> {
        public static readonly byte[] Identifier = [195,190,234,138,];
        public required byte[] Data {get;set;}
        public required byte[] DataHash {get;set;}
        public required byte[] Secret {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Data.TlSerialize());
            bytes.AddRange(DataHash.TlSerialize());
            bytes.AddRange(Secret.TlSerialize());
            return bytes.ToArray();
        }

        public new static SecureData TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var dataLocal =  des.As<byte[]>().Read();
            var dataHashLocal =  des.As<byte[]>().Read();
            var secretLocal =  des.As<byte[]>().Read();
            return new() {
            Data = dataLocal,
            DataHash = dataHashLocal,
            Secret = secretLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.SecurePlainDataNs {
    public class SecurePlainPhone : SecurePlainDataBase, ITlSerializable, ITlDeserializable<SecurePlainPhone> {
        public static readonly byte[] Identifier = [221,153,96,125,];
        public required string Phone {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Phone.TlSerialize());
            return bytes.ToArray();
        }

        public new static SecurePlainPhone TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var phoneLocal =  des.As<string>().Read();
            return new() {
            Phone = phoneLocal,
            };
        }
    }
    public class SecurePlainEmail : SecurePlainDataBase, ITlSerializable, ITlDeserializable<SecurePlainEmail> {
        public static readonly byte[] Identifier = [95,90,236,33,];
        public required string Email {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Email.TlSerialize());
            return bytes.ToArray();
        }

        public new static SecurePlainEmail TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var emailLocal =  des.As<string>().Read();
            return new() {
            Email = emailLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.SecureValueTypeNs {
    public class SecureValueTypePersonalDetails : SecureValueTypeBase, ITlSerializable, ITlDeserializable<SecureValueTypePersonalDetails> {
        public static readonly byte[] Identifier = [227,129,42,157,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SecureValueTypePersonalDetails TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SecureValueTypePassport : SecureValueTypeBase, ITlSerializable, ITlDeserializable<SecureValueTypePassport> {
        public static readonly byte[] Identifier = [0,106,172,61,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SecureValueTypePassport TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SecureValueTypeDriverLicense : SecureValueTypeBase, ITlSerializable, ITlDeserializable<SecureValueTypeDriverLicense> {
        public static readonly byte[] Identifier = [196,37,228,6,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SecureValueTypeDriverLicense TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SecureValueTypeIdentityCard : SecureValueTypeBase, ITlSerializable, ITlDeserializable<SecureValueTypeIdentityCard> {
        public static readonly byte[] Identifier = [75,116,208,160,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SecureValueTypeIdentityCard TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SecureValueTypeInternalPassport : SecureValueTypeBase, ITlSerializable, ITlDeserializable<SecureValueTypeInternalPassport> {
        public static readonly byte[] Identifier = [35,143,164,153,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SecureValueTypeInternalPassport TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SecureValueTypeAddress : SecureValueTypeBase, ITlSerializable, ITlDeserializable<SecureValueTypeAddress> {
        public static readonly byte[] Identifier = [38,30,227,203,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SecureValueTypeAddress TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SecureValueTypeUtilityBill : SecureValueTypeBase, ITlSerializable, ITlDeserializable<SecureValueTypeUtilityBill> {
        public static readonly byte[] Identifier = [78,149,54,252,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SecureValueTypeUtilityBill TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SecureValueTypeBankStatement : SecureValueTypeBase, ITlSerializable, ITlDeserializable<SecureValueTypeBankStatement> {
        public static readonly byte[] Identifier = [13,124,19,137,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SecureValueTypeBankStatement TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SecureValueTypeRentalAgreement : SecureValueTypeBase, ITlSerializable, ITlDeserializable<SecureValueTypeRentalAgreement> {
        public static readonly byte[] Identifier = [136,52,136,139,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SecureValueTypeRentalAgreement TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SecureValueTypePassportRegistration : SecureValueTypeBase, ITlSerializable, ITlDeserializable<SecureValueTypePassportRegistration> {
        public static readonly byte[] Identifier = [106,128,227,153,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SecureValueTypePassportRegistration TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SecureValueTypeTemporaryRegistration : SecureValueTypeBase, ITlSerializable, ITlDeserializable<SecureValueTypeTemporaryRegistration> {
        public static readonly byte[] Identifier = [51,236,2,234,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SecureValueTypeTemporaryRegistration TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SecureValueTypePhone : SecureValueTypeBase, ITlSerializable, ITlDeserializable<SecureValueTypePhone> {
        public static readonly byte[] Identifier = [219,170,32,179,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SecureValueTypePhone TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SecureValueTypeEmail : SecureValueTypeBase, ITlSerializable, ITlDeserializable<SecureValueTypeEmail> {
        public static readonly byte[] Identifier = [238,167,60,142,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SecureValueTypeEmail TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.SecureValueNs {
    public class SecureValue : SecureValueBase, ITlSerializable, ITlDeserializable<SecureValue> {
        public static readonly byte[] Identifier = [202,160,127,24,];
        private int Flags;
        public required SecureValueTypeBase Type {get;set;}
        public SecureDataBase? Data {get;set;}
        public SecureFileBase? FrontSide {get;set;}
        public SecureFileBase? ReverseSide {get;set;}
        public SecureFileBase? Selfie {get;set;}
        public List<SecureFileBase>? Translation {get;set;}
        public List<SecureFileBase>? Files {get;set;}
        public SecurePlainDataBase? PlainData {get;set;}
        public required byte[] Hash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Data is not null ? 1 : 0) | (FrontSide is not null ? 2 : 0) | (ReverseSide is not null ? 4 : 0) | (Selfie is not null ? 8 : 0) | (Translation is not null ? 64 : 0) | (Files is not null ? 16 : 0) | (PlainData is not null ? 32 : 0) ).TlSerialize());
            bytes.AddRange(Type.TlSerialize());
            if(Data is not null) bytes.AddRange(Data.TlSerialize());
            if(FrontSide is not null) bytes.AddRange(FrontSide.TlSerialize());
            if(ReverseSide is not null) bytes.AddRange(ReverseSide.TlSerialize());
            if(Selfie is not null) bytes.AddRange(Selfie.TlSerialize());
            if(Translation is not null) bytes.AddRange(Translation.TlSerialize());
            if(Files is not null) bytes.AddRange(Files.TlSerialize());
            if(PlainData is not null) bytes.AddRange(PlainData.TlSerialize());
            bytes.AddRange(Hash.TlSerialize());
            return bytes.ToArray();
        }

        public new static SecureValue TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var typeLocal =  SecureValueTypeBase.TlDeserialize(des);
            var dataLocal = (flagsLocal & 1) is 0 ? default : SecureDataBase.TlDeserialize(des) ;
            var frontSideLocal = (flagsLocal & 2) is 0 ? default : SecureFileBase.TlDeserialize(des) ;
            var reverseSideLocal = (flagsLocal & 4) is 0 ? default : SecureFileBase.TlDeserialize(des) ;
            var selfieLocal = (flagsLocal & 8) is 0 ? default : SecureFileBase.TlDeserialize(des) ;
            var translationLocal = (flagsLocal & 64) is 0 ? default : des.Read<SecureFileBase>() ;
            var filesLocal = (flagsLocal & 16) is 0 ? default : des.Read<SecureFileBase>() ;
            var plainDataLocal = (flagsLocal & 32) is 0 ? default : SecurePlainDataBase.TlDeserialize(des) ;
            var hashLocal =  des.As<byte[]>().Read();
            return new() {
            Flags = flagsLocal,
            Type = typeLocal,
            Data = dataLocal,
            FrontSide = frontSideLocal,
            ReverseSide = reverseSideLocal,
            Selfie = selfieLocal,
            Translation = translationLocal,
            Files = filesLocal,
            PlainData = plainDataLocal,
            Hash = hashLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputSecureValueNs {
    public class InputSecureValue : InputSecureValueBase, ITlSerializable, ITlDeserializable<InputSecureValue> {
        public static readonly byte[] Identifier = [167,208,33,219,];
        private int Flags;
        public required SecureValueTypeBase Type {get;set;}
        public SecureDataBase? Data {get;set;}
        public InputSecureFileBase? FrontSide {get;set;}
        public InputSecureFileBase? ReverseSide {get;set;}
        public InputSecureFileBase? Selfie {get;set;}
        public List<InputSecureFileBase>? Translation {get;set;}
        public List<InputSecureFileBase>? Files {get;set;}
        public SecurePlainDataBase? PlainData {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Data is not null ? 1 : 0) | (FrontSide is not null ? 2 : 0) | (ReverseSide is not null ? 4 : 0) | (Selfie is not null ? 8 : 0) | (Translation is not null ? 64 : 0) | (Files is not null ? 16 : 0) | (PlainData is not null ? 32 : 0) ).TlSerialize());
            bytes.AddRange(Type.TlSerialize());
            if(Data is not null) bytes.AddRange(Data.TlSerialize());
            if(FrontSide is not null) bytes.AddRange(FrontSide.TlSerialize());
            if(ReverseSide is not null) bytes.AddRange(ReverseSide.TlSerialize());
            if(Selfie is not null) bytes.AddRange(Selfie.TlSerialize());
            if(Translation is not null) bytes.AddRange(Translation.TlSerialize());
            if(Files is not null) bytes.AddRange(Files.TlSerialize());
            if(PlainData is not null) bytes.AddRange(PlainData.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputSecureValue TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var typeLocal =  SecureValueTypeBase.TlDeserialize(des);
            var dataLocal = (flagsLocal & 1) is 0 ? default : SecureDataBase.TlDeserialize(des) ;
            var frontSideLocal = (flagsLocal & 2) is 0 ? default : InputSecureFileBase.TlDeserialize(des) ;
            var reverseSideLocal = (flagsLocal & 4) is 0 ? default : InputSecureFileBase.TlDeserialize(des) ;
            var selfieLocal = (flagsLocal & 8) is 0 ? default : InputSecureFileBase.TlDeserialize(des) ;
            var translationLocal = (flagsLocal & 64) is 0 ? default : des.Read<InputSecureFileBase>() ;
            var filesLocal = (flagsLocal & 16) is 0 ? default : des.Read<InputSecureFileBase>() ;
            var plainDataLocal = (flagsLocal & 32) is 0 ? default : SecurePlainDataBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Type = typeLocal,
            Data = dataLocal,
            FrontSide = frontSideLocal,
            ReverseSide = reverseSideLocal,
            Selfie = selfieLocal,
            Translation = translationLocal,
            Files = filesLocal,
            PlainData = plainDataLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.SecureValueHashNs {
    public class SecureValueHash : SecureValueHashBase, ITlSerializable, ITlDeserializable<SecureValueHash> {
        public static readonly byte[] Identifier = [176,205,30,237,];
        public required SecureValueTypeBase Type {get;set;}
        public required byte[] Hash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Type.TlSerialize());
            bytes.AddRange(Hash.TlSerialize());
            return bytes.ToArray();
        }

        public new static SecureValueHash TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var typeLocal =  SecureValueTypeBase.TlDeserialize(des);
            var hashLocal =  des.As<byte[]>().Read();
            return new() {
            Type = typeLocal,
            Hash = hashLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.SecureValueErrorNs {
    public class SecureValueErrorData : SecureValueErrorBase, ITlSerializable, ITlDeserializable<SecureValueErrorData> {
        public static readonly byte[] Identifier = [217,11,164,232,];
        public required byte[] DataHash {get;set;}
        public required string Field {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Type.TlSerialize());
            bytes.AddRange(DataHash.TlSerialize());
            bytes.AddRange(Field.TlSerialize());
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static SecureValueErrorData TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var typeLocal =  SecureValueTypeBase.TlDeserialize(des);
            var dataHashLocal =  des.As<byte[]>().Read();
            var fieldLocal =  des.As<string>().Read();
            var textLocal =  des.As<string>().Read();
            return new() {
            Type = typeLocal,
            DataHash = dataHashLocal,
            Field = fieldLocal,
            Text = textLocal,
            };
        }
    }
    public class SecureValueErrorFrontSide : SecureValueErrorBase, ITlSerializable, ITlDeserializable<SecureValueErrorFrontSide> {
        public static readonly byte[] Identifier = [250,61,190,0,];
        public required byte[] FileHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Type.TlSerialize());
            bytes.AddRange(FileHash.TlSerialize());
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static SecureValueErrorFrontSide TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var typeLocal =  SecureValueTypeBase.TlDeserialize(des);
            var fileHashLocal =  des.As<byte[]>().Read();
            var textLocal =  des.As<string>().Read();
            return new() {
            Type = typeLocal,
            FileHash = fileHashLocal,
            Text = textLocal,
            };
        }
    }
    public class SecureValueErrorReverseSide : SecureValueErrorBase, ITlSerializable, ITlDeserializable<SecureValueErrorReverseSide> {
        public static readonly byte[] Identifier = [165,42,138,134,];
        public required byte[] FileHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Type.TlSerialize());
            bytes.AddRange(FileHash.TlSerialize());
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static SecureValueErrorReverseSide TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var typeLocal =  SecureValueTypeBase.TlDeserialize(des);
            var fileHashLocal =  des.As<byte[]>().Read();
            var textLocal =  des.As<string>().Read();
            return new() {
            Type = typeLocal,
            FileHash = fileHashLocal,
            Text = textLocal,
            };
        }
    }
    public class SecureValueErrorSelfie : SecureValueErrorBase, ITlSerializable, ITlDeserializable<SecureValueErrorSelfie> {
        public static readonly byte[] Identifier = [214,206,55,229,];
        public required byte[] FileHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Type.TlSerialize());
            bytes.AddRange(FileHash.TlSerialize());
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static SecureValueErrorSelfie TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var typeLocal =  SecureValueTypeBase.TlDeserialize(des);
            var fileHashLocal =  des.As<byte[]>().Read();
            var textLocal =  des.As<string>().Read();
            return new() {
            Type = typeLocal,
            FileHash = fileHashLocal,
            Text = textLocal,
            };
        }
    }
    public class SecureValueErrorFile : SecureValueErrorBase, ITlSerializable, ITlDeserializable<SecureValueErrorFile> {
        public static readonly byte[] Identifier = [115,8,112,122,];
        public required byte[] FileHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Type.TlSerialize());
            bytes.AddRange(FileHash.TlSerialize());
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static SecureValueErrorFile TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var typeLocal =  SecureValueTypeBase.TlDeserialize(des);
            var fileHashLocal =  des.As<byte[]>().Read();
            var textLocal =  des.As<string>().Read();
            return new() {
            Type = typeLocal,
            FileHash = fileHashLocal,
            Text = textLocal,
            };
        }
    }
    public class SecureValueErrorFiles : SecureValueErrorBase, ITlSerializable, ITlDeserializable<SecureValueErrorFiles> {
        public static readonly byte[] Identifier = [233,32,98,102,];
        public required List<byte[]> FileHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Type.TlSerialize());
            bytes.AddRange(FileHash.TlSerialize());
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static SecureValueErrorFiles TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var typeLocal =  SecureValueTypeBase.TlDeserialize(des);
            var fileHashLocal =  des.ReadByteArrayList();
            var textLocal =  des.As<string>().Read();
            return new() {
            Type = typeLocal,
            FileHash = fileHashLocal,
            Text = textLocal,
            };
        }
    }
    public class SecureValueError : SecureValueErrorBase, ITlSerializable, ITlDeserializable<SecureValueError> {
        public static readonly byte[] Identifier = [143,117,157,134,];
        public required byte[] Hash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Type.TlSerialize());
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static SecureValueError TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var typeLocal =  SecureValueTypeBase.TlDeserialize(des);
            var hashLocal =  des.As<byte[]>().Read();
            var textLocal =  des.As<string>().Read();
            return new() {
            Type = typeLocal,
            Hash = hashLocal,
            Text = textLocal,
            };
        }
    }
    public class SecureValueErrorTranslationFile : SecureValueErrorBase, ITlSerializable, ITlDeserializable<SecureValueErrorTranslationFile> {
        public static readonly byte[] Identifier = [112,71,20,161,];
        public required byte[] FileHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Type.TlSerialize());
            bytes.AddRange(FileHash.TlSerialize());
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static SecureValueErrorTranslationFile TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var typeLocal =  SecureValueTypeBase.TlDeserialize(des);
            var fileHashLocal =  des.As<byte[]>().Read();
            var textLocal =  des.As<string>().Read();
            return new() {
            Type = typeLocal,
            FileHash = fileHashLocal,
            Text = textLocal,
            };
        }
    }
    public class SecureValueErrorTranslationFiles : SecureValueErrorBase, ITlSerializable, ITlDeserializable<SecureValueErrorTranslationFiles> {
        public static readonly byte[] Identifier = [216,109,99,52,];
        public required List<byte[]> FileHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Type.TlSerialize());
            bytes.AddRange(FileHash.TlSerialize());
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static SecureValueErrorTranslationFiles TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var typeLocal =  SecureValueTypeBase.TlDeserialize(des);
            var fileHashLocal =  des.ReadByteArrayList();
            var textLocal =  des.As<string>().Read();
            return new() {
            Type = typeLocal,
            FileHash = fileHashLocal,
            Text = textLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.SecureCredentialsEncryptedNs {
    public class SecureCredentialsEncrypted : SecureCredentialsEncryptedBase, ITlSerializable, ITlDeserializable<SecureCredentialsEncrypted> {
        public static readonly byte[] Identifier = [71,234,240,51,];
        public required byte[] Data {get;set;}
        public required byte[] Hash {get;set;}
        public required byte[] Secret {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Data.TlSerialize());
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(Secret.TlSerialize());
            return bytes.ToArray();
        }

        public new static SecureCredentialsEncrypted TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var dataLocal =  des.As<byte[]>().Read();
            var hashLocal =  des.As<byte[]>().Read();
            var secretLocal =  des.As<byte[]>().Read();
            return new() {
            Data = dataLocal,
            Hash = hashLocal,
            Secret = secretLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AccountAuthorizationFormNs {
    public class AccountAuthorizationForm : AccountAuthorizationFormBase, ITlSerializable, ITlDeserializable<AccountAuthorizationForm> {
        public static readonly byte[] Identifier = [216,28,46,173,];
        private int Flags;
        public required List<SecureRequiredTypeBase> RequiredTypes {get;set;}
        public required List<SecureValueBase> Values {get;set;}
        public required List<SecureValueErrorBase> Errors {get;set;}
        public required List<UserBase> Users {get;set;}
        public string? PrivacyPolicyUrl {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (PrivacyPolicyUrl is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(RequiredTypes.TlSerialize());
            bytes.AddRange(Values.TlSerialize());
            bytes.AddRange(Errors.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            if(PrivacyPolicyUrl is not null) bytes.AddRange(PrivacyPolicyUrl.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountAuthorizationForm TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var requiredTypesLocal =  des.Read<SecureRequiredTypeBase>();
            var valuesLocal =  des.Read<SecureValueBase>();
            var errorsLocal =  des.Read<SecureValueErrorBase>();
            var usersLocal =  des.Read<UserBase>();
            var privacyPolicyUrlLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            RequiredTypes = requiredTypesLocal,
            Values = valuesLocal,
            Errors = errorsLocal,
            Users = usersLocal,
            PrivacyPolicyUrl = privacyPolicyUrlLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AccountSentEmailCodeNs {
    public class AccountSentEmailCode : AccountSentEmailCodeBase, ITlSerializable, ITlDeserializable<AccountSentEmailCode> {
        public static readonly byte[] Identifier = [79,133,31,129,];
        public required string EmailPattern {get;set;}
        public required int Length {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(EmailPattern.TlSerialize());
            bytes.AddRange(Length.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountSentEmailCode TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var emailPatternLocal =  des.As<string>().Read();
            var lengthLocal =  des.As<int>().Read();
            return new() {
            EmailPattern = emailPatternLocal,
            Length = lengthLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.HelpDeepLinkInfoNs {
    public class HelpDeepLinkInfoEmpty : HelpDeepLinkInfoBase, ITlSerializable, ITlDeserializable<HelpDeepLinkInfoEmpty> {
        public static readonly byte[] Identifier = [102,161,175,102,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static HelpDeepLinkInfoEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class HelpDeepLinkInfo : HelpDeepLinkInfoBase, ITlSerializable, ITlDeserializable<HelpDeepLinkInfo> {
        public static readonly byte[] Identifier = [50,232,78,106,];
        private int Flags;
        public bool UpdateApp {get;set;}
        public required string Message {get;set;}
        public List<MessageEntityBase>? Entities {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Entities is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(Message.TlSerialize());
            if(Entities is not null) bytes.AddRange(Entities.TlSerialize());
            return bytes.ToArray();
        }

        public new static HelpDeepLinkInfo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var updateAppLocal = (flagsLocal & 1) is 0 ? default : true ;
            var messageLocal =  des.As<string>().Read();
            var entitiesLocal = (flagsLocal & 2) is 0 ? default : des.Read<MessageEntityBase>() ;
            return new() {
            Flags = flagsLocal,
            UpdateApp = updateAppLocal,
            Message = messageLocal,
            Entities = entitiesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.SavedContactNs {
    public class SavedPhoneContact : SavedContactBase, ITlSerializable, ITlDeserializable<SavedPhoneContact> {
        public static readonly byte[] Identifier = [86,189,66,17,];
        public required string Phone {get;set;}
        public required string FirstName {get;set;}
        public required string LastName {get;set;}
        public required int Date {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Phone.TlSerialize());
            bytes.AddRange(FirstName.TlSerialize());
            bytes.AddRange(LastName.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            return bytes.ToArray();
        }

        public new static SavedPhoneContact TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var phoneLocal =  des.As<string>().Read();
            var firstNameLocal =  des.As<string>().Read();
            var lastNameLocal =  des.As<string>().Read();
            var dateLocal =  des.As<int>().Read();
            return new() {
            Phone = phoneLocal,
            FirstName = firstNameLocal,
            LastName = lastNameLocal,
            Date = dateLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AccountTakeoutNs {
    public class AccountTakeout : AccountTakeoutBase, ITlSerializable, ITlDeserializable<AccountTakeout> {
        public static readonly byte[] Identifier = [1,69,186,77,];
        public required long Id {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountTakeout TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PasswordKdfAlgoNs {
    public class PasswordKdfAlgoUnknown : PasswordKdfAlgoBase, ITlSerializable, ITlDeserializable<PasswordKdfAlgoUnknown> {
        public static readonly byte[] Identifier = [150,176,90,212,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static PasswordKdfAlgoUnknown TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow : PasswordKdfAlgoBase, ITlSerializable, ITlDeserializable<PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow> {
        public static readonly byte[] Identifier = [74,45,145,58,];
        public required byte[] Salt1 {get;set;}
        public required byte[] Salt2 {get;set;}
        public required int G {get;set;}
        public required byte[] P {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Salt1.TlSerialize());
            bytes.AddRange(Salt2.TlSerialize());
            bytes.AddRange(G.TlSerialize());
            bytes.AddRange(P.TlSerialize());
            return bytes.ToArray();
        }

        public new static PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var salt1Local =  des.As<byte[]>().Read();
            var salt2Local =  des.As<byte[]>().Read();
            var gLocal =  des.As<int>().Read();
            var pLocal =  des.As<byte[]>().Read();
            return new() {
            Salt1 = salt1Local,
            Salt2 = salt2Local,
            G = gLocal,
            P = pLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.SecurePasswordKdfAlgoNs {
    public class SecurePasswordKdfAlgoUnknown : SecurePasswordKdfAlgoBase, ITlSerializable, ITlDeserializable<SecurePasswordKdfAlgoUnknown> {
        public static readonly byte[] Identifier = [55,133,74,0,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static SecurePasswordKdfAlgoUnknown TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 : SecurePasswordKdfAlgoBase, ITlSerializable, ITlDeserializable<SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000> {
        public static readonly byte[] Identifier = [160,221,242,187,];
        public required byte[] Salt {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Salt.TlSerialize());
            return bytes.ToArray();
        }

        public new static SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var saltLocal =  des.As<byte[]>().Read();
            return new() {
            Salt = saltLocal,
            };
        }
    }
    public class SecurePasswordKdfAlgoSHA512 : SecurePasswordKdfAlgoBase, ITlSerializable, ITlDeserializable<SecurePasswordKdfAlgoSHA512> {
        public static readonly byte[] Identifier = [146,29,71,134,];
        public required byte[] Salt {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Salt.TlSerialize());
            return bytes.ToArray();
        }

        public new static SecurePasswordKdfAlgoSHA512 TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var saltLocal =  des.As<byte[]>().Read();
            return new() {
            Salt = saltLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.SecureSecretSettingsNs {
    public class SecureSecretSettings : SecureSecretSettingsBase, ITlSerializable, ITlDeserializable<SecureSecretSettings> {
        public static readonly byte[] Identifier = [172,188,39,21,];
        public required SecurePasswordKdfAlgoBase SecureAlgo {get;set;}
        public required byte[] SecureSecret {get;set;}
        public required long SecureSecretId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(SecureAlgo.TlSerialize());
            bytes.AddRange(SecureSecret.TlSerialize());
            bytes.AddRange(SecureSecretId.TlSerialize());
            return bytes.ToArray();
        }

        public new static SecureSecretSettings TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var secureAlgoLocal =  SecurePasswordKdfAlgoBase.TlDeserialize(des);
            var secureSecretLocal =  des.As<byte[]>().Read();
            var secureSecretIdLocal =  des.As<long>().Read();
            return new() {
            SecureAlgo = secureAlgoLocal,
            SecureSecret = secureSecretLocal,
            SecureSecretId = secureSecretIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputCheckPasswordSRPNs {
    public class InputCheckPasswordEmpty : InputCheckPasswordSRPBase, ITlSerializable, ITlDeserializable<InputCheckPasswordEmpty> {
        public static readonly byte[] Identifier = [88,246,128,152,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InputCheckPasswordEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InputCheckPasswordSRP : InputCheckPasswordSRPBase, ITlSerializable, ITlDeserializable<InputCheckPasswordSRP> {
        public static readonly byte[] Identifier = [130,240,127,210,];
        public required long SrpId {get;set;}
        public required byte[] A {get;set;}
        public required byte[] M1 {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(SrpId.TlSerialize());
            bytes.AddRange(A.TlSerialize());
            bytes.AddRange(M1.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputCheckPasswordSRP TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var srpIdLocal =  des.As<long>().Read();
            var aLocal =  des.As<byte[]>().Read();
            var m1Local =  des.As<byte[]>().Read();
            return new() {
            SrpId = srpIdLocal,
            A = aLocal,
            M1 = m1Local,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.SecureRequiredTypeNs {
    public class SecureRequiredType : SecureRequiredTypeBase, ITlSerializable, ITlDeserializable<SecureRequiredType> {
        public static readonly byte[] Identifier = [218,153,157,130,];
        private int Flags;
        public bool NativeNames {get;set;}
        public bool SelfieRequired {get;set;}
        public bool TranslationRequired {get;set;}
        public required SecureValueTypeBase Type {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Type.TlSerialize());
            return bytes.ToArray();
        }

        public new static SecureRequiredType TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var nativeNamesLocal = (flagsLocal & 1) is 0 ? default : true ;
            var selfieRequiredLocal = (flagsLocal & 2) is 0 ? default : true ;
            var translationRequiredLocal = (flagsLocal & 4) is 0 ? default : true ;
            var typeLocal =  SecureValueTypeBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            NativeNames = nativeNamesLocal,
            SelfieRequired = selfieRequiredLocal,
            TranslationRequired = translationRequiredLocal,
            Type = typeLocal,
            };
        }
    }
    public class SecureRequiredTypeOneOf : SecureRequiredTypeBase, ITlSerializable, ITlDeserializable<SecureRequiredTypeOneOf> {
        public static readonly byte[] Identifier = [180,119,116,2,];
        public required List<SecureRequiredTypeBase> Types {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Types.TlSerialize());
            return bytes.ToArray();
        }

        public new static SecureRequiredTypeOneOf TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var typesLocal =  des.Read<SecureRequiredTypeBase>();
            return new() {
            Types = typesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.HelpPassportConfigNs {
    public class HelpPassportConfigNotModified : HelpPassportConfigBase, ITlSerializable, ITlDeserializable<HelpPassportConfigNotModified> {
        public static readonly byte[] Identifier = [87,244,185,191,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static HelpPassportConfigNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class HelpPassportConfig : HelpPassportConfigBase, ITlSerializable, ITlDeserializable<HelpPassportConfig> {
        public static readonly byte[] Identifier = [175,214,152,160,];
        public required int Hash {get;set;}
        public required DataJSONBase CountriesLangs {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(CountriesLangs.TlSerialize());
            return bytes.ToArray();
        }

        public new static HelpPassportConfig TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var hashLocal =  des.As<int>().Read();
            var countriesLangsLocal =  DataJSONBase.TlDeserialize(des);
            return new() {
            Hash = hashLocal,
            CountriesLangs = countriesLangsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputAppEventNs {
    public class InputAppEvent : InputAppEventBase, ITlSerializable, ITlDeserializable<InputAppEvent> {
        public static readonly byte[] Identifier = [69,18,27,29,];
        public required double Time {get;set;}
        public required string Type {get;set;}
        public required long Peer {get;set;}
        public required JSONValueBase Data {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Time.TlSerialize());
            bytes.AddRange(Type.TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(Data.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputAppEvent TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var timeLocal =  des.As<double>().Read();
            var typeLocal =  des.As<string>().Read();
            var peerLocal =  des.As<long>().Read();
            var dataLocal =  JSONValueBase.TlDeserialize(des);
            return new() {
            Time = timeLocal,
            Type = typeLocal,
            Peer = peerLocal,
            Data = dataLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.JSONObjectValueNs {
    public class JsonObjectValue : JSONObjectValueBase, ITlSerializable, ITlDeserializable<JsonObjectValue> {
        public static readonly byte[] Identifier = [217,27,222,192,];
        public required string Key {get;set;}
        public required JSONValueBase Value {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Key.TlSerialize());
            bytes.AddRange(Value.TlSerialize());
            return bytes.ToArray();
        }

        public new static JsonObjectValue TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var keyLocal =  des.As<string>().Read();
            var valueLocal =  JSONValueBase.TlDeserialize(des);
            return new() {
            Key = keyLocal,
            Value = valueLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.JSONValueNs {
    public class JsonNull : JSONValueBase, ITlSerializable, ITlDeserializable<JsonNull> {
        public static readonly byte[] Identifier = [104,123,109,63,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static JsonNull TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class JsonBool : JSONValueBase, ITlSerializable, ITlDeserializable<JsonBool> {
        public static readonly byte[] Identifier = [106,94,52,199,];
        public bool Value {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static JsonBool TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var valueLocal =  des.As<bool>().Read();
            return new() {
            Value = valueLocal,
            };
        }
    }
    public class JsonNumber : JSONValueBase, ITlSerializable, ITlDeserializable<JsonNumber> {
        public static readonly byte[] Identifier = [164,223,224,43,];
        public required double Value {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Value.TlSerialize());
            return bytes.ToArray();
        }

        public new static JsonNumber TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var valueLocal =  des.As<double>().Read();
            return new() {
            Value = valueLocal,
            };
        }
    }
    public class JsonString : JSONValueBase, ITlSerializable, ITlDeserializable<JsonString> {
        public static readonly byte[] Identifier = [122,118,30,183,];
        public required string Value {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Value.TlSerialize());
            return bytes.ToArray();
        }

        public new static JsonString TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var valueLocal =  des.As<string>().Read();
            return new() {
            Value = valueLocal,
            };
        }
    }
    public class JsonArray : JSONValueBase, ITlSerializable, ITlDeserializable<JsonArray> {
        public static readonly byte[] Identifier = [99,71,68,247,];
        public required List<JSONValueBase> Value {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Value.TlSerialize());
            return bytes.ToArray();
        }

        public new static JsonArray TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var valueLocal =  des.Read<JSONValueBase>();
            return new() {
            Value = valueLocal,
            };
        }
    }
    public class JsonObject : JSONValueBase, ITlSerializable, ITlDeserializable<JsonObject> {
        public static readonly byte[] Identifier = [157,212,193,153,];
        public required List<JSONObjectValueBase> Value {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Value.TlSerialize());
            return bytes.ToArray();
        }

        public new static JsonObject TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var valueLocal =  des.Read<JSONObjectValueBase>();
            return new() {
            Value = valueLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PageTableCellNs {
    public class PageTableCell : PageTableCellBase, ITlSerializable, ITlDeserializable<PageTableCell> {
        public static readonly byte[] Identifier = [106,107,86,52,];
        private int Flags;
        public bool Header {get;set;}
        public bool AlignCenter {get;set;}
        public bool AlignRight {get;set;}
        public bool ValignMiddle {get;set;}
        public bool ValignBottom {get;set;}
        public RichTextBase? Text {get;set;}
        public int? Colspan {get;set;}
        public int? Rowspan {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Text is not null ? 128 : 0) | (Colspan is not null ? 2 : 0) | (Rowspan is not null ? 4 : 0) ).TlSerialize());
            if(Text is not null) bytes.AddRange(Text.TlSerialize());
            if(Colspan is not null) bytes.AddRange(Colspan.TlSerialize());
            if(Rowspan is not null) bytes.AddRange(Rowspan.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageTableCell TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var headerLocal = (flagsLocal & 1) is 0 ? default : true ;
            var alignCenterLocal = (flagsLocal & 8) is 0 ? default : true ;
            var alignRightLocal = (flagsLocal & 16) is 0 ? default : true ;
            var valignMiddleLocal = (flagsLocal & 32) is 0 ? default : true ;
            var valignBottomLocal = (flagsLocal & 64) is 0 ? default : true ;
            var textLocal = (flagsLocal & 128) is 0 ? default : RichTextBase.TlDeserialize(des) ;
            var colspanLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            var rowspanLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Header = headerLocal,
            AlignCenter = alignCenterLocal,
            AlignRight = alignRightLocal,
            ValignMiddle = valignMiddleLocal,
            ValignBottom = valignBottomLocal,
            Text = textLocal,
            Colspan = colspanLocal,
            Rowspan = rowspanLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PageTableRowNs {
    public class PageTableRow : PageTableRowBase, ITlSerializable, ITlDeserializable<PageTableRow> {
        public static readonly byte[] Identifier = [229,197,192,224,];
        public required List<PageTableCellBase> Cells {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Cells.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageTableRow TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var cellsLocal =  des.Read<PageTableCellBase>();
            return new() {
            Cells = cellsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PageCaptionNs {
    public class PageCaption : PageCaptionBase, ITlSerializable, ITlDeserializable<PageCaption> {
        public static readonly byte[] Identifier = [87,118,116,111,];
        public required RichTextBase Text {get;set;}
        public required RichTextBase Credit {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(Credit.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageCaption TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            var creditLocal =  RichTextBase.TlDeserialize(des);
            return new() {
            Text = textLocal,
            Credit = creditLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PageListItemNs {
    public class PageListItemText : PageListItemBase, ITlSerializable, ITlDeserializable<PageListItemText> {
        public static readonly byte[] Identifier = [205,182,47,185,];
        public required RichTextBase Text {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageListItemText TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  RichTextBase.TlDeserialize(des);
            return new() {
            Text = textLocal,
            };
        }
    }
    public class PageListItemBlocks : PageListItemBase, ITlSerializable, ITlDeserializable<PageListItemBlocks> {
        public static readonly byte[] Identifier = [252,115,224,37,];
        public required List<PageBlockBase> Blocks {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Blocks.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageListItemBlocks TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var blocksLocal =  des.Read<PageBlockBase>();
            return new() {
            Blocks = blocksLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PageListOrderedItemNs {
    public class PageListOrderedItemText : PageListOrderedItemBase, ITlSerializable, ITlDeserializable<PageListOrderedItemText> {
        public static readonly byte[] Identifier = [71,128,6,94,];
        public required RichTextBase Text {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Num.TlSerialize());
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageListOrderedItemText TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var numLocal =  des.As<string>().Read();
            var textLocal =  RichTextBase.TlDeserialize(des);
            return new() {
            Num = numLocal,
            Text = textLocal,
            };
        }
    }
    public class PageListOrderedItemBlocks : PageListOrderedItemBase, ITlSerializable, ITlDeserializable<PageListOrderedItemBlocks> {
        public static readonly byte[] Identifier = [54,137,221,152,];
        public required List<PageBlockBase> Blocks {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Num.TlSerialize());
            bytes.AddRange(Blocks.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageListOrderedItemBlocks TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var numLocal =  des.As<string>().Read();
            var blocksLocal =  des.Read<PageBlockBase>();
            return new() {
            Num = numLocal,
            Blocks = blocksLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PageRelatedArticleNs {
    public class PageRelatedArticle : PageRelatedArticleBase, ITlSerializable, ITlDeserializable<PageRelatedArticle> {
        public static readonly byte[] Identifier = [8,220,144,179,];
        private int Flags;
        public required string Url {get;set;}
        public required long WebpageId {get;set;}
        public string? Title {get;set;}
        public string? Description {get;set;}
        public long? PhotoId {get;set;}
        public string? Author {get;set;}
        public int? PublishedDate {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Title is not null ? 1 : 0) | (Description is not null ? 2 : 0) | (PhotoId is not null ? 4 : 0) | (Author is not null ? 8 : 0) | (PublishedDate is not null ? 16 : 0) ).TlSerialize());
            bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(WebpageId.TlSerialize());
            if(Title is not null) bytes.AddRange(Title.TlSerialize());
            if(Description is not null) bytes.AddRange(Description.TlSerialize());
            if(PhotoId is not null) bytes.AddRange(PhotoId.TlSerialize());
            if(Author is not null) bytes.AddRange(Author.TlSerialize());
            if(PublishedDate is not null) bytes.AddRange(PublishedDate.TlSerialize());
            return bytes.ToArray();
        }

        public new static PageRelatedArticle TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var urlLocal =  des.As<string>().Read();
            var webpageIdLocal =  des.As<long>().Read();
            var titleLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var descriptionLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var photoIdLocal = (flagsLocal & 4) is 0 ? default : des.As<long>().Read() ;
            var authorLocal = (flagsLocal & 8) is 0 ? default : des.As<string>().Read() ;
            var publishedDateLocal = (flagsLocal & 16) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Url = urlLocal,
            WebpageId = webpageIdLocal,
            Title = titleLocal,
            Description = descriptionLocal,
            PhotoId = photoIdLocal,
            Author = authorLocal,
            PublishedDate = publishedDateLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PageNs {
    public class Page : PageBase, ITlSerializable, ITlDeserializable<Page> {
        public static readonly byte[] Identifier = [13,127,101,152,];
        private int Flags;
        public bool Part {get;set;}
        public bool Rtl {get;set;}
        public bool V2 {get;set;}
        public required string Url {get;set;}
        public required List<PageBlockBase> Blocks {get;set;}
        public required List<PhotoBase> Photos {get;set;}
        public required List<DocumentBase> Documents {get;set;}
        public int? Views {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Views is not null ? 8 : 0) ).TlSerialize());
            bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(Blocks.TlSerialize());
            bytes.AddRange(Photos.TlSerialize());
            bytes.AddRange(Documents.TlSerialize());
            if(Views is not null) bytes.AddRange(Views.TlSerialize());
            return bytes.ToArray();
        }

        public new static Page TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var partLocal = (flagsLocal & 1) is 0 ? default : true ;
            var rtlLocal = (flagsLocal & 2) is 0 ? default : true ;
            var v2Local = (flagsLocal & 4) is 0 ? default : true ;
            var urlLocal =  des.As<string>().Read();
            var blocksLocal =  des.Read<PageBlockBase>();
            var photosLocal =  des.Read<PhotoBase>();
            var documentsLocal =  des.Read<DocumentBase>();
            var viewsLocal = (flagsLocal & 8) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Part = partLocal,
            Rtl = rtlLocal,
            V2 = v2Local,
            Url = urlLocal,
            Blocks = blocksLocal,
            Photos = photosLocal,
            Documents = documentsLocal,
            Views = viewsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.HelpSupportNameNs {
    public class HelpSupportName : HelpSupportNameBase, ITlSerializable, ITlDeserializable<HelpSupportName> {
        public static readonly byte[] Identifier = [201,241,5,140,];
        public required string Name {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Name.TlSerialize());
            return bytes.ToArray();
        }

        public new static HelpSupportName TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var nameLocal =  des.As<string>().Read();
            return new() {
            Name = nameLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.HelpUserInfoNs {
    public class HelpUserInfoEmpty : HelpUserInfoBase, ITlSerializable, ITlDeserializable<HelpUserInfoEmpty> {
        public static readonly byte[] Identifier = [237,46,174,243,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static HelpUserInfoEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class HelpUserInfo : HelpUserInfoBase, ITlSerializable, ITlDeserializable<HelpUserInfo> {
        public static readonly byte[] Identifier = [88,55,235,1,];
        public required string Message {get;set;}
        public required List<MessageEntityBase> Entities {get;set;}
        public required string Author {get;set;}
        public required int Date {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Message.TlSerialize());
            bytes.AddRange(Entities.TlSerialize());
            bytes.AddRange(Author.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            return bytes.ToArray();
        }

        public new static HelpUserInfo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var messageLocal =  des.As<string>().Read();
            var entitiesLocal =  des.Read<MessageEntityBase>();
            var authorLocal =  des.As<string>().Read();
            var dateLocal =  des.As<int>().Read();
            return new() {
            Message = messageLocal,
            Entities = entitiesLocal,
            Author = authorLocal,
            Date = dateLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PollAnswerNs {
    public class PollAnswer : PollAnswerBase, ITlSerializable, ITlDeserializable<PollAnswer> {
        public static readonly byte[] Identifier = [233,194,169,108,];
        public required string Text {get;set;}
        public required byte[] Option {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(Option.TlSerialize());
            return bytes.ToArray();
        }

        public new static PollAnswer TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  des.As<string>().Read();
            var optionLocal =  des.As<byte[]>().Read();
            return new() {
            Text = textLocal,
            Option = optionLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PollNs {
    public class Poll : PollBase, ITlSerializable, ITlDeserializable<Poll> {
        public static readonly byte[] Identifier = [97,129,225,134,];
        public required long Id {get;set;}
        private int Flags;
        public bool Closed {get;set;}
        public bool PublicVoters {get;set;}
        public bool MultipleChoice {get;set;}
        public bool Quiz {get;set;}
        public required string Question {get;set;}
        public required List<PollAnswerBase> Answers {get;set;}
        public int? ClosePeriod {get;set;}
        public int? CloseDate {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange((0 | (ClosePeriod is not null ? 16 : 0) | (CloseDate is not null ? 32 : 0) ).TlSerialize());
            bytes.AddRange(Question.TlSerialize());
            bytes.AddRange(Answers.TlSerialize());
            if(ClosePeriod is not null) bytes.AddRange(ClosePeriod.TlSerialize());
            if(CloseDate is not null) bytes.AddRange(CloseDate.TlSerialize());
            return bytes.ToArray();
        }

        public new static Poll TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var flagsLocal =  des.As<int>().Read();
            var closedLocal = (flagsLocal & 1) is 0 ? default : true ;
            var publicVotersLocal = (flagsLocal & 2) is 0 ? default : true ;
            var multipleChoiceLocal = (flagsLocal & 4) is 0 ? default : true ;
            var quizLocal = (flagsLocal & 8) is 0 ? default : true ;
            var questionLocal =  des.As<string>().Read();
            var answersLocal =  des.Read<PollAnswerBase>();
            var closePeriodLocal = (flagsLocal & 16) is 0 ? default : des.As<int>().Read() ;
            var closeDateLocal = (flagsLocal & 32) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Id = idLocal,
            Flags = flagsLocal,
            Closed = closedLocal,
            PublicVoters = publicVotersLocal,
            MultipleChoice = multipleChoiceLocal,
            Quiz = quizLocal,
            Question = questionLocal,
            Answers = answersLocal,
            ClosePeriod = closePeriodLocal,
            CloseDate = closeDateLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PollAnswerVotersNs {
    public class PollAnswerVoters : PollAnswerVotersBase, ITlSerializable, ITlDeserializable<PollAnswerVoters> {
        public static readonly byte[] Identifier = [210,218,109,59,];
        private int Flags;
        public bool Chosen {get;set;}
        public bool Correct {get;set;}
        public required byte[] Option {get;set;}
        public required int Voters {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Option.TlSerialize());
            bytes.AddRange(Voters.TlSerialize());
            return bytes.ToArray();
        }

        public new static PollAnswerVoters TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var chosenLocal = (flagsLocal & 1) is 0 ? default : true ;
            var correctLocal = (flagsLocal & 2) is 0 ? default : true ;
            var optionLocal =  des.As<byte[]>().Read();
            var votersLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            Chosen = chosenLocal,
            Correct = correctLocal,
            Option = optionLocal,
            Voters = votersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PollResultsNs {
    public class PollResults : PollResultsBase, ITlSerializable, ITlDeserializable<PollResults> {
        public static readonly byte[] Identifier = [32,36,223,122,];
        private int Flags;
        public bool Min {get;set;}
        public List<PollAnswerVotersBase>? Results {get;set;}
        public int? TotalVoters {get;set;}
        public List<PeerBase>? RecentVoters {get;set;}
        public string? Solution {get;set;}
        public List<MessageEntityBase>? SolutionEntities {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Results is not null ? 2 : 0) | (TotalVoters is not null ? 4 : 0) | (RecentVoters is not null ? 8 : 0) | (Solution is not null ? 16 : 0) | (SolutionEntities is not null ? 16 : 0) ).TlSerialize());
            if(Results is not null) bytes.AddRange(Results.TlSerialize());
            if(TotalVoters is not null) bytes.AddRange(TotalVoters.TlSerialize());
            if(RecentVoters is not null) bytes.AddRange(RecentVoters.TlSerialize());
            if(Solution is not null) bytes.AddRange(Solution.TlSerialize());
            if(SolutionEntities is not null) bytes.AddRange(SolutionEntities.TlSerialize());
            return bytes.ToArray();
        }

        public new static PollResults TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var minLocal = (flagsLocal & 1) is 0 ? default : true ;
            var resultsLocal = (flagsLocal & 2) is 0 ? default : des.Read<PollAnswerVotersBase>() ;
            var totalVotersLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            var recentVotersLocal = (flagsLocal & 8) is 0 ? default : des.Read<PeerBase>() ;
            var solutionLocal = (flagsLocal & 16) is 0 ? default : des.As<string>().Read() ;
            var solutionEntitiesLocal = (flagsLocal & 16) is 0 ? default : des.Read<MessageEntityBase>() ;
            return new() {
            Flags = flagsLocal,
            Min = minLocal,
            Results = resultsLocal,
            TotalVoters = totalVotersLocal,
            RecentVoters = recentVotersLocal,
            Solution = solutionLocal,
            SolutionEntities = solutionEntitiesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChatOnlinesNs {
    public class ChatOnlines : ChatOnlinesBase, ITlSerializable, ITlDeserializable<ChatOnlines> {
        public static readonly byte[] Identifier = [80,226,65,240,];
        public required int Onlines {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Onlines.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatOnlines TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var onlinesLocal =  des.As<int>().Read();
            return new() {
            Onlines = onlinesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StatsURLNs {
    public class StatsURL : StatsURLBase, ITlSerializable, ITlDeserializable<StatsURL> {
        public static readonly byte[] Identifier = [224,113,169,71,];
        public required string Url {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Url.TlSerialize());
            return bytes.ToArray();
        }

        public new static StatsURL TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlLocal =  des.As<string>().Read();
            return new() {
            Url = urlLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChatAdminRightsNs {
    public class ChatAdminRights : ChatAdminRightsBase, ITlSerializable, ITlDeserializable<ChatAdminRights> {
        public static readonly byte[] Identifier = [213,36,178,95,];
        private int Flags;
        public bool ChangeInfo {get;set;}
        public bool PostMessages {get;set;}
        public bool EditMessages {get;set;}
        public bool DeleteMessages {get;set;}
        public bool BanUsers {get;set;}
        public bool InviteUsers {get;set;}
        public bool PinMessages {get;set;}
        public bool AddAdmins {get;set;}
        public bool Anonymous {get;set;}
        public bool ManageCall {get;set;}
        public bool Other {get;set;}
        public bool ManageTopics {get;set;}
        public bool PostStories {get;set;}
        public bool EditStories {get;set;}
        public bool DeleteStories {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatAdminRights TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var changeInfoLocal = (flagsLocal & 1) is 0 ? default : true ;
            var postMessagesLocal = (flagsLocal & 2) is 0 ? default : true ;
            var editMessagesLocal = (flagsLocal & 4) is 0 ? default : true ;
            var deleteMessagesLocal = (flagsLocal & 8) is 0 ? default : true ;
            var banUsersLocal = (flagsLocal & 16) is 0 ? default : true ;
            var inviteUsersLocal = (flagsLocal & 32) is 0 ? default : true ;
            var pinMessagesLocal = (flagsLocal & 128) is 0 ? default : true ;
            var addAdminsLocal = (flagsLocal & 512) is 0 ? default : true ;
            var anonymousLocal = (flagsLocal & 1024) is 0 ? default : true ;
            var manageCallLocal = (flagsLocal & 2048) is 0 ? default : true ;
            var otherLocal = (flagsLocal & 4096) is 0 ? default : true ;
            var manageTopicsLocal = (flagsLocal & 8192) is 0 ? default : true ;
            var postStoriesLocal = (flagsLocal & 16384) is 0 ? default : true ;
            var editStoriesLocal = (flagsLocal & 32768) is 0 ? default : true ;
            var deleteStoriesLocal = (flagsLocal & 65536) is 0 ? default : true ;
            return new() {
            Flags = flagsLocal,
            ChangeInfo = changeInfoLocal,
            PostMessages = postMessagesLocal,
            EditMessages = editMessagesLocal,
            DeleteMessages = deleteMessagesLocal,
            BanUsers = banUsersLocal,
            InviteUsers = inviteUsersLocal,
            PinMessages = pinMessagesLocal,
            AddAdmins = addAdminsLocal,
            Anonymous = anonymousLocal,
            ManageCall = manageCallLocal,
            Other = otherLocal,
            ManageTopics = manageTopicsLocal,
            PostStories = postStoriesLocal,
            EditStories = editStoriesLocal,
            DeleteStories = deleteStoriesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChatBannedRightsNs {
    public class ChatBannedRights : ChatBannedRightsBase, ITlSerializable, ITlDeserializable<ChatBannedRights> {
        public static readonly byte[] Identifier = [24,4,18,159,];
        private int Flags;
        public bool ViewMessages {get;set;}
        public bool SendMessages {get;set;}
        public bool SendMedia {get;set;}
        public bool SendStickers {get;set;}
        public bool SendGifs {get;set;}
        public bool SendGames {get;set;}
        public bool SendInline {get;set;}
        public bool EmbedLinks {get;set;}
        public bool SendPolls {get;set;}
        public bool ChangeInfo {get;set;}
        public bool InviteUsers {get;set;}
        public bool PinMessages {get;set;}
        public bool ManageTopics {get;set;}
        public bool SendPhotos {get;set;}
        public bool SendVideos {get;set;}
        public bool SendRoundvideos {get;set;}
        public bool SendAudios {get;set;}
        public bool SendVoices {get;set;}
        public bool SendDocs {get;set;}
        public bool SendPlain {get;set;}
        public required int UntilDate {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(UntilDate.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatBannedRights TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var viewMessagesLocal = (flagsLocal & 1) is 0 ? default : true ;
            var sendMessagesLocal = (flagsLocal & 2) is 0 ? default : true ;
            var sendMediaLocal = (flagsLocal & 4) is 0 ? default : true ;
            var sendStickersLocal = (flagsLocal & 8) is 0 ? default : true ;
            var sendGifsLocal = (flagsLocal & 16) is 0 ? default : true ;
            var sendGamesLocal = (flagsLocal & 32) is 0 ? default : true ;
            var sendInlineLocal = (flagsLocal & 64) is 0 ? default : true ;
            var embedLinksLocal = (flagsLocal & 128) is 0 ? default : true ;
            var sendPollsLocal = (flagsLocal & 256) is 0 ? default : true ;
            var changeInfoLocal = (flagsLocal & 1024) is 0 ? default : true ;
            var inviteUsersLocal = (flagsLocal & 32768) is 0 ? default : true ;
            var pinMessagesLocal = (flagsLocal & 131072) is 0 ? default : true ;
            var manageTopicsLocal = (flagsLocal & 262144) is 0 ? default : true ;
            var sendPhotosLocal = (flagsLocal & 524288) is 0 ? default : true ;
            var sendVideosLocal = (flagsLocal & 1048576) is 0 ? default : true ;
            var sendRoundvideosLocal = (flagsLocal & 2097152) is 0 ? default : true ;
            var sendAudiosLocal = (flagsLocal & 4194304) is 0 ? default : true ;
            var sendVoicesLocal = (flagsLocal & 8388608) is 0 ? default : true ;
            var sendDocsLocal = (flagsLocal & 16777216) is 0 ? default : true ;
            var sendPlainLocal = (flagsLocal & 33554432) is 0 ? default : true ;
            var untilDateLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            ViewMessages = viewMessagesLocal,
            SendMessages = sendMessagesLocal,
            SendMedia = sendMediaLocal,
            SendStickers = sendStickersLocal,
            SendGifs = sendGifsLocal,
            SendGames = sendGamesLocal,
            SendInline = sendInlineLocal,
            EmbedLinks = embedLinksLocal,
            SendPolls = sendPollsLocal,
            ChangeInfo = changeInfoLocal,
            InviteUsers = inviteUsersLocal,
            PinMessages = pinMessagesLocal,
            ManageTopics = manageTopicsLocal,
            SendPhotos = sendPhotosLocal,
            SendVideos = sendVideosLocal,
            SendRoundvideos = sendRoundvideosLocal,
            SendAudios = sendAudiosLocal,
            SendVoices = sendVoicesLocal,
            SendDocs = sendDocsLocal,
            SendPlain = sendPlainLocal,
            UntilDate = untilDateLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputWallPaperNs {
    public class InputWallPaper : InputWallPaperBase, ITlSerializable, ITlDeserializable<InputWallPaper> {
        public static readonly byte[] Identifier = [121,185,48,230,];
        public required long Id {get;set;}
        public required long AccessHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputWallPaper TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            AccessHash = accessHashLocal,
            };
        }
    }
    public class InputWallPaperSlug : InputWallPaperBase, ITlSerializable, ITlDeserializable<InputWallPaperSlug> {
        public static readonly byte[] Identifier = [128,28,9,114,];
        public required string Slug {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Slug.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputWallPaperSlug TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var slugLocal =  des.As<string>().Read();
            return new() {
            Slug = slugLocal,
            };
        }
    }
    public class InputWallPaperNoFile : InputWallPaperBase, ITlSerializable, ITlDeserializable<InputWallPaperNoFile> {
        public static readonly byte[] Identifier = [46,70,122,150,];
        public required long Id {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputWallPaperNoFile TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AccountWallPapersNs {
    public class AccountWallPapersNotModified : AccountWallPapersBase, ITlSerializable, ITlDeserializable<AccountWallPapersNotModified> {
        public static readonly byte[] Identifier = [131,145,25,28,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static AccountWallPapersNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class AccountWallPapers : AccountWallPapersBase, ITlSerializable, ITlDeserializable<AccountWallPapers> {
        public static readonly byte[] Identifier = [140,133,195,205,];
        public required long Hash {get;set;}
        public required List<WallPaperBase> Wallpapers {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(Wallpapers.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountWallPapers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var hashLocal =  des.As<long>().Read();
            var wallpapersLocal =  des.Read<WallPaperBase>();
            return new() {
            Hash = hashLocal,
            Wallpapers = wallpapersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.CodeSettingsNs {
    public class CodeSettings : CodeSettingsBase, ITlSerializable, ITlDeserializable<CodeSettings> {
        public static readonly byte[] Identifier = [120,61,37,173,];
        private int Flags;
        public bool AllowFlashcall {get;set;}
        public bool CurrentNumber {get;set;}
        public bool AllowAppHash {get;set;}
        public bool AllowMissedCall {get;set;}
        public bool AllowFirebase {get;set;}
        public List<byte[]>? LogoutTokens {get;set;}
        public string? Token {get;set;}
        public bool AppSandbox {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (LogoutTokens is not null ? 64 : 0) | (Token is not null ? 256 : 0) ).TlSerialize());
            if(LogoutTokens is not null) bytes.AddRange(LogoutTokens.TlSerialize());
            if(Token is not null) bytes.AddRange(Token.TlSerialize());
            return bytes.ToArray();
        }

        public new static CodeSettings TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var allowFlashcallLocal = (flagsLocal & 1) is 0 ? default : true ;
            var currentNumberLocal = (flagsLocal & 2) is 0 ? default : true ;
            var allowAppHashLocal = (flagsLocal & 16) is 0 ? default : true ;
            var allowMissedCallLocal = (flagsLocal & 32) is 0 ? default : true ;
            var allowFirebaseLocal = (flagsLocal & 128) is 0 ? default : true ;
            var logoutTokensLocal = (flagsLocal & 64) is 0 ? default : des.ReadByteArrayList() ;
            var tokenLocal = (flagsLocal & 256) is 0 ? default : des.As<string>().Read() ;
            var appSandboxLocal = (flagsLocal & 256) is 0 ? default : true ;
            return new() {
            Flags = flagsLocal,
            AllowFlashcall = allowFlashcallLocal,
            CurrentNumber = currentNumberLocal,
            AllowAppHash = allowAppHashLocal,
            AllowMissedCall = allowMissedCallLocal,
            AllowFirebase = allowFirebaseLocal,
            LogoutTokens = logoutTokensLocal,
            Token = tokenLocal,
            AppSandbox = appSandboxLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.WallPaperSettingsNs {
    public class WallPaperSettings : WallPaperSettingsBase, ITlSerializable, ITlDeserializable<WallPaperSettings> {
        public static readonly byte[] Identifier = [208,252,46,55,];
        private int Flags;
        public bool Blur {get;set;}
        public bool Motion {get;set;}
        public int? BackgroundColor {get;set;}
        public int? SecondBackgroundColor {get;set;}
        public int? ThirdBackgroundColor {get;set;}
        public int? FourthBackgroundColor {get;set;}
        public int? Intensity {get;set;}
        public int? Rotation {get;set;}
        public string? Emoticon {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (BackgroundColor is not null ? 1 : 0) | (SecondBackgroundColor is not null ? 16 : 0) | (ThirdBackgroundColor is not null ? 32 : 0) | (FourthBackgroundColor is not null ? 64 : 0) | (Intensity is not null ? 8 : 0) | (Rotation is not null ? 16 : 0) | (Emoticon is not null ? 128 : 0) ).TlSerialize());
            if(BackgroundColor is not null) bytes.AddRange(BackgroundColor.TlSerialize());
            if(SecondBackgroundColor is not null) bytes.AddRange(SecondBackgroundColor.TlSerialize());
            if(ThirdBackgroundColor is not null) bytes.AddRange(ThirdBackgroundColor.TlSerialize());
            if(FourthBackgroundColor is not null) bytes.AddRange(FourthBackgroundColor.TlSerialize());
            if(Intensity is not null) bytes.AddRange(Intensity.TlSerialize());
            if(Rotation is not null) bytes.AddRange(Rotation.TlSerialize());
            if(Emoticon is not null) bytes.AddRange(Emoticon.TlSerialize());
            return bytes.ToArray();
        }

        public new static WallPaperSettings TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var blurLocal = (flagsLocal & 2) is 0 ? default : true ;
            var motionLocal = (flagsLocal & 4) is 0 ? default : true ;
            var backgroundColorLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var secondBackgroundColorLocal = (flagsLocal & 16) is 0 ? default : des.As<int>().Read() ;
            var thirdBackgroundColorLocal = (flagsLocal & 32) is 0 ? default : des.As<int>().Read() ;
            var fourthBackgroundColorLocal = (flagsLocal & 64) is 0 ? default : des.As<int>().Read() ;
            var intensityLocal = (flagsLocal & 8) is 0 ? default : des.As<int>().Read() ;
            var rotationLocal = (flagsLocal & 16) is 0 ? default : des.As<int>().Read() ;
            var emoticonLocal = (flagsLocal & 128) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            Blur = blurLocal,
            Motion = motionLocal,
            BackgroundColor = backgroundColorLocal,
            SecondBackgroundColor = secondBackgroundColorLocal,
            ThirdBackgroundColor = thirdBackgroundColorLocal,
            FourthBackgroundColor = fourthBackgroundColorLocal,
            Intensity = intensityLocal,
            Rotation = rotationLocal,
            Emoticon = emoticonLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AutoDownloadSettingsNs {
    public class AutoDownloadSettings : AutoDownloadSettingsBase, ITlSerializable, ITlDeserializable<AutoDownloadSettings> {
        public static readonly byte[] Identifier = [40,118,165,186,];
        private int Flags;
        public bool Disabled {get;set;}
        public bool VideoPreloadLarge {get;set;}
        public bool AudioPreloadNext {get;set;}
        public bool PhonecallsLessData {get;set;}
        public bool StoriesPreload {get;set;}
        public required int PhotoSizeMax {get;set;}
        public required long VideoSizeMax {get;set;}
        public required long FileSizeMax {get;set;}
        public required int VideoUploadMaxbitrate {get;set;}
        public required int SmallQueueActiveOperationsMax {get;set;}
        public required int LargeQueueActiveOperationsMax {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(PhotoSizeMax.TlSerialize());
            bytes.AddRange(VideoSizeMax.TlSerialize());
            bytes.AddRange(FileSizeMax.TlSerialize());
            bytes.AddRange(VideoUploadMaxbitrate.TlSerialize());
            bytes.AddRange(SmallQueueActiveOperationsMax.TlSerialize());
            bytes.AddRange(LargeQueueActiveOperationsMax.TlSerialize());
            return bytes.ToArray();
        }

        public new static AutoDownloadSettings TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var disabledLocal = (flagsLocal & 1) is 0 ? default : true ;
            var videoPreloadLargeLocal = (flagsLocal & 2) is 0 ? default : true ;
            var audioPreloadNextLocal = (flagsLocal & 4) is 0 ? default : true ;
            var phonecallsLessDataLocal = (flagsLocal & 8) is 0 ? default : true ;
            var storiesPreloadLocal = (flagsLocal & 16) is 0 ? default : true ;
            var photoSizeMaxLocal =  des.As<int>().Read();
            var videoSizeMaxLocal =  des.As<long>().Read();
            var fileSizeMaxLocal =  des.As<long>().Read();
            var videoUploadMaxbitrateLocal =  des.As<int>().Read();
            var smallQueueActiveOperationsMaxLocal =  des.As<int>().Read();
            var largeQueueActiveOperationsMaxLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            Disabled = disabledLocal,
            VideoPreloadLarge = videoPreloadLargeLocal,
            AudioPreloadNext = audioPreloadNextLocal,
            PhonecallsLessData = phonecallsLessDataLocal,
            StoriesPreload = storiesPreloadLocal,
            PhotoSizeMax = photoSizeMaxLocal,
            VideoSizeMax = videoSizeMaxLocal,
            FileSizeMax = fileSizeMaxLocal,
            VideoUploadMaxbitrate = videoUploadMaxbitrateLocal,
            SmallQueueActiveOperationsMax = smallQueueActiveOperationsMaxLocal,
            LargeQueueActiveOperationsMax = largeQueueActiveOperationsMaxLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AccountAutoDownloadSettingsNs {
    public class AccountAutoDownloadSettings : AccountAutoDownloadSettingsBase, ITlSerializable, ITlDeserializable<AccountAutoDownloadSettings> {
        public static readonly byte[] Identifier = [38,207,202,99,];
        public required AutoDownloadSettingsBase Low {get;set;}
        public required AutoDownloadSettingsBase Medium {get;set;}
        public required AutoDownloadSettingsBase High {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Low.TlSerialize());
            bytes.AddRange(Medium.TlSerialize());
            bytes.AddRange(High.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountAutoDownloadSettings TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var lowLocal =  AutoDownloadSettingsBase.TlDeserialize(des);
            var mediumLocal =  AutoDownloadSettingsBase.TlDeserialize(des);
            var highLocal =  AutoDownloadSettingsBase.TlDeserialize(des);
            return new() {
            Low = lowLocal,
            Medium = mediumLocal,
            High = highLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.EmojiKeywordNs {
    public class EmojiKeyword : EmojiKeywordBase, ITlSerializable, ITlDeserializable<EmojiKeyword> {
        public static readonly byte[] Identifier = [249,185,179,213,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Keyword.TlSerialize());
            bytes.AddRange(Emoticons.TlSerialize());
            return bytes.ToArray();
        }

        public new static EmojiKeyword TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var keywordLocal =  des.As<string>().Read();
            var emoticonsLocal =  des.ReadStrings();
            return new() {
            Keyword = keywordLocal,
            Emoticons = emoticonsLocal,
            };
        }
    }
    public class EmojiKeywordDeleted : EmojiKeywordBase, ITlSerializable, ITlDeserializable<EmojiKeywordDeleted> {
        public static readonly byte[] Identifier = [34,246,109,35,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Keyword.TlSerialize());
            bytes.AddRange(Emoticons.TlSerialize());
            return bytes.ToArray();
        }

        public new static EmojiKeywordDeleted TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var keywordLocal =  des.As<string>().Read();
            var emoticonsLocal =  des.ReadStrings();
            return new() {
            Keyword = keywordLocal,
            Emoticons = emoticonsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.EmojiKeywordsDifferenceNs {
    public class EmojiKeywordsDifference : EmojiKeywordsDifferenceBase, ITlSerializable, ITlDeserializable<EmojiKeywordsDifference> {
        public static readonly byte[] Identifier = [189,97,199,92,];
        public required string LangCode {get;set;}
        public required int FromVersion {get;set;}
        public required int Version {get;set;}
        public required List<EmojiKeywordBase> Keywords {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(LangCode.TlSerialize());
            bytes.AddRange(FromVersion.TlSerialize());
            bytes.AddRange(Version.TlSerialize());
            bytes.AddRange(Keywords.TlSerialize());
            return bytes.ToArray();
        }

        public new static EmojiKeywordsDifference TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var langCodeLocal =  des.As<string>().Read();
            var fromVersionLocal =  des.As<int>().Read();
            var versionLocal =  des.As<int>().Read();
            var keywordsLocal =  des.Read<EmojiKeywordBase>();
            return new() {
            LangCode = langCodeLocal,
            FromVersion = fromVersionLocal,
            Version = versionLocal,
            Keywords = keywordsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.EmojiURLNs {
    public class EmojiURL : EmojiURLBase, ITlSerializable, ITlDeserializable<EmojiURL> {
        public static readonly byte[] Identifier = [157,115,117,165,];
        public required string Url {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Url.TlSerialize());
            return bytes.ToArray();
        }

        public new static EmojiURL TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlLocal =  des.As<string>().Read();
            return new() {
            Url = urlLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.EmojiLanguageNs {
    public class EmojiLanguage : EmojiLanguageBase, ITlSerializable, ITlDeserializable<EmojiLanguage> {
        public static readonly byte[] Identifier = [97,83,251,179,];
        public required string LangCode {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(LangCode.TlSerialize());
            return bytes.ToArray();
        }

        public new static EmojiLanguage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var langCodeLocal =  des.As<string>().Read();
            return new() {
            LangCode = langCodeLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.FolderNs {
    public class Folder : FolderBase, ITlSerializable, ITlDeserializable<Folder> {
        public static readonly byte[] Identifier = [101,78,84,255,];
        private int Flags;
        public bool AutofillNewBroadcasts {get;set;}
        public bool AutofillPublicGroups {get;set;}
        public bool AutofillNewCorrespondents {get;set;}
        public required int Id {get;set;}
        public required string Title {get;set;}
        public ChatPhotoBase? Photo {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Photo is not null ? 8 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            if(Photo is not null) bytes.AddRange(Photo.TlSerialize());
            return bytes.ToArray();
        }

        public new static Folder TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var autofillNewBroadcastsLocal = (flagsLocal & 1) is 0 ? default : true ;
            var autofillPublicGroupsLocal = (flagsLocal & 2) is 0 ? default : true ;
            var autofillNewCorrespondentsLocal = (flagsLocal & 4) is 0 ? default : true ;
            var idLocal =  des.As<int>().Read();
            var titleLocal =  des.As<string>().Read();
            var photoLocal = (flagsLocal & 8) is 0 ? default : ChatPhotoBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            AutofillNewBroadcasts = autofillNewBroadcastsLocal,
            AutofillPublicGroups = autofillPublicGroupsLocal,
            AutofillNewCorrespondents = autofillNewCorrespondentsLocal,
            Id = idLocal,
            Title = titleLocal,
            Photo = photoLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputFolderPeerNs {
    public class InputFolderPeer : InputFolderPeerBase, ITlSerializable, ITlDeserializable<InputFolderPeer> {
        public static readonly byte[] Identifier = [150,194,210,251,];
        public required InputPeerBase Peer {get;set;}
        public required int FolderId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(FolderId.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputFolderPeer TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  InputPeerBase.TlDeserialize(des);
            var folderIdLocal =  des.As<int>().Read();
            return new() {
            Peer = peerLocal,
            FolderId = folderIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.FolderPeerNs {
    public class FolderPeer : FolderPeerBase, ITlSerializable, ITlDeserializable<FolderPeer> {
        public static readonly byte[] Identifier = [104,166,186,233,];
        public required PeerBase Peer {get;set;}
        public required int FolderId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(FolderId.TlSerialize());
            return bytes.ToArray();
        }

        public new static FolderPeer TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var folderIdLocal =  des.As<int>().Read();
            return new() {
            Peer = peerLocal,
            FolderId = folderIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesSearchCounterNs {
    public class MessagesSearchCounter : MessagesSearchCounterBase, ITlSerializable, ITlDeserializable<MessagesSearchCounter> {
        public static readonly byte[] Identifier = [255,235,68,232,];
        private int Flags;
        public bool Inexact {get;set;}
        public required MessagesFilterBase Filter {get;set;}
        public required int Count {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Filter.TlSerialize());
            bytes.AddRange(Count.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesSearchCounter TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var inexactLocal = (flagsLocal & 2) is 0 ? default : true ;
            var filterLocal =  MessagesFilterBase.TlDeserialize(des);
            var countLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            Inexact = inexactLocal,
            Filter = filterLocal,
            Count = countLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.UrlAuthResultNs {
    public class UrlAuthResultRequest : UrlAuthResultBase, ITlSerializable, ITlDeserializable<UrlAuthResultRequest> {
        public static readonly byte[] Identifier = [14,58,211,146,];
        private int Flags;
        public bool RequestWriteAccess {get;set;}
        public required UserBase Bot {get;set;}
        public required string Domain {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Bot.TlSerialize());
            bytes.AddRange(Domain.TlSerialize());
            return bytes.ToArray();
        }

        public new static UrlAuthResultRequest TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var requestWriteAccessLocal = (flagsLocal & 1) is 0 ? default : true ;
            var botLocal =  UserBase.TlDeserialize(des);
            var domainLocal =  des.As<string>().Read();
            return new() {
            Flags = flagsLocal,
            RequestWriteAccess = requestWriteAccessLocal,
            Bot = botLocal,
            Domain = domainLocal,
            };
        }
    }
    public class UrlAuthResultAccepted : UrlAuthResultBase, ITlSerializable, ITlDeserializable<UrlAuthResultAccepted> {
        public static readonly byte[] Identifier = [78,14,140,143,];
        public required string Url {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Url.TlSerialize());
            return bytes.ToArray();
        }

        public new static UrlAuthResultAccepted TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlLocal =  des.As<string>().Read();
            return new() {
            Url = urlLocal,
            };
        }
    }
    public class UrlAuthResultDefault : UrlAuthResultBase, ITlSerializable, ITlDeserializable<UrlAuthResultDefault> {
        public static readonly byte[] Identifier = [31,219,214,169,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static UrlAuthResultDefault TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChannelLocationNs {
    public class ChannelLocationEmpty : ChannelLocationBase, ITlSerializable, ITlDeserializable<ChannelLocationEmpty> {
        public static readonly byte[] Identifier = [139,173,181,191,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static ChannelLocationEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class ChannelLocation : ChannelLocationBase, ITlSerializable, ITlDeserializable<ChannelLocation> {
        public static readonly byte[] Identifier = [219,130,155,32,];
        public required GeoPointBase GeoPoint {get;set;}
        public required string Address {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(GeoPoint.TlSerialize());
            bytes.AddRange(Address.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelLocation TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var geoPointLocal =  GeoPointBase.TlDeserialize(des);
            var addressLocal =  des.As<string>().Read();
            return new() {
            GeoPoint = geoPointLocal,
            Address = addressLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PeerLocatedNs {
    public class PeerLocated : PeerLocatedBase, ITlSerializable, ITlDeserializable<PeerLocated> {
        public static readonly byte[] Identifier = [93,27,70,202,];
        public required PeerBase Peer {get;set;}
        public required int Distance {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(Expires.TlSerialize());
            bytes.AddRange(Distance.TlSerialize());
            return bytes.ToArray();
        }

        public new static PeerLocated TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var expiresLocal =  des.As<int>().Read();
            var distanceLocal =  des.As<int>().Read();
            return new() {
            Peer = peerLocal,
            Expires = expiresLocal,
            Distance = distanceLocal,
            };
        }
    }
    public class PeerSelfLocated : PeerLocatedBase, ITlSerializable, ITlDeserializable<PeerSelfLocated> {
        public static readonly byte[] Identifier = [75,40,236,248,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Expires.TlSerialize());
            return bytes.ToArray();
        }

        public new static PeerSelfLocated TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var expiresLocal =  des.As<int>().Read();
            return new() {
            Expires = expiresLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.RestrictionReasonNs {
    public class RestrictionReason : RestrictionReasonBase, ITlSerializable, ITlDeserializable<RestrictionReason> {
        public static readonly byte[] Identifier = [180,172,114,208,];
        public required string Platform {get;set;}
        public required string Reason {get;set;}
        public required string Text {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Platform.TlSerialize());
            bytes.AddRange(Reason.TlSerialize());
            bytes.AddRange(Text.TlSerialize());
            return bytes.ToArray();
        }

        public new static RestrictionReason TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var platformLocal =  des.As<string>().Read();
            var reasonLocal =  des.As<string>().Read();
            var textLocal =  des.As<string>().Read();
            return new() {
            Platform = platformLocal,
            Reason = reasonLocal,
            Text = textLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputThemeNs {
    public class InputTheme : InputThemeBase, ITlSerializable, ITlDeserializable<InputTheme> {
        public static readonly byte[] Identifier = [233,147,86,60,];
        public required long Id {get;set;}
        public required long AccessHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputTheme TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            AccessHash = accessHashLocal,
            };
        }
    }
    public class InputThemeSlug : InputThemeBase, ITlSerializable, ITlDeserializable<InputThemeSlug> {
        public static readonly byte[] Identifier = [241,13,137,245,];
        public required string Slug {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Slug.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputThemeSlug TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var slugLocal =  des.As<string>().Read();
            return new() {
            Slug = slugLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ThemeNs {
    public class Theme : ThemeBase, ITlSerializable, ITlDeserializable<Theme> {
        public static readonly byte[] Identifier = [214,103,14,160,];
        private int Flags;
        public bool Creator {get;set;}
        public bool Default {get;set;}
        public bool ForChat {get;set;}
        public required long Id {get;set;}
        public required long AccessHash {get;set;}
        public required string Slug {get;set;}
        public required string Title {get;set;}
        public DocumentBase? Document {get;set;}
        public List<ThemeSettingsBase>? Settings {get;set;}
        public string? Emoticon {get;set;}
        public int? InstallsCount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Document is not null ? 4 : 0) | (Settings is not null ? 8 : 0) | (Emoticon is not null ? 64 : 0) | (InstallsCount is not null ? 16 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(Slug.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            if(Document is not null) bytes.AddRange(Document.TlSerialize());
            if(Settings is not null) bytes.AddRange(Settings.TlSerialize());
            if(Emoticon is not null) bytes.AddRange(Emoticon.TlSerialize());
            if(InstallsCount is not null) bytes.AddRange(InstallsCount.TlSerialize());
            return bytes.ToArray();
        }

        public new static Theme TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var creatorLocal = (flagsLocal & 1) is 0 ? default : true ;
            var defaultLocal = (flagsLocal & 2) is 0 ? default : true ;
            var forChatLocal = (flagsLocal & 32) is 0 ? default : true ;
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var slugLocal =  des.As<string>().Read();
            var titleLocal =  des.As<string>().Read();
            var documentLocal = (flagsLocal & 4) is 0 ? default : DocumentBase.TlDeserialize(des) ;
            var settingsLocal = (flagsLocal & 8) is 0 ? default : des.Read<ThemeSettingsBase>() ;
            var emoticonLocal = (flagsLocal & 64) is 0 ? default : des.As<string>().Read() ;
            var installsCountLocal = (flagsLocal & 16) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Creator = creatorLocal,
            Default = defaultLocal,
            ForChat = forChatLocal,
            Id = idLocal,
            AccessHash = accessHashLocal,
            Slug = slugLocal,
            Title = titleLocal,
            Document = documentLocal,
            Settings = settingsLocal,
            Emoticon = emoticonLocal,
            InstallsCount = installsCountLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AccountThemesNs {
    public class AccountThemesNotModified : AccountThemesBase, ITlSerializable, ITlDeserializable<AccountThemesNotModified> {
        public static readonly byte[] Identifier = [34,182,30,244,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static AccountThemesNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class AccountThemes : AccountThemesBase, ITlSerializable, ITlDeserializable<AccountThemes> {
        public static readonly byte[] Identifier = [109,140,61,154,];
        public required long Hash {get;set;}
        public required List<ThemeBase> Themes {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(Themes.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountThemes TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var hashLocal =  des.As<long>().Read();
            var themesLocal =  des.Read<ThemeBase>();
            return new() {
            Hash = hashLocal,
            Themes = themesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AuthLoginTokenNs {
    public class AuthLoginToken : AuthLoginTokenBase, ITlSerializable, ITlDeserializable<AuthLoginToken> {
        public static readonly byte[] Identifier = [128,25,159,98,];
        public required int Expires {get;set;}
        public required byte[] Token {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Expires.TlSerialize());
            bytes.AddRange(Token.TlSerialize());
            return bytes.ToArray();
        }

        public new static AuthLoginToken TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var expiresLocal =  des.As<int>().Read();
            var tokenLocal =  des.As<byte[]>().Read();
            return new() {
            Expires = expiresLocal,
            Token = tokenLocal,
            };
        }
    }
    public class AuthLoginTokenMigrateTo : AuthLoginTokenBase, ITlSerializable, ITlDeserializable<AuthLoginTokenMigrateTo> {
        public static readonly byte[] Identifier = [22,153,142,6,];
        public required int DcId {get;set;}
        public required byte[] Token {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(DcId.TlSerialize());
            bytes.AddRange(Token.TlSerialize());
            return bytes.ToArray();
        }

        public new static AuthLoginTokenMigrateTo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var dcIdLocal =  des.As<int>().Read();
            var tokenLocal =  des.As<byte[]>().Read();
            return new() {
            DcId = dcIdLocal,
            Token = tokenLocal,
            };
        }
    }
    public class AuthLoginTokenSuccess : AuthLoginTokenBase, ITlSerializable, ITlDeserializable<AuthLoginTokenSuccess> {
        public static readonly byte[] Identifier = [94,92,13,57,];
        public required AuthAuthorizationBase Authorization {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Authorization.TlSerialize());
            return bytes.ToArray();
        }

        public new static AuthLoginTokenSuccess TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var authorizationLocal =  AuthAuthorizationBase.TlDeserialize(des);
            return new() {
            Authorization = authorizationLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AccountContentSettingsNs {
    public class AccountContentSettings : AccountContentSettingsBase, ITlSerializable, ITlDeserializable<AccountContentSettings> {
        public static readonly byte[] Identifier = [33,130,226,87,];
        private int Flags;
        public bool SensitiveEnabled {get;set;}
        public bool SensitiveCanChange {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountContentSettings TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var sensitiveEnabledLocal = (flagsLocal & 1) is 0 ? default : true ;
            var sensitiveCanChangeLocal = (flagsLocal & 2) is 0 ? default : true ;
            return new() {
            Flags = flagsLocal,
            SensitiveEnabled = sensitiveEnabledLocal,
            SensitiveCanChange = sensitiveCanChangeLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesInactiveChatsNs {
    public class MessagesInactiveChats : MessagesInactiveChatsBase, ITlSerializable, ITlDeserializable<MessagesInactiveChats> {
        public static readonly byte[] Identifier = [197,254,39,169,];
        public required List<int> Dates {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Dates.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesInactiveChats TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var datesLocal =  des.ReadNumbers<int>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Dates = datesLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.BaseThemeNs {
    public class BaseThemeClassic : BaseThemeBase, ITlSerializable, ITlDeserializable<BaseThemeClassic> {
        public static readonly byte[] Identifier = [98,36,161,195,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static BaseThemeClassic TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class BaseThemeDay : BaseThemeBase, ITlSerializable, ITlDeserializable<BaseThemeDay> {
        public static readonly byte[] Identifier = [136,22,216,251,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static BaseThemeDay TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class BaseThemeNight : BaseThemeBase, ITlSerializable, ITlDeserializable<BaseThemeNight> {
        public static readonly byte[] Identifier = [168,30,179,183,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static BaseThemeNight TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class BaseThemeTinted : BaseThemeBase, ITlSerializable, ITlDeserializable<BaseThemeTinted> {
        public static readonly byte[] Identifier = [238,119,95,109,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static BaseThemeTinted TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class BaseThemeArctic : BaseThemeBase, ITlSerializable, ITlDeserializable<BaseThemeArctic> {
        public static readonly byte[] Identifier = [90,18,17,91,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static BaseThemeArctic TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputThemeSettingsNs {
    public class InputThemeSettings : InputThemeSettingsBase, ITlSerializable, ITlDeserializable<InputThemeSettings> {
        public static readonly byte[] Identifier = [79,80,222,143,];
        private int Flags;
        public bool MessageColorsAnimated {get;set;}
        public required BaseThemeBase BaseTheme {get;set;}
        public required int AccentColor {get;set;}
        public int? OutboxAccentColor {get;set;}
        public List<int>? MessageColors {get;set;}
        public InputWallPaperBase? Wallpaper {get;set;}
        public WallPaperSettingsBase? WallpaperSettings {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (OutboxAccentColor is not null ? 8 : 0) | (MessageColors is not null ? 1 : 0) | (Wallpaper is not null ? 2 : 0) | (WallpaperSettings is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(BaseTheme.TlSerialize());
            bytes.AddRange(AccentColor.TlSerialize());
            if(OutboxAccentColor is not null) bytes.AddRange(OutboxAccentColor.TlSerialize());
            if(MessageColors is not null) bytes.AddRange(MessageColors.TlSerialize());
            if(Wallpaper is not null) bytes.AddRange(Wallpaper.TlSerialize());
            if(WallpaperSettings is not null) bytes.AddRange(WallpaperSettings.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputThemeSettings TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var messageColorsAnimatedLocal = (flagsLocal & 4) is 0 ? default : true ;
            var baseThemeLocal =  BaseThemeBase.TlDeserialize(des);
            var accentColorLocal =  des.As<int>().Read();
            var outboxAccentColorLocal = (flagsLocal & 8) is 0 ? default : des.As<int>().Read() ;
            var messageColorsLocal = (flagsLocal & 1) is 0 ? default : des.ReadNumbers<int>() ;
            var wallpaperLocal = (flagsLocal & 2) is 0 ? default : InputWallPaperBase.TlDeserialize(des) ;
            var wallpaperSettingsLocal = (flagsLocal & 2) is 0 ? default : WallPaperSettingsBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            MessageColorsAnimated = messageColorsAnimatedLocal,
            BaseTheme = baseThemeLocal,
            AccentColor = accentColorLocal,
            OutboxAccentColor = outboxAccentColorLocal,
            MessageColors = messageColorsLocal,
            Wallpaper = wallpaperLocal,
            WallpaperSettings = wallpaperSettingsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ThemeSettingsNs {
    public class ThemeSettings : ThemeSettingsBase, ITlSerializable, ITlDeserializable<ThemeSettings> {
        public static readonly byte[] Identifier = [212,182,88,250,];
        private int Flags;
        public bool MessageColorsAnimated {get;set;}
        public required BaseThemeBase BaseTheme {get;set;}
        public required int AccentColor {get;set;}
        public int? OutboxAccentColor {get;set;}
        public List<int>? MessageColors {get;set;}
        public WallPaperBase? Wallpaper {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (OutboxAccentColor is not null ? 8 : 0) | (MessageColors is not null ? 1 : 0) | (Wallpaper is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(BaseTheme.TlSerialize());
            bytes.AddRange(AccentColor.TlSerialize());
            if(OutboxAccentColor is not null) bytes.AddRange(OutboxAccentColor.TlSerialize());
            if(MessageColors is not null) bytes.AddRange(MessageColors.TlSerialize());
            if(Wallpaper is not null) bytes.AddRange(Wallpaper.TlSerialize());
            return bytes.ToArray();
        }

        public new static ThemeSettings TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var messageColorsAnimatedLocal = (flagsLocal & 4) is 0 ? default : true ;
            var baseThemeLocal =  BaseThemeBase.TlDeserialize(des);
            var accentColorLocal =  des.As<int>().Read();
            var outboxAccentColorLocal = (flagsLocal & 8) is 0 ? default : des.As<int>().Read() ;
            var messageColorsLocal = (flagsLocal & 1) is 0 ? default : des.ReadNumbers<int>() ;
            var wallpaperLocal = (flagsLocal & 2) is 0 ? default : WallPaperBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            MessageColorsAnimated = messageColorsAnimatedLocal,
            BaseTheme = baseThemeLocal,
            AccentColor = accentColorLocal,
            OutboxAccentColor = outboxAccentColorLocal,
            MessageColors = messageColorsLocal,
            Wallpaper = wallpaperLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.WebPageAttributeNs {
    public class WebPageAttributeTheme : WebPageAttributeBase, ITlSerializable, ITlDeserializable<WebPageAttributeTheme> {
        public static readonly byte[] Identifier = [23,102,181,84,];
        public List<DocumentBase>? Documents {get;set;}
        public ThemeSettingsBase? Settings {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Documents is not null ? 1 : 0) | (Settings is not null ? 2 : 0) ).TlSerialize());
            if(Documents is not null) bytes.AddRange(Documents.TlSerialize());
            if(Settings is not null) bytes.AddRange(Settings.TlSerialize());
            return bytes.ToArray();
        }

        public new static WebPageAttributeTheme TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var documentsLocal = (flagsLocal & 1) is 0 ? default : des.Read<DocumentBase>() ;
            var settingsLocal = (flagsLocal & 2) is 0 ? default : ThemeSettingsBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Documents = documentsLocal,
            Settings = settingsLocal,
            };
        }
    }
    public class WebPageAttributeStory : WebPageAttributeBase, ITlSerializable, ITlDeserializable<WebPageAttributeStory> {
        public static readonly byte[] Identifier = [231,195,148,46,];
        public required PeerBase Peer {get;set;}
        public required int Id {get;set;}
        public StoryItemBase? Story {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Story is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            if(Story is not null) bytes.AddRange(Story.TlSerialize());
            return bytes.ToArray();
        }

        public new static WebPageAttributeStory TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var peerLocal =  PeerBase.TlDeserialize(des);
            var idLocal =  des.As<int>().Read();
            var storyLocal = (flagsLocal & 1) is 0 ? default : StoryItemBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Peer = peerLocal,
            Id = idLocal,
            Story = storyLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesVotesListNs {
    public class MessagesVotesList : MessagesVotesListBase, ITlSerializable, ITlDeserializable<MessagesVotesList> {
        public static readonly byte[] Identifier = [78,72,153,72,];
        private int Flags;
        public required int Count {get;set;}
        public required List<MessagePeerVoteBase> Votes {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public string? NextOffset {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (NextOffset is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(Votes.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            if(NextOffset is not null) bytes.AddRange(NextOffset.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesVotesList TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var countLocal =  des.As<int>().Read();
            var votesLocal =  des.Read<MessagePeerVoteBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            var nextOffsetLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            Count = countLocal,
            Votes = votesLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            NextOffset = nextOffsetLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.BankCardOpenUrlNs {
    public class BankCardOpenUrl : BankCardOpenUrlBase, ITlSerializable, ITlDeserializable<BankCardOpenUrl> {
        public static readonly byte[] Identifier = [138,2,104,245,];
        public required string Url {get;set;}
        public required string Name {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(Name.TlSerialize());
            return bytes.ToArray();
        }

        public new static BankCardOpenUrl TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlLocal =  des.As<string>().Read();
            var nameLocal =  des.As<string>().Read();
            return new() {
            Url = urlLocal,
            Name = nameLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PaymentsBankCardDataNs {
    public class PaymentsBankCardData : PaymentsBankCardDataBase, ITlSerializable, ITlDeserializable<PaymentsBankCardData> {
        public static readonly byte[] Identifier = [115,229,36,62,];
        public required string Title {get;set;}
        public required List<BankCardOpenUrlBase> OpenUrls {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(OpenUrls.TlSerialize());
            return bytes.ToArray();
        }

        public new static PaymentsBankCardData TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var titleLocal =  des.As<string>().Read();
            var openUrlsLocal =  des.Read<BankCardOpenUrlBase>();
            return new() {
            Title = titleLocal,
            OpenUrls = openUrlsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.DialogFilterNs {
    public class DialogFilter : DialogFilterBase, ITlSerializable, ITlDeserializable<DialogFilter> {
        public static readonly byte[] Identifier = [232,247,56,116,];
        private int Flags;
        public bool Contacts {get;set;}
        public bool NonContacts {get;set;}
        public bool Groups {get;set;}
        public bool Broadcasts {get;set;}
        public bool Bots {get;set;}
        public bool ExcludeMuted {get;set;}
        public bool ExcludeRead {get;set;}
        public bool ExcludeArchived {get;set;}
        public required int Id {get;set;}
        public required string Title {get;set;}
        public string? Emoticon {get;set;}
        public required List<InputPeerBase> PinnedPeers {get;set;}
        public required List<InputPeerBase> IncludePeers {get;set;}
        public required List<InputPeerBase> ExcludePeers {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Emoticon is not null ? 33554432 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            if(Emoticon is not null) bytes.AddRange(Emoticon.TlSerialize());
            bytes.AddRange(PinnedPeers.TlSerialize());
            bytes.AddRange(IncludePeers.TlSerialize());
            bytes.AddRange(ExcludePeers.TlSerialize());
            return bytes.ToArray();
        }

        public new static DialogFilter TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var contactsLocal = (flagsLocal & 1) is 0 ? default : true ;
            var nonContactsLocal = (flagsLocal & 2) is 0 ? default : true ;
            var groupsLocal = (flagsLocal & 4) is 0 ? default : true ;
            var broadcastsLocal = (flagsLocal & 8) is 0 ? default : true ;
            var botsLocal = (flagsLocal & 16) is 0 ? default : true ;
            var excludeMutedLocal = (flagsLocal & 2048) is 0 ? default : true ;
            var excludeReadLocal = (flagsLocal & 4096) is 0 ? default : true ;
            var excludeArchivedLocal = (flagsLocal & 8192) is 0 ? default : true ;
            var idLocal =  des.As<int>().Read();
            var titleLocal =  des.As<string>().Read();
            var emoticonLocal = (flagsLocal & 33554432) is 0 ? default : des.As<string>().Read() ;
            var pinnedPeersLocal =  des.Read<InputPeerBase>();
            var includePeersLocal =  des.Read<InputPeerBase>();
            var excludePeersLocal =  des.Read<InputPeerBase>();
            return new() {
            Flags = flagsLocal,
            Contacts = contactsLocal,
            NonContacts = nonContactsLocal,
            Groups = groupsLocal,
            Broadcasts = broadcastsLocal,
            Bots = botsLocal,
            ExcludeMuted = excludeMutedLocal,
            ExcludeRead = excludeReadLocal,
            ExcludeArchived = excludeArchivedLocal,
            Id = idLocal,
            Title = titleLocal,
            Emoticon = emoticonLocal,
            PinnedPeers = pinnedPeersLocal,
            IncludePeers = includePeersLocal,
            ExcludePeers = excludePeersLocal,
            };
        }
    }
    public class DialogFilterDefault : DialogFilterBase, ITlSerializable, ITlDeserializable<DialogFilterDefault> {
        public static readonly byte[] Identifier = [174,147,50,54,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static DialogFilterDefault TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class DialogFilterChatlist : DialogFilterBase, ITlSerializable, ITlDeserializable<DialogFilterChatlist> {
        public static readonly byte[] Identifier = [168,4,74,214,];
        private int Flags;
        public bool HasMyInvites {get;set;}
        public required int Id {get;set;}
        public required string Title {get;set;}
        public string? Emoticon {get;set;}
        public required List<InputPeerBase> PinnedPeers {get;set;}
        public required List<InputPeerBase> IncludePeers {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Emoticon is not null ? 33554432 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            if(Emoticon is not null) bytes.AddRange(Emoticon.TlSerialize());
            bytes.AddRange(PinnedPeers.TlSerialize());
            bytes.AddRange(IncludePeers.TlSerialize());
            return bytes.ToArray();
        }

        public new static DialogFilterChatlist TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var hasMyInvitesLocal = (flagsLocal & 67108864) is 0 ? default : true ;
            var idLocal =  des.As<int>().Read();
            var titleLocal =  des.As<string>().Read();
            var emoticonLocal = (flagsLocal & 33554432) is 0 ? default : des.As<string>().Read() ;
            var pinnedPeersLocal =  des.Read<InputPeerBase>();
            var includePeersLocal =  des.Read<InputPeerBase>();
            return new() {
            Flags = flagsLocal,
            HasMyInvites = hasMyInvitesLocal,
            Id = idLocal,
            Title = titleLocal,
            Emoticon = emoticonLocal,
            PinnedPeers = pinnedPeersLocal,
            IncludePeers = includePeersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.DialogFilterSuggestedNs {
    public class DialogFilterSuggested : DialogFilterSuggestedBase, ITlSerializable, ITlDeserializable<DialogFilterSuggested> {
        public static readonly byte[] Identifier = [74,77,116,119,];
        public required DialogFilterBase Filter {get;set;}
        public required string Description {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Filter.TlSerialize());
            bytes.AddRange(Description.TlSerialize());
            return bytes.ToArray();
        }

        public new static DialogFilterSuggested TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var filterLocal =  DialogFilterBase.TlDeserialize(des);
            var descriptionLocal =  des.As<string>().Read();
            return new() {
            Filter = filterLocal,
            Description = descriptionLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StatsDateRangeDaysNs {
    public class StatsDateRangeDays : StatsDateRangeDaysBase, ITlSerializable, ITlDeserializable<StatsDateRangeDays> {
        public static readonly byte[] Identifier = [175,237,55,182,];
        public required int MinDate {get;set;}
        public required int MaxDate {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(MinDate.TlSerialize());
            bytes.AddRange(MaxDate.TlSerialize());
            return bytes.ToArray();
        }

        public new static StatsDateRangeDays TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var minDateLocal =  des.As<int>().Read();
            var maxDateLocal =  des.As<int>().Read();
            return new() {
            MinDate = minDateLocal,
            MaxDate = maxDateLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StatsAbsValueAndPrevNs {
    public class StatsAbsValueAndPrev : StatsAbsValueAndPrevBase, ITlSerializable, ITlDeserializable<StatsAbsValueAndPrev> {
        public static readonly byte[] Identifier = [222,172,67,203,];
        public required double Current {get;set;}
        public required double Previous {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Current.TlSerialize());
            bytes.AddRange(Previous.TlSerialize());
            return bytes.ToArray();
        }

        public new static StatsAbsValueAndPrev TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var currentLocal =  des.As<double>().Read();
            var previousLocal =  des.As<double>().Read();
            return new() {
            Current = currentLocal,
            Previous = previousLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StatsPercentValueNs {
    public class StatsPercentValue : StatsPercentValueBase, ITlSerializable, ITlDeserializable<StatsPercentValue> {
        public static readonly byte[] Identifier = [224,47,206,203,];
        public required double Part {get;set;}
        public required double Total {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Part.TlSerialize());
            bytes.AddRange(Total.TlSerialize());
            return bytes.ToArray();
        }

        public new static StatsPercentValue TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var partLocal =  des.As<double>().Read();
            var totalLocal =  des.As<double>().Read();
            return new() {
            Part = partLocal,
            Total = totalLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StatsGraphNs {
    public class StatsGraphAsync : StatsGraphBase, ITlSerializable, ITlDeserializable<StatsGraphAsync> {
        public static readonly byte[] Identifier = [45,235,39,74,];
        public required string Token {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Token.TlSerialize());
            return bytes.ToArray();
        }

        public new static StatsGraphAsync TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var tokenLocal =  des.As<string>().Read();
            return new() {
            Token = tokenLocal,
            };
        }
    }
    public class StatsGraphError : StatsGraphBase, ITlSerializable, ITlDeserializable<StatsGraphError> {
        public static readonly byte[] Identifier = [34,152,220,190,];
        public required string Error {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Error.TlSerialize());
            return bytes.ToArray();
        }

        public new static StatsGraphError TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var errorLocal =  des.As<string>().Read();
            return new() {
            Error = errorLocal,
            };
        }
    }
    public class StatsGraph : StatsGraphBase, ITlSerializable, ITlDeserializable<StatsGraph> {
        public static readonly byte[] Identifier = [182,100,164,142,];
        private int Flags;
        public required DataJSONBase Json {get;set;}
        public string? ZoomToken {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (ZoomToken is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Json.TlSerialize());
            if(ZoomToken is not null) bytes.AddRange(ZoomToken.TlSerialize());
            return bytes.ToArray();
        }

        public new static StatsGraph TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var jsonLocal =  DataJSONBase.TlDeserialize(des);
            var zoomTokenLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            Json = jsonLocal,
            ZoomToken = zoomTokenLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StatsBroadcastStatsNs {
    public class StatsBroadcastStats : StatsBroadcastStatsBase, ITlSerializable, ITlDeserializable<StatsBroadcastStats> {
        public static readonly byte[] Identifier = [252,165,108,57,];
        public required StatsDateRangeDaysBase Period {get;set;}
        public required StatsAbsValueAndPrevBase Followers {get;set;}
        public required StatsAbsValueAndPrevBase ViewsPerPost {get;set;}
        public required StatsAbsValueAndPrevBase SharesPerPost {get;set;}
        public required StatsAbsValueAndPrevBase ReactionsPerPost {get;set;}
        public required StatsAbsValueAndPrevBase ViewsPerStory {get;set;}
        public required StatsAbsValueAndPrevBase SharesPerStory {get;set;}
        public required StatsAbsValueAndPrevBase ReactionsPerStory {get;set;}
        public required StatsPercentValueBase EnabledNotifications {get;set;}
        public required StatsGraphBase GrowthGraph {get;set;}
        public required StatsGraphBase FollowersGraph {get;set;}
        public required StatsGraphBase MuteGraph {get;set;}
        public required StatsGraphBase TopHoursGraph {get;set;}
        public required StatsGraphBase InteractionsGraph {get;set;}
        public required StatsGraphBase IvInteractionsGraph {get;set;}
        public required StatsGraphBase ViewsBySourceGraph {get;set;}
        public required StatsGraphBase NewFollowersBySourceGraph {get;set;}
        public required StatsGraphBase LanguagesGraph {get;set;}
        public required StatsGraphBase ReactionsByEmotionGraph {get;set;}
        public required StatsGraphBase StoryInteractionsGraph {get;set;}
        public required StatsGraphBase StoryReactionsByEmotionGraph {get;set;}
        public required List<PostInteractionCountersBase> RecentPostsInteractions {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Period.TlSerialize());
            bytes.AddRange(Followers.TlSerialize());
            bytes.AddRange(ViewsPerPost.TlSerialize());
            bytes.AddRange(SharesPerPost.TlSerialize());
            bytes.AddRange(ReactionsPerPost.TlSerialize());
            bytes.AddRange(ViewsPerStory.TlSerialize());
            bytes.AddRange(SharesPerStory.TlSerialize());
            bytes.AddRange(ReactionsPerStory.TlSerialize());
            bytes.AddRange(EnabledNotifications.TlSerialize());
            bytes.AddRange(GrowthGraph.TlSerialize());
            bytes.AddRange(FollowersGraph.TlSerialize());
            bytes.AddRange(MuteGraph.TlSerialize());
            bytes.AddRange(TopHoursGraph.TlSerialize());
            bytes.AddRange(InteractionsGraph.TlSerialize());
            bytes.AddRange(IvInteractionsGraph.TlSerialize());
            bytes.AddRange(ViewsBySourceGraph.TlSerialize());
            bytes.AddRange(NewFollowersBySourceGraph.TlSerialize());
            bytes.AddRange(LanguagesGraph.TlSerialize());
            bytes.AddRange(ReactionsByEmotionGraph.TlSerialize());
            bytes.AddRange(StoryInteractionsGraph.TlSerialize());
            bytes.AddRange(StoryReactionsByEmotionGraph.TlSerialize());
            bytes.AddRange(RecentPostsInteractions.TlSerialize());
            return bytes.ToArray();
        }

        public new static StatsBroadcastStats TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var periodLocal =  StatsDateRangeDaysBase.TlDeserialize(des);
            var followersLocal =  StatsAbsValueAndPrevBase.TlDeserialize(des);
            var viewsPerPostLocal =  StatsAbsValueAndPrevBase.TlDeserialize(des);
            var sharesPerPostLocal =  StatsAbsValueAndPrevBase.TlDeserialize(des);
            var reactionsPerPostLocal =  StatsAbsValueAndPrevBase.TlDeserialize(des);
            var viewsPerStoryLocal =  StatsAbsValueAndPrevBase.TlDeserialize(des);
            var sharesPerStoryLocal =  StatsAbsValueAndPrevBase.TlDeserialize(des);
            var reactionsPerStoryLocal =  StatsAbsValueAndPrevBase.TlDeserialize(des);
            var enabledNotificationsLocal =  StatsPercentValueBase.TlDeserialize(des);
            var growthGraphLocal =  StatsGraphBase.TlDeserialize(des);
            var followersGraphLocal =  StatsGraphBase.TlDeserialize(des);
            var muteGraphLocal =  StatsGraphBase.TlDeserialize(des);
            var topHoursGraphLocal =  StatsGraphBase.TlDeserialize(des);
            var interactionsGraphLocal =  StatsGraphBase.TlDeserialize(des);
            var ivInteractionsGraphLocal =  StatsGraphBase.TlDeserialize(des);
            var viewsBySourceGraphLocal =  StatsGraphBase.TlDeserialize(des);
            var newFollowersBySourceGraphLocal =  StatsGraphBase.TlDeserialize(des);
            var languagesGraphLocal =  StatsGraphBase.TlDeserialize(des);
            var reactionsByEmotionGraphLocal =  StatsGraphBase.TlDeserialize(des);
            var storyInteractionsGraphLocal =  StatsGraphBase.TlDeserialize(des);
            var storyReactionsByEmotionGraphLocal =  StatsGraphBase.TlDeserialize(des);
            var recentPostsInteractionsLocal =  des.Read<PostInteractionCountersBase>();
            return new() {
            Period = periodLocal,
            Followers = followersLocal,
            ViewsPerPost = viewsPerPostLocal,
            SharesPerPost = sharesPerPostLocal,
            ReactionsPerPost = reactionsPerPostLocal,
            ViewsPerStory = viewsPerStoryLocal,
            SharesPerStory = sharesPerStoryLocal,
            ReactionsPerStory = reactionsPerStoryLocal,
            EnabledNotifications = enabledNotificationsLocal,
            GrowthGraph = growthGraphLocal,
            FollowersGraph = followersGraphLocal,
            MuteGraph = muteGraphLocal,
            TopHoursGraph = topHoursGraphLocal,
            InteractionsGraph = interactionsGraphLocal,
            IvInteractionsGraph = ivInteractionsGraphLocal,
            ViewsBySourceGraph = viewsBySourceGraphLocal,
            NewFollowersBySourceGraph = newFollowersBySourceGraphLocal,
            LanguagesGraph = languagesGraphLocal,
            ReactionsByEmotionGraph = reactionsByEmotionGraphLocal,
            StoryInteractionsGraph = storyInteractionsGraphLocal,
            StoryReactionsByEmotionGraph = storyReactionsByEmotionGraphLocal,
            RecentPostsInteractions = recentPostsInteractionsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.HelpPromoDataNs {
    public class HelpPromoDataEmpty : HelpPromoDataBase, ITlSerializable, ITlDeserializable<HelpPromoDataEmpty> {
        public static readonly byte[] Identifier = [117,172,246,152,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Expires.TlSerialize());
            return bytes.ToArray();
        }

        public new static HelpPromoDataEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var expiresLocal =  des.As<int>().Read();
            return new() {
            Expires = expiresLocal,
            };
        }
    }
    public class HelpPromoData : HelpPromoDataBase, ITlSerializable, ITlDeserializable<HelpPromoData> {
        public static readonly byte[] Identifier = [63,121,57,140,];
        private int Flags;
        public bool Proxy {get;set;}
        public required PeerBase Peer {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public string? PsaType {get;set;}
        public string? PsaMessage {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (PsaType is not null ? 2 : 0) | (PsaMessage is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(Expires.TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            if(PsaType is not null) bytes.AddRange(PsaType.TlSerialize());
            if(PsaMessage is not null) bytes.AddRange(PsaMessage.TlSerialize());
            return bytes.ToArray();
        }

        public new static HelpPromoData TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var proxyLocal = (flagsLocal & 1) is 0 ? default : true ;
            var expiresLocal =  des.As<int>().Read();
            var peerLocal =  PeerBase.TlDeserialize(des);
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            var psaTypeLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var psaMessageLocal = (flagsLocal & 4) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            Proxy = proxyLocal,
            Expires = expiresLocal,
            Peer = peerLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            PsaType = psaTypeLocal,
            PsaMessage = psaMessageLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.VideoSizeNs {
    public class VideoSize : VideoSizeBase, ITlSerializable, ITlDeserializable<VideoSize> {
        public static readonly byte[] Identifier = [148,176,51,222,];
        private int Flags;
        public required string Type {get;set;}
        public required int W {get;set;}
        public required int H {get;set;}
        public required int Size {get;set;}
        public double? VideoStartTs {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (VideoStartTs is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Type.TlSerialize());
            bytes.AddRange(W.TlSerialize());
            bytes.AddRange(H.TlSerialize());
            bytes.AddRange(Size.TlSerialize());
            if(VideoStartTs is not null) bytes.AddRange(VideoStartTs.TlSerialize());
            return bytes.ToArray();
        }

        public new static VideoSize TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var typeLocal =  des.As<string>().Read();
            var wLocal =  des.As<int>().Read();
            var hLocal =  des.As<int>().Read();
            var sizeLocal =  des.As<int>().Read();
            var videoStartTsLocal = (flagsLocal & 1) is 0 ? default : des.As<double>().Read() ;
            return new() {
            Flags = flagsLocal,
            Type = typeLocal,
            W = wLocal,
            H = hLocal,
            Size = sizeLocal,
            VideoStartTs = videoStartTsLocal,
            };
        }
    }
    public class VideoSizeEmojiMarkup : VideoSizeBase, ITlSerializable, ITlDeserializable<VideoSizeEmojiMarkup> {
        public static readonly byte[] Identifier = [60,65,92,248,];
        public required long EmojiId {get;set;}
        public required List<int> BackgroundColors {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(EmojiId.TlSerialize());
            bytes.AddRange(BackgroundColors.TlSerialize());
            return bytes.ToArray();
        }

        public new static VideoSizeEmojiMarkup TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var emojiIdLocal =  des.As<long>().Read();
            var backgroundColorsLocal =  des.ReadNumbers<int>();
            return new() {
            EmojiId = emojiIdLocal,
            BackgroundColors = backgroundColorsLocal,
            };
        }
    }
    public class VideoSizeStickerMarkup : VideoSizeBase, ITlSerializable, ITlDeserializable<VideoSizeStickerMarkup> {
        public static readonly byte[] Identifier = [254,130,160,13,];
        public required InputStickerSetBase Stickerset {get;set;}
        public required long StickerId {get;set;}
        public required List<int> BackgroundColors {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Stickerset.TlSerialize());
            bytes.AddRange(StickerId.TlSerialize());
            bytes.AddRange(BackgroundColors.TlSerialize());
            return bytes.ToArray();
        }

        public new static VideoSizeStickerMarkup TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var stickersetLocal =  InputStickerSetBase.TlDeserialize(des);
            var stickerIdLocal =  des.As<long>().Read();
            var backgroundColorsLocal =  des.ReadNumbers<int>();
            return new() {
            Stickerset = stickersetLocal,
            StickerId = stickerIdLocal,
            BackgroundColors = backgroundColorsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StatsGroupTopPosterNs {
    public class StatsGroupTopPoster : StatsGroupTopPosterBase, ITlSerializable, ITlDeserializable<StatsGroupTopPoster> {
        public static readonly byte[] Identifier = [155,175,4,157,];
        public required long UserId {get;set;}
        public required int Messages {get;set;}
        public required int AvgChars {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Messages.TlSerialize());
            bytes.AddRange(AvgChars.TlSerialize());
            return bytes.ToArray();
        }

        public new static StatsGroupTopPoster TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            var messagesLocal =  des.As<int>().Read();
            var avgCharsLocal =  des.As<int>().Read();
            return new() {
            UserId = userIdLocal,
            Messages = messagesLocal,
            AvgChars = avgCharsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StatsGroupTopAdminNs {
    public class StatsGroupTopAdmin : StatsGroupTopAdminBase, ITlSerializable, ITlDeserializable<StatsGroupTopAdmin> {
        public static readonly byte[] Identifier = [135,76,88,215,];
        public required long UserId {get;set;}
        public required int Deleted {get;set;}
        public required int Kicked {get;set;}
        public required int Banned {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Deleted.TlSerialize());
            bytes.AddRange(Kicked.TlSerialize());
            bytes.AddRange(Banned.TlSerialize());
            return bytes.ToArray();
        }

        public new static StatsGroupTopAdmin TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            var deletedLocal =  des.As<int>().Read();
            var kickedLocal =  des.As<int>().Read();
            var bannedLocal =  des.As<int>().Read();
            return new() {
            UserId = userIdLocal,
            Deleted = deletedLocal,
            Kicked = kickedLocal,
            Banned = bannedLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StatsGroupTopInviterNs {
    public class StatsGroupTopInviter : StatsGroupTopInviterBase, ITlSerializable, ITlDeserializable<StatsGroupTopInviter> {
        public static readonly byte[] Identifier = [157,119,95,83,];
        public required long UserId {get;set;}
        public required int Invitations {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Invitations.TlSerialize());
            return bytes.ToArray();
        }

        public new static StatsGroupTopInviter TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            var invitationsLocal =  des.As<int>().Read();
            return new() {
            UserId = userIdLocal,
            Invitations = invitationsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StatsMegagroupStatsNs {
    public class StatsMegagroupStats : StatsMegagroupStatsBase, ITlSerializable, ITlDeserializable<StatsMegagroupStats> {
        public static readonly byte[] Identifier = [22,249,127,239,];
        public required StatsDateRangeDaysBase Period {get;set;}
        public required StatsAbsValueAndPrevBase Members {get;set;}
        public required StatsAbsValueAndPrevBase Messages {get;set;}
        public required StatsAbsValueAndPrevBase Viewers {get;set;}
        public required StatsAbsValueAndPrevBase Posters {get;set;}
        public required StatsGraphBase GrowthGraph {get;set;}
        public required StatsGraphBase MembersGraph {get;set;}
        public required StatsGraphBase NewMembersBySourceGraph {get;set;}
        public required StatsGraphBase LanguagesGraph {get;set;}
        public required StatsGraphBase MessagesGraph {get;set;}
        public required StatsGraphBase ActionsGraph {get;set;}
        public required StatsGraphBase TopHoursGraph {get;set;}
        public required StatsGraphBase WeekdaysGraph {get;set;}
        public required List<StatsGroupTopPosterBase> TopPosters {get;set;}
        public required List<StatsGroupTopAdminBase> TopAdmins {get;set;}
        public required List<StatsGroupTopInviterBase> TopInviters {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Period.TlSerialize());
            bytes.AddRange(Members.TlSerialize());
            bytes.AddRange(Messages.TlSerialize());
            bytes.AddRange(Viewers.TlSerialize());
            bytes.AddRange(Posters.TlSerialize());
            bytes.AddRange(GrowthGraph.TlSerialize());
            bytes.AddRange(MembersGraph.TlSerialize());
            bytes.AddRange(NewMembersBySourceGraph.TlSerialize());
            bytes.AddRange(LanguagesGraph.TlSerialize());
            bytes.AddRange(MessagesGraph.TlSerialize());
            bytes.AddRange(ActionsGraph.TlSerialize());
            bytes.AddRange(TopHoursGraph.TlSerialize());
            bytes.AddRange(WeekdaysGraph.TlSerialize());
            bytes.AddRange(TopPosters.TlSerialize());
            bytes.AddRange(TopAdmins.TlSerialize());
            bytes.AddRange(TopInviters.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static StatsMegagroupStats TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var periodLocal =  StatsDateRangeDaysBase.TlDeserialize(des);
            var membersLocal =  StatsAbsValueAndPrevBase.TlDeserialize(des);
            var messagesLocal =  StatsAbsValueAndPrevBase.TlDeserialize(des);
            var viewersLocal =  StatsAbsValueAndPrevBase.TlDeserialize(des);
            var postersLocal =  StatsAbsValueAndPrevBase.TlDeserialize(des);
            var growthGraphLocal =  StatsGraphBase.TlDeserialize(des);
            var membersGraphLocal =  StatsGraphBase.TlDeserialize(des);
            var newMembersBySourceGraphLocal =  StatsGraphBase.TlDeserialize(des);
            var languagesGraphLocal =  StatsGraphBase.TlDeserialize(des);
            var messagesGraphLocal =  StatsGraphBase.TlDeserialize(des);
            var actionsGraphLocal =  StatsGraphBase.TlDeserialize(des);
            var topHoursGraphLocal =  StatsGraphBase.TlDeserialize(des);
            var weekdaysGraphLocal =  StatsGraphBase.TlDeserialize(des);
            var topPostersLocal =  des.Read<StatsGroupTopPosterBase>();
            var topAdminsLocal =  des.Read<StatsGroupTopAdminBase>();
            var topInvitersLocal =  des.Read<StatsGroupTopInviterBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Period = periodLocal,
            Members = membersLocal,
            Messages = messagesLocal,
            Viewers = viewersLocal,
            Posters = postersLocal,
            GrowthGraph = growthGraphLocal,
            MembersGraph = membersGraphLocal,
            NewMembersBySourceGraph = newMembersBySourceGraphLocal,
            LanguagesGraph = languagesGraphLocal,
            MessagesGraph = messagesGraphLocal,
            ActionsGraph = actionsGraphLocal,
            TopHoursGraph = topHoursGraphLocal,
            WeekdaysGraph = weekdaysGraphLocal,
            TopPosters = topPostersLocal,
            TopAdmins = topAdminsLocal,
            TopInviters = topInvitersLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.GlobalPrivacySettingsNs {
    public class GlobalPrivacySettings : GlobalPrivacySettingsBase, ITlSerializable, ITlDeserializable<GlobalPrivacySettings> {
        public static readonly byte[] Identifier = [203,76,76,115,];
        private int Flags;
        public bool ArchiveAndMuteNewNoncontactPeers {get;set;}
        public bool KeepArchivedUnmuted {get;set;}
        public bool KeepArchivedFolders {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            return bytes.ToArray();
        }

        public new static GlobalPrivacySettings TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var archiveAndMuteNewNoncontactPeersLocal = (flagsLocal & 1) is 0 ? default : true ;
            var keepArchivedUnmutedLocal = (flagsLocal & 2) is 0 ? default : true ;
            var keepArchivedFoldersLocal = (flagsLocal & 4) is 0 ? default : true ;
            return new() {
            Flags = flagsLocal,
            ArchiveAndMuteNewNoncontactPeers = archiveAndMuteNewNoncontactPeersLocal,
            KeepArchivedUnmuted = keepArchivedUnmutedLocal,
            KeepArchivedFolders = keepArchivedFoldersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.HelpCountryCodeNs {
    public class HelpCountryCode : HelpCountryCodeBase, ITlSerializable, ITlDeserializable<HelpCountryCode> {
        public static readonly byte[] Identifier = [239,197,3,66,];
        private int Flags;
        public required string CountryCode {get;set;}
        public List<string>? Prefixes {get;set;}
        public List<string>? Patterns {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Prefixes is not null ? 1 : 0) | (Patterns is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(CountryCode.TlSerialize());
            if(Prefixes is not null) bytes.AddRange(Prefixes.TlSerialize());
            if(Patterns is not null) bytes.AddRange(Patterns.TlSerialize());
            return bytes.ToArray();
        }

        public new static HelpCountryCode TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var countryCodeLocal =  des.As<string>().Read();
            var prefixesLocal = (flagsLocal & 1) is 0 ? default : des.ReadStrings() ;
            var patternsLocal = (flagsLocal & 2) is 0 ? default : des.ReadStrings() ;
            return new() {
            Flags = flagsLocal,
            CountryCode = countryCodeLocal,
            Prefixes = prefixesLocal,
            Patterns = patternsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.HelpCountryNs {
    public class HelpCountry : HelpCountryBase, ITlSerializable, ITlDeserializable<HelpCountry> {
        public static readonly byte[] Identifier = [35,142,135,195,];
        private int Flags;
        public bool Hidden {get;set;}
        public required string Iso2 {get;set;}
        public required string DefaultName {get;set;}
        public string? Name {get;set;}
        public required List<HelpCountryCode> CountryCodes {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Name is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(Iso2.TlSerialize());
            bytes.AddRange(DefaultName.TlSerialize());
            if(Name is not null) bytes.AddRange(Name.TlSerialize());
            bytes.AddRange(CountryCodes.TlSerialize());
            return bytes.ToArray();
        }

        public new static HelpCountry TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var hiddenLocal = (flagsLocal & 1) is 0 ? default : true ;
            var iso2Local =  des.As<string>().Read();
            var defaultNameLocal =  des.As<string>().Read();
            var nameLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var countryCodesLocal =  des.Read<HelpCountryCode>();
            return new() {
            Flags = flagsLocal,
            Hidden = hiddenLocal,
            Iso2 = iso2Local,
            DefaultName = defaultNameLocal,
            Name = nameLocal,
            CountryCodes = countryCodesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.HelpCountriesListNs {
    public class HelpCountriesListNotModified : HelpCountriesListBase, ITlSerializable, ITlDeserializable<HelpCountriesListNotModified> {
        public static readonly byte[] Identifier = [50,31,204,147,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static HelpCountriesListNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class HelpCountriesList : HelpCountriesListBase, ITlSerializable, ITlDeserializable<HelpCountriesList> {
        public static readonly byte[] Identifier = [158,117,208,135,];
        public required List<HelpCountry> Countries {get;set;}
        public required int Hash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Countries.TlSerialize());
            bytes.AddRange(Hash.TlSerialize());
            return bytes.ToArray();
        }

        public new static HelpCountriesList TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var countriesLocal =  des.Read<HelpCountry>();
            var hashLocal =  des.As<int>().Read();
            return new() {
            Countries = countriesLocal,
            Hash = hashLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessageViewsNs {
    public class MessageViews : MessageViewsBase, ITlSerializable, ITlDeserializable<MessageViews> {
        public static readonly byte[] Identifier = [61,133,91,69,];
        private int Flags;
        public int? Views {get;set;}
        public int? Forwards {get;set;}
        public MessageRepliesBase? Replies {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Views is not null ? 1 : 0) | (Forwards is not null ? 2 : 0) | (Replies is not null ? 4 : 0) ).TlSerialize());
            if(Views is not null) bytes.AddRange(Views.TlSerialize());
            if(Forwards is not null) bytes.AddRange(Forwards.TlSerialize());
            if(Replies is not null) bytes.AddRange(Replies.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageViews TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var viewsLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var forwardsLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            var repliesLocal = (flagsLocal & 4) is 0 ? default : MessageRepliesBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Views = viewsLocal,
            Forwards = forwardsLocal,
            Replies = repliesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesMessageViewsNs {
    public class MessagesMessageViews : MessagesMessageViewsBase, ITlSerializable, ITlDeserializable<MessagesMessageViews> {
        public static readonly byte[] Identifier = [67,245,196,182,];
        public required List<MessageViewsBase> Views {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Views.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesMessageViews TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var viewsLocal =  des.Read<MessageViewsBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Views = viewsLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesDiscussionMessageNs {
    public class MessagesDiscussionMessage : MessagesDiscussionMessageBase, ITlSerializable, ITlDeserializable<MessagesDiscussionMessage> {
        public static readonly byte[] Identifier = [130,23,52,166,];
        private int Flags;
        public required List<MessageBase> Messages {get;set;}
        public int? MaxId {get;set;}
        public int? ReadInboxMaxId {get;set;}
        public int? ReadOutboxMaxId {get;set;}
        public required int UnreadCount {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (MaxId is not null ? 1 : 0) | (ReadInboxMaxId is not null ? 2 : 0) | (ReadOutboxMaxId is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(Messages.TlSerialize());
            if(MaxId is not null) bytes.AddRange(MaxId.TlSerialize());
            if(ReadInboxMaxId is not null) bytes.AddRange(ReadInboxMaxId.TlSerialize());
            if(ReadOutboxMaxId is not null) bytes.AddRange(ReadOutboxMaxId.TlSerialize());
            bytes.AddRange(UnreadCount.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesDiscussionMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var messagesLocal =  des.Read<MessageBase>();
            var maxIdLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var readInboxMaxIdLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            var readOutboxMaxIdLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            var unreadCountLocal =  des.As<int>().Read();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Flags = flagsLocal,
            Messages = messagesLocal,
            MaxId = maxIdLocal,
            ReadInboxMaxId = readInboxMaxIdLocal,
            ReadOutboxMaxId = readOutboxMaxIdLocal,
            UnreadCount = unreadCountLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessageReplyHeaderNs {
    public class MessageReplyHeader : MessageReplyHeaderBase, ITlSerializable, ITlDeserializable<MessageReplyHeader> {
        public static readonly byte[] Identifier = [219,9,188,175,];
        private int Flags;
        public bool ReplyToScheduled {get;set;}
        public bool ForumTopic {get;set;}
        public bool Quote {get;set;}
        public int? ReplyToMsgId {get;set;}
        public PeerBase? ReplyToPeerId {get;set;}
        public MessageFwdHeaderBase? ReplyFrom {get;set;}
        public MessageMediaBase? ReplyMedia {get;set;}
        public int? ReplyToTopId {get;set;}
        public string? QuoteText {get;set;}
        public List<MessageEntityBase>? QuoteEntities {get;set;}
        public int? QuoteOffset {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (ReplyToMsgId is not null ? 16 : 0) | (ReplyToPeerId is not null ? 1 : 0) | (ReplyFrom is not null ? 32 : 0) | (ReplyMedia is not null ? 256 : 0) | (ReplyToTopId is not null ? 2 : 0) | (QuoteText is not null ? 64 : 0) | (QuoteEntities is not null ? 128 : 0) | (QuoteOffset is not null ? 1024 : 0) ).TlSerialize());
            if(ReplyToMsgId is not null) bytes.AddRange(ReplyToMsgId.TlSerialize());
            if(ReplyToPeerId is not null) bytes.AddRange(ReplyToPeerId.TlSerialize());
            if(ReplyFrom is not null) bytes.AddRange(ReplyFrom.TlSerialize());
            if(ReplyMedia is not null) bytes.AddRange(ReplyMedia.TlSerialize());
            if(ReplyToTopId is not null) bytes.AddRange(ReplyToTopId.TlSerialize());
            if(QuoteText is not null) bytes.AddRange(QuoteText.TlSerialize());
            if(QuoteEntities is not null) bytes.AddRange(QuoteEntities.TlSerialize());
            if(QuoteOffset is not null) bytes.AddRange(QuoteOffset.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageReplyHeader TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var replyToScheduledLocal = (flagsLocal & 4) is 0 ? default : true ;
            var forumTopicLocal = (flagsLocal & 8) is 0 ? default : true ;
            var quoteLocal = (flagsLocal & 512) is 0 ? default : true ;
            var replyToMsgIdLocal = (flagsLocal & 16) is 0 ? default : des.As<int>().Read() ;
            var replyToPeerIdLocal = (flagsLocal & 1) is 0 ? default : PeerBase.TlDeserialize(des) ;
            var replyFromLocal = (flagsLocal & 32) is 0 ? default : MessageFwdHeaderBase.TlDeserialize(des) ;
            var replyMediaLocal = (flagsLocal & 256) is 0 ? default : MessageMediaBase.TlDeserialize(des) ;
            var replyToTopIdLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            var quoteTextLocal = (flagsLocal & 64) is 0 ? default : des.As<string>().Read() ;
            var quoteEntitiesLocal = (flagsLocal & 128) is 0 ? default : des.Read<MessageEntityBase>() ;
            var quoteOffsetLocal = (flagsLocal & 1024) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            ReplyToScheduled = replyToScheduledLocal,
            ForumTopic = forumTopicLocal,
            Quote = quoteLocal,
            ReplyToMsgId = replyToMsgIdLocal,
            ReplyToPeerId = replyToPeerIdLocal,
            ReplyFrom = replyFromLocal,
            ReplyMedia = replyMediaLocal,
            ReplyToTopId = replyToTopIdLocal,
            QuoteText = quoteTextLocal,
            QuoteEntities = quoteEntitiesLocal,
            QuoteOffset = quoteOffsetLocal,
            };
        }
    }
    public class MessageReplyStoryHeader : MessageReplyHeaderBase, ITlSerializable, ITlDeserializable<MessageReplyStoryHeader> {
        public static readonly byte[] Identifier = [193,191,152,156,];
        public required long UserId {get;set;}
        public required int StoryId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(StoryId.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageReplyStoryHeader TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            var storyIdLocal =  des.As<int>().Read();
            return new() {
            UserId = userIdLocal,
            StoryId = storyIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessageRepliesNs {
    public class MessageReplies : MessageRepliesBase, ITlSerializable, ITlDeserializable<MessageReplies> {
        public static readonly byte[] Identifier = [194,15,214,131,];
        private int Flags;
        public bool Comments {get;set;}
        public required int Replies {get;set;}
        public required int RepliesPts {get;set;}
        public List<PeerBase>? RecentRepliers {get;set;}
        public long? ChannelId {get;set;}
        public int? MaxId {get;set;}
        public int? ReadMaxId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (RecentRepliers is not null ? 2 : 0) | (ChannelId is not null ? 1 : 0) | (MaxId is not null ? 4 : 0) | (ReadMaxId is not null ? 8 : 0) ).TlSerialize());
            bytes.AddRange(Replies.TlSerialize());
            bytes.AddRange(RepliesPts.TlSerialize());
            if(RecentRepliers is not null) bytes.AddRange(RecentRepliers.TlSerialize());
            if(ChannelId is not null) bytes.AddRange(ChannelId.TlSerialize());
            if(MaxId is not null) bytes.AddRange(MaxId.TlSerialize());
            if(ReadMaxId is not null) bytes.AddRange(ReadMaxId.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageReplies TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var commentsLocal = (flagsLocal & 1) is 0 ? default : true ;
            var repliesLocal =  des.As<int>().Read();
            var repliesPtsLocal =  des.As<int>().Read();
            var recentRepliersLocal = (flagsLocal & 2) is 0 ? default : des.Read<PeerBase>() ;
            var channelIdLocal = (flagsLocal & 1) is 0 ? default : des.As<long>().Read() ;
            var maxIdLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            var readMaxIdLocal = (flagsLocal & 8) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Comments = commentsLocal,
            Replies = repliesLocal,
            RepliesPts = repliesPtsLocal,
            RecentRepliers = recentRepliersLocal,
            ChannelId = channelIdLocal,
            MaxId = maxIdLocal,
            ReadMaxId = readMaxIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PeerBlockedNs {
    public class PeerBlocked : PeerBlockedBase, ITlSerializable, ITlDeserializable<PeerBlocked> {
        public static readonly byte[] Identifier = [20,128,253,232,];
        public required PeerBase PeerId {get;set;}
        public required int Date {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PeerId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            return bytes.ToArray();
        }

        public new static PeerBlocked TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerIdLocal =  PeerBase.TlDeserialize(des);
            var dateLocal =  des.As<int>().Read();
            return new() {
            PeerId = peerIdLocal,
            Date = dateLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StatsMessageStatsNs {
    public class StatsMessageStats : StatsMessageStatsBase, ITlSerializable, ITlDeserializable<StatsMessageStats> {
        public static readonly byte[] Identifier = [20,28,233,127,];
        public required StatsGraphBase ViewsGraph {get;set;}
        public required StatsGraphBase ReactionsByEmotionGraph {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ViewsGraph.TlSerialize());
            bytes.AddRange(ReactionsByEmotionGraph.TlSerialize());
            return bytes.ToArray();
        }

        public new static StatsMessageStats TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var viewsGraphLocal =  StatsGraphBase.TlDeserialize(des);
            var reactionsByEmotionGraphLocal =  StatsGraphBase.TlDeserialize(des);
            return new() {
            ViewsGraph = viewsGraphLocal,
            ReactionsByEmotionGraph = reactionsByEmotionGraphLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.GroupCallNs {
    public class GroupCallDiscarded : GroupCallBase, ITlSerializable, ITlDeserializable<GroupCallDiscarded> {
        public static readonly byte[] Identifier = [180,188,128,119,];
        public required int Duration {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(Duration.TlSerialize());
            return bytes.ToArray();
        }

        public new static GroupCallDiscarded TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var durationLocal =  des.As<int>().Read();
            return new() {
            Id = idLocal,
            AccessHash = accessHashLocal,
            Duration = durationLocal,
            };
        }
    }
    public class GroupCall : GroupCallBase, ITlSerializable, ITlDeserializable<GroupCall> {
        public static readonly byte[] Identifier = [12,101,151,213,];
        private int Flags;
        public bool JoinMuted {get;set;}
        public bool CanChangeJoinMuted {get;set;}
        public bool JoinDateAsc {get;set;}
        public bool ScheduleStartSubscribed {get;set;}
        public bool CanStartVideo {get;set;}
        public bool RecordVideoActive {get;set;}
        public bool RtmpStream {get;set;}
        public bool ListenersHidden {get;set;}
        public required int ParticipantsCount {get;set;}
        public string? Title {get;set;}
        public int? StreamDcId {get;set;}
        public int? RecordStartDate {get;set;}
        public int? ScheduleDate {get;set;}
        public int? UnmutedVideoCount {get;set;}
        public required int UnmutedVideoLimit {get;set;}
        public required int Version {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Title is not null ? 8 : 0) | (StreamDcId is not null ? 16 : 0) | (RecordStartDate is not null ? 32 : 0) | (ScheduleDate is not null ? 128 : 0) | (UnmutedVideoCount is not null ? 1024 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(ParticipantsCount.TlSerialize());
            if(Title is not null) bytes.AddRange(Title.TlSerialize());
            if(StreamDcId is not null) bytes.AddRange(StreamDcId.TlSerialize());
            if(RecordStartDate is not null) bytes.AddRange(RecordStartDate.TlSerialize());
            if(ScheduleDate is not null) bytes.AddRange(ScheduleDate.TlSerialize());
            if(UnmutedVideoCount is not null) bytes.AddRange(UnmutedVideoCount.TlSerialize());
            bytes.AddRange(UnmutedVideoLimit.TlSerialize());
            bytes.AddRange(Version.TlSerialize());
            return bytes.ToArray();
        }

        public new static GroupCall TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var joinMutedLocal = (flagsLocal & 2) is 0 ? default : true ;
            var canChangeJoinMutedLocal = (flagsLocal & 4) is 0 ? default : true ;
            var joinDateAscLocal = (flagsLocal & 64) is 0 ? default : true ;
            var scheduleStartSubscribedLocal = (flagsLocal & 256) is 0 ? default : true ;
            var canStartVideoLocal = (flagsLocal & 512) is 0 ? default : true ;
            var recordVideoActiveLocal = (flagsLocal & 2048) is 0 ? default : true ;
            var rtmpStreamLocal = (flagsLocal & 4096) is 0 ? default : true ;
            var listenersHiddenLocal = (flagsLocal & 8192) is 0 ? default : true ;
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var participantsCountLocal =  des.As<int>().Read();
            var titleLocal = (flagsLocal & 8) is 0 ? default : des.As<string>().Read() ;
            var streamDcIdLocal = (flagsLocal & 16) is 0 ? default : des.As<int>().Read() ;
            var recordStartDateLocal = (flagsLocal & 32) is 0 ? default : des.As<int>().Read() ;
            var scheduleDateLocal = (flagsLocal & 128) is 0 ? default : des.As<int>().Read() ;
            var unmutedVideoCountLocal = (flagsLocal & 1024) is 0 ? default : des.As<int>().Read() ;
            var unmutedVideoLimitLocal =  des.As<int>().Read();
            var versionLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            JoinMuted = joinMutedLocal,
            CanChangeJoinMuted = canChangeJoinMutedLocal,
            JoinDateAsc = joinDateAscLocal,
            ScheduleStartSubscribed = scheduleStartSubscribedLocal,
            CanStartVideo = canStartVideoLocal,
            RecordVideoActive = recordVideoActiveLocal,
            RtmpStream = rtmpStreamLocal,
            ListenersHidden = listenersHiddenLocal,
            Id = idLocal,
            AccessHash = accessHashLocal,
            ParticipantsCount = participantsCountLocal,
            Title = titleLocal,
            StreamDcId = streamDcIdLocal,
            RecordStartDate = recordStartDateLocal,
            ScheduleDate = scheduleDateLocal,
            UnmutedVideoCount = unmutedVideoCountLocal,
            UnmutedVideoLimit = unmutedVideoLimitLocal,
            Version = versionLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputGroupCallNs {
    public class InputGroupCall : InputGroupCallBase, ITlSerializable, ITlDeserializable<InputGroupCall> {
        public static readonly byte[] Identifier = [15,132,170,216,];
        public required long Id {get;set;}
        public required long AccessHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputGroupCall TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            AccessHash = accessHashLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.GroupCallParticipantNs {
    public class GroupCallParticipant : GroupCallParticipantBase, ITlSerializable, ITlDeserializable<GroupCallParticipant> {
        public static readonly byte[] Identifier = [254,54,166,235,];
        private int Flags;
        public bool Muted {get;set;}
        public bool Left {get;set;}
        public bool CanSelfUnmute {get;set;}
        public bool JustJoined {get;set;}
        public bool Versioned {get;set;}
        public bool Min {get;set;}
        public bool MutedByYou {get;set;}
        public bool VolumeByAdmin {get;set;}
        public bool Self {get;set;}
        public bool VideoJoined {get;set;}
        public required PeerBase Peer {get;set;}
        public required int Date {get;set;}
        public int? ActiveDate {get;set;}
        public required int Source {get;set;}
        public int? Volume {get;set;}
        public string? About {get;set;}
        public long? RaiseHandRating {get;set;}
        public GroupCallParticipantVideoBase? Video {get;set;}
        public GroupCallParticipantVideoBase? Presentation {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (ActiveDate is not null ? 8 : 0) | (Volume is not null ? 128 : 0) | (About is not null ? 2048 : 0) | (RaiseHandRating is not null ? 8192 : 0) | (Video is not null ? 64 : 0) | (Presentation is not null ? 16384 : 0) ).TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            if(ActiveDate is not null) bytes.AddRange(ActiveDate.TlSerialize());
            bytes.AddRange(Source.TlSerialize());
            if(Volume is not null) bytes.AddRange(Volume.TlSerialize());
            if(About is not null) bytes.AddRange(About.TlSerialize());
            if(RaiseHandRating is not null) bytes.AddRange(RaiseHandRating.TlSerialize());
            if(Video is not null) bytes.AddRange(Video.TlSerialize());
            if(Presentation is not null) bytes.AddRange(Presentation.TlSerialize());
            return bytes.ToArray();
        }

        public new static GroupCallParticipant TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var mutedLocal = (flagsLocal & 1) is 0 ? default : true ;
            var leftLocal = (flagsLocal & 2) is 0 ? default : true ;
            var canSelfUnmuteLocal = (flagsLocal & 4) is 0 ? default : true ;
            var justJoinedLocal = (flagsLocal & 16) is 0 ? default : true ;
            var versionedLocal = (flagsLocal & 32) is 0 ? default : true ;
            var minLocal = (flagsLocal & 256) is 0 ? default : true ;
            var mutedByYouLocal = (flagsLocal & 512) is 0 ? default : true ;
            var volumeByAdminLocal = (flagsLocal & 1024) is 0 ? default : true ;
            var selfLocal = (flagsLocal & 4096) is 0 ? default : true ;
            var videoJoinedLocal = (flagsLocal & 32768) is 0 ? default : true ;
            var peerLocal =  PeerBase.TlDeserialize(des);
            var dateLocal =  des.As<int>().Read();
            var activeDateLocal = (flagsLocal & 8) is 0 ? default : des.As<int>().Read() ;
            var sourceLocal =  des.As<int>().Read();
            var volumeLocal = (flagsLocal & 128) is 0 ? default : des.As<int>().Read() ;
            var aboutLocal = (flagsLocal & 2048) is 0 ? default : des.As<string>().Read() ;
            var raiseHandRatingLocal = (flagsLocal & 8192) is 0 ? default : des.As<long>().Read() ;
            var videoLocal = (flagsLocal & 64) is 0 ? default : GroupCallParticipantVideoBase.TlDeserialize(des) ;
            var presentationLocal = (flagsLocal & 16384) is 0 ? default : GroupCallParticipantVideoBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Muted = mutedLocal,
            Left = leftLocal,
            CanSelfUnmute = canSelfUnmuteLocal,
            JustJoined = justJoinedLocal,
            Versioned = versionedLocal,
            Min = minLocal,
            MutedByYou = mutedByYouLocal,
            VolumeByAdmin = volumeByAdminLocal,
            Self = selfLocal,
            VideoJoined = videoJoinedLocal,
            Peer = peerLocal,
            Date = dateLocal,
            ActiveDate = activeDateLocal,
            Source = sourceLocal,
            Volume = volumeLocal,
            About = aboutLocal,
            RaiseHandRating = raiseHandRatingLocal,
            Video = videoLocal,
            Presentation = presentationLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PhoneGroupCallNs {
    public class PhoneGroupCall : PhoneGroupCallBase, ITlSerializable, ITlDeserializable<PhoneGroupCall> {
        public static readonly byte[] Identifier = [173,122,114,158,];
        public required GroupCallBase Call {get;set;}
        public required List<GroupCallParticipantBase> Participants {get;set;}
        public required string ParticipantsNextOffset {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Call.TlSerialize());
            bytes.AddRange(Participants.TlSerialize());
            bytes.AddRange(ParticipantsNextOffset.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhoneGroupCall TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var callLocal =  GroupCallBase.TlDeserialize(des);
            var participantsLocal =  des.Read<GroupCallParticipantBase>();
            var participantsNextOffsetLocal =  des.As<string>().Read();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Call = callLocal,
            Participants = participantsLocal,
            ParticipantsNextOffset = participantsNextOffsetLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PhoneGroupParticipantsNs {
    public class PhoneGroupParticipants : PhoneGroupParticipantsBase, ITlSerializable, ITlDeserializable<PhoneGroupParticipants> {
        public static readonly byte[] Identifier = [182,81,119,244,];
        public required int Count {get;set;}
        public required List<GroupCallParticipantBase> Participants {get;set;}
        public required string NextOffset {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public required int Version {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(Participants.TlSerialize());
            bytes.AddRange(NextOffset.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            bytes.AddRange(Version.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhoneGroupParticipants TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var countLocal =  des.As<int>().Read();
            var participantsLocal =  des.Read<GroupCallParticipantBase>();
            var nextOffsetLocal =  des.As<string>().Read();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            var versionLocal =  des.As<int>().Read();
            return new() {
            Count = countLocal,
            Participants = participantsLocal,
            NextOffset = nextOffsetLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            Version = versionLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InlineQueryPeerTypeNs {
    public class InlineQueryPeerTypeSameBotPM : InlineQueryPeerTypeBase, ITlSerializable, ITlDeserializable<InlineQueryPeerTypeSameBotPM> {
        public static readonly byte[] Identifier = [157,237,129,48,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InlineQueryPeerTypeSameBotPM TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InlineQueryPeerTypePM : InlineQueryPeerTypeBase, ITlSerializable, ITlDeserializable<InlineQueryPeerTypePM> {
        public static readonly byte[] Identifier = [172,15,60,131,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InlineQueryPeerTypePM TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InlineQueryPeerTypeChat : InlineQueryPeerTypeBase, ITlSerializable, ITlDeserializable<InlineQueryPeerTypeChat> {
        public static readonly byte[] Identifier = [10,197,102,215,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InlineQueryPeerTypeChat TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InlineQueryPeerTypeMegagroup : InlineQueryPeerTypeBase, ITlSerializable, ITlDeserializable<InlineQueryPeerTypeMegagroup> {
        public static readonly byte[] Identifier = [67,190,196,94,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InlineQueryPeerTypeMegagroup TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InlineQueryPeerTypeBroadcast : InlineQueryPeerTypeBase, ITlSerializable, ITlDeserializable<InlineQueryPeerTypeBroadcast> {
        public static readonly byte[] Identifier = [154,238,52,99,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InlineQueryPeerTypeBroadcast TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class InlineQueryPeerTypeBotPM : InlineQueryPeerTypeBase, ITlSerializable, ITlDeserializable<InlineQueryPeerTypeBotPM> {
        public static readonly byte[] Identifier = [12,45,59,14,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static InlineQueryPeerTypeBotPM TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesHistoryImportNs {
    public class MessagesHistoryImport : MessagesHistoryImportBase, ITlSerializable, ITlDeserializable<MessagesHistoryImport> {
        public static readonly byte[] Identifier = [11,175,98,22,];
        public required long Id {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesHistoryImport TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesHistoryImportParsedNs {
    public class MessagesHistoryImportParsed : MessagesHistoryImportParsedBase, ITlSerializable, ITlDeserializable<MessagesHistoryImportParsed> {
        public static readonly byte[] Identifier = [185,183,15,94,];
        private int Flags;
        public bool Pm {get;set;}
        public bool Group {get;set;}
        public string? Title {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Title is not null ? 4 : 0) ).TlSerialize());
            if(Title is not null) bytes.AddRange(Title.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesHistoryImportParsed TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var pmLocal = (flagsLocal & 1) is 0 ? default : true ;
            var groupLocal = (flagsLocal & 2) is 0 ? default : true ;
            var titleLocal = (flagsLocal & 4) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            Pm = pmLocal,
            Group = groupLocal,
            Title = titleLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesAffectedFoundMessagesNs {
    public class MessagesAffectedFoundMessages : MessagesAffectedFoundMessagesBase, ITlSerializable, ITlDeserializable<MessagesAffectedFoundMessages> {
        public static readonly byte[] Identifier = [108,62,141,239,];
        public required int Pts {get;set;}
        public required int PtsCount {get;set;}
        public required int Offset {get;set;}
        public required List<int> Messages {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Pts.TlSerialize());
            bytes.AddRange(PtsCount.TlSerialize());
            bytes.AddRange(Offset.TlSerialize());
            bytes.AddRange(Messages.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesAffectedFoundMessages TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var ptsLocal =  des.As<int>().Read();
            var ptsCountLocal =  des.As<int>().Read();
            var offsetLocal =  des.As<int>().Read();
            var messagesLocal =  des.ReadNumbers<int>();
            return new() {
            Pts = ptsLocal,
            PtsCount = ptsCountLocal,
            Offset = offsetLocal,
            Messages = messagesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChatInviteImporterNs {
    public class ChatInviteImporter : ChatInviteImporterBase, ITlSerializable, ITlDeserializable<ChatInviteImporter> {
        public static readonly byte[] Identifier = [217,223,90,140,];
        private int Flags;
        public bool Requested {get;set;}
        public bool ViaChatlist {get;set;}
        public required long UserId {get;set;}
        public required int Date {get;set;}
        public string? About {get;set;}
        public long? ApprovedBy {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (About is not null ? 4 : 0) | (ApprovedBy is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            if(About is not null) bytes.AddRange(About.TlSerialize());
            if(ApprovedBy is not null) bytes.AddRange(ApprovedBy.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatInviteImporter TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var requestedLocal = (flagsLocal & 1) is 0 ? default : true ;
            var viaChatlistLocal = (flagsLocal & 8) is 0 ? default : true ;
            var userIdLocal =  des.As<long>().Read();
            var dateLocal =  des.As<int>().Read();
            var aboutLocal = (flagsLocal & 4) is 0 ? default : des.As<string>().Read() ;
            var approvedByLocal = (flagsLocal & 2) is 0 ? default : des.As<long>().Read() ;
            return new() {
            Flags = flagsLocal,
            Requested = requestedLocal,
            ViaChatlist = viaChatlistLocal,
            UserId = userIdLocal,
            Date = dateLocal,
            About = aboutLocal,
            ApprovedBy = approvedByLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesExportedChatInvitesNs {
    public class MessagesExportedChatInvites : MessagesExportedChatInvitesBase, ITlSerializable, ITlDeserializable<MessagesExportedChatInvites> {
        public static readonly byte[] Identifier = [204,45,198,189,];
        public required int Count {get;set;}
        public required List<ExportedChatInviteBase> Invites {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(Invites.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesExportedChatInvites TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var countLocal =  des.As<int>().Read();
            var invitesLocal =  des.Read<ExportedChatInviteBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Count = countLocal,
            Invites = invitesLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesExportedChatInviteNs {
    public class MessagesExportedChatInvite : MessagesExportedChatInviteBase, ITlSerializable, ITlDeserializable<MessagesExportedChatInvite> {
        public static readonly byte[] Identifier = [80,190,113,24,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Invite.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesExportedChatInvite TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var inviteLocal =  ExportedChatInviteBase.TlDeserialize(des);
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Invite = inviteLocal,
            Users = usersLocal,
            };
        }
    }
    public class MessagesExportedChatInviteReplaced : MessagesExportedChatInviteBase, ITlSerializable, ITlDeserializable<MessagesExportedChatInviteReplaced> {
        public static readonly byte[] Identifier = [239,0,38,34,];
        public required ExportedChatInviteBase NewInvite {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Invite.TlSerialize());
            bytes.AddRange(NewInvite.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesExportedChatInviteReplaced TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var inviteLocal =  ExportedChatInviteBase.TlDeserialize(des);
            var newInviteLocal =  ExportedChatInviteBase.TlDeserialize(des);
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Invite = inviteLocal,
            NewInvite = newInviteLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesChatInviteImportersNs {
    public class MessagesChatInviteImporters : MessagesChatInviteImportersBase, ITlSerializable, ITlDeserializable<MessagesChatInviteImporters> {
        public static readonly byte[] Identifier = [10,176,182,129,];
        public required int Count {get;set;}
        public required List<ChatInviteImporterBase> Importers {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(Importers.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesChatInviteImporters TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var countLocal =  des.As<int>().Read();
            var importersLocal =  des.Read<ChatInviteImporterBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Count = countLocal,
            Importers = importersLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChatAdminWithInvitesNs {
    public class ChatAdminWithInvites : ChatAdminWithInvitesBase, ITlSerializable, ITlDeserializable<ChatAdminWithInvites> {
        public static readonly byte[] Identifier = [35,239,236,242,];
        public required long AdminId {get;set;}
        public required int InvitesCount {get;set;}
        public required int RevokedInvitesCount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(AdminId.TlSerialize());
            bytes.AddRange(InvitesCount.TlSerialize());
            bytes.AddRange(RevokedInvitesCount.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatAdminWithInvites TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var adminIdLocal =  des.As<long>().Read();
            var invitesCountLocal =  des.As<int>().Read();
            var revokedInvitesCountLocal =  des.As<int>().Read();
            return new() {
            AdminId = adminIdLocal,
            InvitesCount = invitesCountLocal,
            RevokedInvitesCount = revokedInvitesCountLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesChatAdminsWithInvitesNs {
    public class MessagesChatAdminsWithInvites : MessagesChatAdminsWithInvitesBase, ITlSerializable, ITlDeserializable<MessagesChatAdminsWithInvites> {
        public static readonly byte[] Identifier = [215,114,155,182,];
        public required List<ChatAdminWithInvitesBase> Admins {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Admins.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesChatAdminsWithInvites TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var adminsLocal =  des.Read<ChatAdminWithInvitesBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Admins = adminsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesCheckedHistoryImportPeerNs {
    public class MessagesCheckedHistoryImportPeer : MessagesCheckedHistoryImportPeerBase, ITlSerializable, ITlDeserializable<MessagesCheckedHistoryImportPeer> {
        public static readonly byte[] Identifier = [23,231,77,162,];
        public required string ConfirmText {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ConfirmText.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesCheckedHistoryImportPeer TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var confirmTextLocal =  des.As<string>().Read();
            return new() {
            ConfirmText = confirmTextLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PhoneJoinAsPeersNs {
    public class PhoneJoinAsPeers : PhoneJoinAsPeersBase, ITlSerializable, ITlDeserializable<PhoneJoinAsPeers> {
        public static readonly byte[] Identifier = [63,98,229,175,];
        public required List<PeerBase> Peers {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peers.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhoneJoinAsPeers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peersLocal =  des.Read<PeerBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Peers = peersLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PhoneExportedGroupCallInviteNs {
    public class PhoneExportedGroupCallInvite : PhoneExportedGroupCallInviteBase, ITlSerializable, ITlDeserializable<PhoneExportedGroupCallInvite> {
        public static readonly byte[] Identifier = [88,209,75,32,];
        public required string Link {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Link.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhoneExportedGroupCallInvite TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var linkLocal =  des.As<string>().Read();
            return new() {
            Link = linkLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.GroupCallParticipantVideoSourceGroupNs {
    public class GroupCallParticipantVideoSourceGroup : GroupCallParticipantVideoSourceGroupBase, ITlSerializable, ITlDeserializable<GroupCallParticipantVideoSourceGroup> {
        public static readonly byte[] Identifier = [183,24,177,220,];
        public required string Semantics {get;set;}
        public required List<int> Sources {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Semantics.TlSerialize());
            bytes.AddRange(Sources.TlSerialize());
            return bytes.ToArray();
        }

        public new static GroupCallParticipantVideoSourceGroup TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var semanticsLocal =  des.As<string>().Read();
            var sourcesLocal =  des.ReadNumbers<int>();
            return new() {
            Semantics = semanticsLocal,
            Sources = sourcesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.GroupCallParticipantVideoNs {
    public class GroupCallParticipantVideo : GroupCallParticipantVideoBase, ITlSerializable, ITlDeserializable<GroupCallParticipantVideo> {
        public static readonly byte[] Identifier = [200,58,117,103,];
        private int Flags;
        public bool Paused {get;set;}
        public required string Endpoint {get;set;}
        public required List<GroupCallParticipantVideoSourceGroupBase> SourceGroups {get;set;}
        public int? AudioSource {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (AudioSource is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(Endpoint.TlSerialize());
            bytes.AddRange(SourceGroups.TlSerialize());
            if(AudioSource is not null) bytes.AddRange(AudioSource.TlSerialize());
            return bytes.ToArray();
        }

        public new static GroupCallParticipantVideo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var pausedLocal = (flagsLocal & 1) is 0 ? default : true ;
            var endpointLocal =  des.As<string>().Read();
            var sourceGroupsLocal =  des.Read<GroupCallParticipantVideoSourceGroupBase>();
            var audioSourceLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Paused = pausedLocal,
            Endpoint = endpointLocal,
            SourceGroups = sourceGroupsLocal,
            AudioSource = audioSourceLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StickersSuggestedShortNameNs {
    public class StickersSuggestedShortName : StickersSuggestedShortNameBase, ITlSerializable, ITlDeserializable<StickersSuggestedShortName> {
        public static readonly byte[] Identifier = [63,160,254,133,];
        public required string ShortName {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ShortName.TlSerialize());
            return bytes.ToArray();
        }

        public new static StickersSuggestedShortName TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var shortNameLocal =  des.As<string>().Read();
            return new() {
            ShortName = shortNameLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.BotCommandScopeNs {
    public class BotCommandScopeDefault : BotCommandScopeBase, ITlSerializable, ITlDeserializable<BotCommandScopeDefault> {
        public static readonly byte[] Identifier = [171,178,108,47,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static BotCommandScopeDefault TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class BotCommandScopeUsers : BotCommandScopeBase, ITlSerializable, ITlDeserializable<BotCommandScopeUsers> {
        public static readonly byte[] Identifier = [216,4,79,60,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static BotCommandScopeUsers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class BotCommandScopeChats : BotCommandScopeBase, ITlSerializable, ITlDeserializable<BotCommandScopeChats> {
        public static readonly byte[] Identifier = [129,168,225,111,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static BotCommandScopeChats TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class BotCommandScopeChatAdmins : BotCommandScopeBase, ITlSerializable, ITlDeserializable<BotCommandScopeChatAdmins> {
        public static readonly byte[] Identifier = [106,96,170,185,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static BotCommandScopeChatAdmins TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class BotCommandScopePeer : BotCommandScopeBase, ITlSerializable, ITlDeserializable<BotCommandScopePeer> {
        public static readonly byte[] Identifier = [125,137,157,219,];
        public required InputPeerBase Peer {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            return bytes.ToArray();
        }

        public new static BotCommandScopePeer TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  InputPeerBase.TlDeserialize(des);
            return new() {
            Peer = peerLocal,
            };
        }
    }
    public class BotCommandScopePeerAdmins : BotCommandScopeBase, ITlSerializable, ITlDeserializable<BotCommandScopePeerAdmins> {
        public static readonly byte[] Identifier = [209,99,216,63,];
        public required InputPeerBase Peer {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            return bytes.ToArray();
        }

        public new static BotCommandScopePeerAdmins TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  InputPeerBase.TlDeserialize(des);
            return new() {
            Peer = peerLocal,
            };
        }
    }
    public class BotCommandScopePeerUser : BotCommandScopeBase, ITlSerializable, ITlDeserializable<BotCommandScopePeerUser> {
        public static readonly byte[] Identifier = [243,33,19,10,];
        public required InputPeerBase Peer {get;set;}
        public required InputUserBase UserId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            return bytes.ToArray();
        }

        public new static BotCommandScopePeerUser TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  InputPeerBase.TlDeserialize(des);
            var userIdLocal =  InputUserBase.TlDeserialize(des);
            return new() {
            Peer = peerLocal,
            UserId = userIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AccountResetPasswordResultNs {
    public class AccountResetPasswordFailedWait : AccountResetPasswordResultBase, ITlSerializable, ITlDeserializable<AccountResetPasswordFailedWait> {
        public static readonly byte[] Identifier = [97,152,119,227,];
        public required int RetryDate {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(RetryDate.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountResetPasswordFailedWait TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var retryDateLocal =  des.As<int>().Read();
            return new() {
            RetryDate = retryDateLocal,
            };
        }
    }
    public class AccountResetPasswordRequestedWait : AccountResetPasswordResultBase, ITlSerializable, ITlDeserializable<AccountResetPasswordRequestedWait> {
        public static readonly byte[] Identifier = [125,252,239,233,];
        public required int UntilDate {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UntilDate.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountResetPasswordRequestedWait TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var untilDateLocal =  des.As<int>().Read();
            return new() {
            UntilDate = untilDateLocal,
            };
        }
    }
    public class AccountResetPasswordOk : AccountResetPasswordResultBase, ITlSerializable, ITlDeserializable<AccountResetPasswordOk> {
        public static readonly byte[] Identifier = [62,214,38,233,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static AccountResetPasswordOk TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.SponsoredMessageNs {
    public class SponsoredMessage : SponsoredMessageBase, ITlSerializable, ITlDeserializable<SponsoredMessage> {
        public static readonly byte[] Identifier = [247,131,83,237,];
        private int Flags;
        public bool Recommended {get;set;}
        public bool ShowPeerPhoto {get;set;}
        public required byte[] RandomId {get;set;}
        public PeerBase? FromId {get;set;}
        public ChatInviteBase? ChatInvite {get;set;}
        public string? ChatInviteHash {get;set;}
        public int? ChannelPost {get;set;}
        public string? StartParam {get;set;}
        public SponsoredWebPageBase? Webpage {get;set;}
        public BotAppBase? App {get;set;}
        public required string Message {get;set;}
        public List<MessageEntityBase>? Entities {get;set;}
        public string? ButtonText {get;set;}
        public string? SponsorInfo {get;set;}
        public string? AdditionalInfo {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (FromId is not null ? 8 : 0) | (ChatInvite is not null ? 16 : 0) | (ChatInviteHash is not null ? 16 : 0) | (ChannelPost is not null ? 4 : 0) | (StartParam is not null ? 1 : 0) | (Webpage is not null ? 512 : 0) | (App is not null ? 1024 : 0) | (Entities is not null ? 2 : 0) | (ButtonText is not null ? 2048 : 0) | (SponsorInfo is not null ? 128 : 0) | (AdditionalInfo is not null ? 256 : 0) ).TlSerialize());
            bytes.AddRange(RandomId.TlSerialize());
            if(FromId is not null) bytes.AddRange(FromId.TlSerialize());
            if(ChatInvite is not null) bytes.AddRange(ChatInvite.TlSerialize());
            if(ChatInviteHash is not null) bytes.AddRange(ChatInviteHash.TlSerialize());
            if(ChannelPost is not null) bytes.AddRange(ChannelPost.TlSerialize());
            if(StartParam is not null) bytes.AddRange(StartParam.TlSerialize());
            if(Webpage is not null) bytes.AddRange(Webpage.TlSerialize());
            if(App is not null) bytes.AddRange(App.TlSerialize());
            bytes.AddRange(Message.TlSerialize());
            if(Entities is not null) bytes.AddRange(Entities.TlSerialize());
            if(ButtonText is not null) bytes.AddRange(ButtonText.TlSerialize());
            if(SponsorInfo is not null) bytes.AddRange(SponsorInfo.TlSerialize());
            if(AdditionalInfo is not null) bytes.AddRange(AdditionalInfo.TlSerialize());
            return bytes.ToArray();
        }

        public new static SponsoredMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var recommendedLocal = (flagsLocal & 32) is 0 ? default : true ;
            var showPeerPhotoLocal = (flagsLocal & 64) is 0 ? default : true ;
            var randomIdLocal =  des.As<byte[]>().Read();
            var fromIdLocal = (flagsLocal & 8) is 0 ? default : PeerBase.TlDeserialize(des) ;
            var chatInviteLocal = (flagsLocal & 16) is 0 ? default : ChatInviteBase.TlDeserialize(des) ;
            var chatInviteHashLocal = (flagsLocal & 16) is 0 ? default : des.As<string>().Read() ;
            var channelPostLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            var startParamLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var webpageLocal = (flagsLocal & 512) is 0 ? default : SponsoredWebPageBase.TlDeserialize(des) ;
            var appLocal = (flagsLocal & 1024) is 0 ? default : BotAppBase.TlDeserialize(des) ;
            var messageLocal =  des.As<string>().Read();
            var entitiesLocal = (flagsLocal & 2) is 0 ? default : des.Read<MessageEntityBase>() ;
            var buttonTextLocal = (flagsLocal & 2048) is 0 ? default : des.As<string>().Read() ;
            var sponsorInfoLocal = (flagsLocal & 128) is 0 ? default : des.As<string>().Read() ;
            var additionalInfoLocal = (flagsLocal & 256) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            Recommended = recommendedLocal,
            ShowPeerPhoto = showPeerPhotoLocal,
            RandomId = randomIdLocal,
            FromId = fromIdLocal,
            ChatInvite = chatInviteLocal,
            ChatInviteHash = chatInviteHashLocal,
            ChannelPost = channelPostLocal,
            StartParam = startParamLocal,
            Webpage = webpageLocal,
            App = appLocal,
            Message = messageLocal,
            Entities = entitiesLocal,
            ButtonText = buttonTextLocal,
            SponsorInfo = sponsorInfoLocal,
            AdditionalInfo = additionalInfoLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesSponsoredMessagesNs {
    public class MessagesSponsoredMessages : MessagesSponsoredMessagesBase, ITlSerializable, ITlDeserializable<MessagesSponsoredMessages> {
        public static readonly byte[] Identifier = [135,29,238,201,];
        private int Flags;
        public int? PostsBetween {get;set;}
        public required List<SponsoredMessageBase> Messages {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (PostsBetween is not null ? 1 : 0) ).TlSerialize());
            if(PostsBetween is not null) bytes.AddRange(PostsBetween.TlSerialize());
            bytes.AddRange(Messages.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesSponsoredMessages TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var postsBetweenLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var messagesLocal =  des.Read<SponsoredMessageBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Flags = flagsLocal,
            PostsBetween = postsBetweenLocal,
            Messages = messagesLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }
    public class MessagesSponsoredMessagesEmpty : MessagesSponsoredMessagesBase, ITlSerializable, ITlDeserializable<MessagesSponsoredMessagesEmpty> {
        public static readonly byte[] Identifier = [15,73,57,24,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static MessagesSponsoredMessagesEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.SearchResultsCalendarPeriodNs {
    public class SearchResultsCalendarPeriod : SearchResultsCalendarPeriodBase, ITlSerializable, ITlDeserializable<SearchResultsCalendarPeriod> {
        public static readonly byte[] Identifier = [159,83,176,201,];
        public required int Date {get;set;}
        public required int MinMsgId {get;set;}
        public required int MaxMsgId {get;set;}
        public required int Count {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(MinMsgId.TlSerialize());
            bytes.AddRange(MaxMsgId.TlSerialize());
            bytes.AddRange(Count.TlSerialize());
            return bytes.ToArray();
        }

        public new static SearchResultsCalendarPeriod TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var dateLocal =  des.As<int>().Read();
            var minMsgIdLocal =  des.As<int>().Read();
            var maxMsgIdLocal =  des.As<int>().Read();
            var countLocal =  des.As<int>().Read();
            return new() {
            Date = dateLocal,
            MinMsgId = minMsgIdLocal,
            MaxMsgId = maxMsgIdLocal,
            Count = countLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesSearchResultsCalendarNs {
    public class MessagesSearchResultsCalendar : MessagesSearchResultsCalendarBase, ITlSerializable, ITlDeserializable<MessagesSearchResultsCalendar> {
        public static readonly byte[] Identifier = [60,226,126,20,];
        private int Flags;
        public bool Inexact {get;set;}
        public required int Count {get;set;}
        public required int MinDate {get;set;}
        public required int MinMsgId {get;set;}
        public int? OffsetIdOffset {get;set;}
        public required List<SearchResultsCalendarPeriodBase> Periods {get;set;}
        public required List<MessageBase> Messages {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (OffsetIdOffset is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(MinDate.TlSerialize());
            bytes.AddRange(MinMsgId.TlSerialize());
            if(OffsetIdOffset is not null) bytes.AddRange(OffsetIdOffset.TlSerialize());
            bytes.AddRange(Periods.TlSerialize());
            bytes.AddRange(Messages.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesSearchResultsCalendar TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var inexactLocal = (flagsLocal & 1) is 0 ? default : true ;
            var countLocal =  des.As<int>().Read();
            var minDateLocal =  des.As<int>().Read();
            var minMsgIdLocal =  des.As<int>().Read();
            var offsetIdOffsetLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            var periodsLocal =  des.Read<SearchResultsCalendarPeriodBase>();
            var messagesLocal =  des.Read<MessageBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Flags = flagsLocal,
            Inexact = inexactLocal,
            Count = countLocal,
            MinDate = minDateLocal,
            MinMsgId = minMsgIdLocal,
            OffsetIdOffset = offsetIdOffsetLocal,
            Periods = periodsLocal,
            Messages = messagesLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.SearchResultsPositionNs {
    public class SearchResultPosition : SearchResultsPositionBase, ITlSerializable, ITlDeserializable<SearchResultPosition> {
        public static readonly byte[] Identifier = [103,139,100,127,];
        public required int MsgId {get;set;}
        public required int Date {get;set;}
        public required int Offset {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(MsgId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(Offset.TlSerialize());
            return bytes.ToArray();
        }

        public new static SearchResultPosition TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var msgIdLocal =  des.As<int>().Read();
            var dateLocal =  des.As<int>().Read();
            var offsetLocal =  des.As<int>().Read();
            return new() {
            MsgId = msgIdLocal,
            Date = dateLocal,
            Offset = offsetLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesSearchResultsPositionsNs {
    public class MessagesSearchResultsPositions : MessagesSearchResultsPositionsBase, ITlSerializable, ITlDeserializable<MessagesSearchResultsPositions> {
        public static readonly byte[] Identifier = [175,43,178,83,];
        public required int Count {get;set;}
        public required List<SearchResultsPositionBase> Positions {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(Positions.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesSearchResultsPositions TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var countLocal =  des.As<int>().Read();
            var positionsLocal =  des.Read<SearchResultsPositionBase>();
            return new() {
            Count = countLocal,
            Positions = positionsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChannelsSendAsPeersNs {
    public class ChannelsSendAsPeers : ChannelsSendAsPeersBase, ITlSerializable, ITlDeserializable<ChannelsSendAsPeers> {
        public static readonly byte[] Identifier = [198,176,150,244,];
        public required List<SendAsPeerBase> Peers {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peers.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChannelsSendAsPeers TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peersLocal =  des.Read<SendAsPeerBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Peers = peersLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.UsersUserFullNs {
    public class UsersUserFull : UsersUserFullBase, ITlSerializable, ITlDeserializable<UsersUserFull> {
        public static readonly byte[] Identifier = [46,21,109,59,];
        public required UserFullBase FullUser {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(FullUser.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static UsersUserFull TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var fullUserLocal =  UserFullBase.TlDeserialize(des);
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            FullUser = fullUserLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesPeerSettingsNs {
    public class MessagesPeerSettings : MessagesPeerSettingsBase, ITlSerializable, ITlDeserializable<MessagesPeerSettings> {
        public static readonly byte[] Identifier = [77,185,128,104,];
        public required PeerSettingsBase Settings {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Settings.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesPeerSettings TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var settingsLocal =  PeerSettingsBase.TlDeserialize(des);
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Settings = settingsLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AuthLoggedOutNs {
    public class AuthLoggedOut : AuthLoggedOutBase, ITlSerializable, ITlDeserializable<AuthLoggedOut> {
        public static readonly byte[] Identifier = [95,131,162,195,];
        private int Flags;
        public byte[]? FutureAuthToken {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (FutureAuthToken is not null ? 1 : 0) ).TlSerialize());
            if(FutureAuthToken is not null) bytes.AddRange(FutureAuthToken.TlSerialize());
            return bytes.ToArray();
        }

        public new static AuthLoggedOut TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var futureAuthTokenLocal = (flagsLocal & 1) is 0 ? default : des.As<byte[]>().Read() ;
            return new() {
            Flags = flagsLocal,
            FutureAuthToken = futureAuthTokenLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ReactionCountNs {
    public class ReactionCount : ReactionCountBase, ITlSerializable, ITlDeserializable<ReactionCount> {
        public static readonly byte[] Identifier = [128,203,209,163,];
        private int Flags;
        public int? ChosenOrder {get;set;}
        public required ReactionBase Reaction {get;set;}
        public required int Count {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (ChosenOrder is not null ? 1 : 0) ).TlSerialize());
            if(ChosenOrder is not null) bytes.AddRange(ChosenOrder.TlSerialize());
            bytes.AddRange(Reaction.TlSerialize());
            bytes.AddRange(Count.TlSerialize());
            return bytes.ToArray();
        }

        public new static ReactionCount TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var chosenOrderLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var reactionLocal =  ReactionBase.TlDeserialize(des);
            var countLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            ChosenOrder = chosenOrderLocal,
            Reaction = reactionLocal,
            Count = countLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessageReactionsNs {
    public class MessageReactions : MessageReactionsBase, ITlSerializable, ITlDeserializable<MessageReactions> {
        public static readonly byte[] Identifier = [121,148,43,79,];
        private int Flags;
        public bool Min {get;set;}
        public bool CanSeeList {get;set;}
        public required List<ReactionCountBase> Results {get;set;}
        public List<MessagePeerReactionBase>? RecentReactions {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (RecentReactions is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(Results.TlSerialize());
            if(RecentReactions is not null) bytes.AddRange(RecentReactions.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageReactions TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var minLocal = (flagsLocal & 1) is 0 ? default : true ;
            var canSeeListLocal = (flagsLocal & 4) is 0 ? default : true ;
            var resultsLocal =  des.Read<ReactionCountBase>();
            var recentReactionsLocal = (flagsLocal & 2) is 0 ? default : des.Read<MessagePeerReactionBase>() ;
            return new() {
            Flags = flagsLocal,
            Min = minLocal,
            CanSeeList = canSeeListLocal,
            Results = resultsLocal,
            RecentReactions = recentReactionsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesMessageReactionsListNs {
    public class MessagesMessageReactionsList : MessagesMessageReactionsListBase, ITlSerializable, ITlDeserializable<MessagesMessageReactionsList> {
        public static readonly byte[] Identifier = [45,73,189,49,];
        private int Flags;
        public required int Count {get;set;}
        public required List<MessagePeerReactionBase> Reactions {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public string? NextOffset {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (NextOffset is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(Reactions.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            if(NextOffset is not null) bytes.AddRange(NextOffset.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesMessageReactionsList TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var countLocal =  des.As<int>().Read();
            var reactionsLocal =  des.Read<MessagePeerReactionBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            var nextOffsetLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            Count = countLocal,
            Reactions = reactionsLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            NextOffset = nextOffsetLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AvailableReactionNs {
    public class AvailableReaction : AvailableReactionBase, ITlSerializable, ITlDeserializable<AvailableReaction> {
        public static readonly byte[] Identifier = [1,236,119,192,];
        private int Flags;
        public bool Inactive {get;set;}
        public bool Premium {get;set;}
        public required string Reaction {get;set;}
        public required string Title {get;set;}
        public required DocumentBase StaticIcon {get;set;}
        public required DocumentBase AppearAnimation {get;set;}
        public required DocumentBase SelectAnimation {get;set;}
        public required DocumentBase ActivateAnimation {get;set;}
        public required DocumentBase EffectAnimation {get;set;}
        public DocumentBase? AroundAnimation {get;set;}
        public DocumentBase? CenterIcon {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (AroundAnimation is not null ? 2 : 0) | (CenterIcon is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(Reaction.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(StaticIcon.TlSerialize());
            bytes.AddRange(AppearAnimation.TlSerialize());
            bytes.AddRange(SelectAnimation.TlSerialize());
            bytes.AddRange(ActivateAnimation.TlSerialize());
            bytes.AddRange(EffectAnimation.TlSerialize());
            if(AroundAnimation is not null) bytes.AddRange(AroundAnimation.TlSerialize());
            if(CenterIcon is not null) bytes.AddRange(CenterIcon.TlSerialize());
            return bytes.ToArray();
        }

        public new static AvailableReaction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var inactiveLocal = (flagsLocal & 1) is 0 ? default : true ;
            var premiumLocal = (flagsLocal & 4) is 0 ? default : true ;
            var reactionLocal =  des.As<string>().Read();
            var titleLocal =  des.As<string>().Read();
            var staticIconLocal =  DocumentBase.TlDeserialize(des);
            var appearAnimationLocal =  DocumentBase.TlDeserialize(des);
            var selectAnimationLocal =  DocumentBase.TlDeserialize(des);
            var activateAnimationLocal =  DocumentBase.TlDeserialize(des);
            var effectAnimationLocal =  DocumentBase.TlDeserialize(des);
            var aroundAnimationLocal = (flagsLocal & 2) is 0 ? default : DocumentBase.TlDeserialize(des) ;
            var centerIconLocal = (flagsLocal & 2) is 0 ? default : DocumentBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Inactive = inactiveLocal,
            Premium = premiumLocal,
            Reaction = reactionLocal,
            Title = titleLocal,
            StaticIcon = staticIconLocal,
            AppearAnimation = appearAnimationLocal,
            SelectAnimation = selectAnimationLocal,
            ActivateAnimation = activateAnimationLocal,
            EffectAnimation = effectAnimationLocal,
            AroundAnimation = aroundAnimationLocal,
            CenterIcon = centerIconLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesAvailableReactionsNs {
    public class MessagesAvailableReactionsNotModified : MessagesAvailableReactionsBase, ITlSerializable, ITlDeserializable<MessagesAvailableReactionsNotModified> {
        public static readonly byte[] Identifier = [87,25,7,159,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static MessagesAvailableReactionsNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class MessagesAvailableReactions : MessagesAvailableReactionsBase, ITlSerializable, ITlDeserializable<MessagesAvailableReactions> {
        public static readonly byte[] Identifier = [173,58,142,118,];
        public required int Hash {get;set;}
        public required List<AvailableReactionBase> Reactions {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(Reactions.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesAvailableReactions TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var hashLocal =  des.As<int>().Read();
            var reactionsLocal =  des.Read<AvailableReactionBase>();
            return new() {
            Hash = hashLocal,
            Reactions = reactionsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagePeerReactionNs {
    public class MessagePeerReaction : MessagePeerReactionBase, ITlSerializable, ITlDeserializable<MessagePeerReaction> {
        public static readonly byte[] Identifier = [60,182,121,140,];
        private int Flags;
        public bool Big {get;set;}
        public bool Unread {get;set;}
        public bool My {get;set;}
        public required PeerBase PeerId {get;set;}
        public required int Date {get;set;}
        public required ReactionBase Reaction {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(PeerId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(Reaction.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagePeerReaction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var bigLocal = (flagsLocal & 1) is 0 ? default : true ;
            var unreadLocal = (flagsLocal & 2) is 0 ? default : true ;
            var myLocal = (flagsLocal & 4) is 0 ? default : true ;
            var peerIdLocal =  PeerBase.TlDeserialize(des);
            var dateLocal =  des.As<int>().Read();
            var reactionLocal =  ReactionBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Big = bigLocal,
            Unread = unreadLocal,
            My = myLocal,
            PeerId = peerIdLocal,
            Date = dateLocal,
            Reaction = reactionLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.GroupCallStreamChannelNs {
    public class GroupCallStreamChannel : GroupCallStreamChannelBase, ITlSerializable, ITlDeserializable<GroupCallStreamChannel> {
        public static readonly byte[] Identifier = [175,72,235,128,];
        public required int Channel {get;set;}
        public required int Scale {get;set;}
        public required long LastTimestampMs {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Channel.TlSerialize());
            bytes.AddRange(Scale.TlSerialize());
            bytes.AddRange(LastTimestampMs.TlSerialize());
            return bytes.ToArray();
        }

        public new static GroupCallStreamChannel TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var channelLocal =  des.As<int>().Read();
            var scaleLocal =  des.As<int>().Read();
            var lastTimestampMsLocal =  des.As<long>().Read();
            return new() {
            Channel = channelLocal,
            Scale = scaleLocal,
            LastTimestampMs = lastTimestampMsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PhoneGroupCallStreamChannelsNs {
    public class PhoneGroupCallStreamChannels : PhoneGroupCallStreamChannelsBase, ITlSerializable, ITlDeserializable<PhoneGroupCallStreamChannels> {
        public static readonly byte[] Identifier = [178,130,228,208,];
        public required List<GroupCallStreamChannelBase> Channels {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Channels.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhoneGroupCallStreamChannels TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var channelsLocal =  des.Read<GroupCallStreamChannelBase>();
            return new() {
            Channels = channelsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PhoneGroupCallStreamRtmpUrlNs {
    public class PhoneGroupCallStreamRtmpUrl : PhoneGroupCallStreamRtmpUrlBase, ITlSerializable, ITlDeserializable<PhoneGroupCallStreamRtmpUrl> {
        public static readonly byte[] Identifier = [50,52,191,45,];
        public required string Url {get;set;}
        public required string Key {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(Key.TlSerialize());
            return bytes.ToArray();
        }

        public new static PhoneGroupCallStreamRtmpUrl TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlLocal =  des.As<string>().Read();
            var keyLocal =  des.As<string>().Read();
            return new() {
            Url = urlLocal,
            Key = keyLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AttachMenuBotIconColorNs {
    public class AttachMenuBotIconColor : AttachMenuBotIconColorBase, ITlSerializable, ITlDeserializable<AttachMenuBotIconColor> {
        public static readonly byte[] Identifier = [240,243,118,69,];
        public required string Name {get;set;}
        public required int Color {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Name.TlSerialize());
            bytes.AddRange(Color.TlSerialize());
            return bytes.ToArray();
        }

        public new static AttachMenuBotIconColor TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var nameLocal =  des.As<string>().Read();
            var colorLocal =  des.As<int>().Read();
            return new() {
            Name = nameLocal,
            Color = colorLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AttachMenuBotIconNs {
    public class AttachMenuBotIcon : AttachMenuBotIconBase, ITlSerializable, ITlDeserializable<AttachMenuBotIcon> {
        public static readonly byte[] Identifier = [107,56,167,178,];
        private int Flags;
        public required string Name {get;set;}
        public required DocumentBase Icon {get;set;}
        public List<AttachMenuBotIconColorBase>? Colors {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Colors is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Name.TlSerialize());
            bytes.AddRange(Icon.TlSerialize());
            if(Colors is not null) bytes.AddRange(Colors.TlSerialize());
            return bytes.ToArray();
        }

        public new static AttachMenuBotIcon TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var nameLocal =  des.As<string>().Read();
            var iconLocal =  DocumentBase.TlDeserialize(des);
            var colorsLocal = (flagsLocal & 1) is 0 ? default : des.Read<AttachMenuBotIconColorBase>() ;
            return new() {
            Flags = flagsLocal,
            Name = nameLocal,
            Icon = iconLocal,
            Colors = colorsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AttachMenuBotNs {
    public class AttachMenuBot : AttachMenuBotBase, ITlSerializable, ITlDeserializable<AttachMenuBot> {
        public static readonly byte[] Identifier = [254,141,13,217,];
        private int Flags;
        public bool Inactive {get;set;}
        public bool HasSettings {get;set;}
        public bool RequestWriteAccess {get;set;}
        public bool ShowInAttachMenu {get;set;}
        public bool ShowInSideMenu {get;set;}
        public bool SideMenuDisclaimerNeeded {get;set;}
        public required long BotId {get;set;}
        public required string ShortName {get;set;}
        public List<AttachMenuPeerTypeBase>? PeerTypes {get;set;}
        public required List<AttachMenuBotIconBase> Icons {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (PeerTypes is not null ? 8 : 0) ).TlSerialize());
            bytes.AddRange(BotId.TlSerialize());
            bytes.AddRange(ShortName.TlSerialize());
            if(PeerTypes is not null) bytes.AddRange(PeerTypes.TlSerialize());
            bytes.AddRange(Icons.TlSerialize());
            return bytes.ToArray();
        }

        public new static AttachMenuBot TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var inactiveLocal = (flagsLocal & 1) is 0 ? default : true ;
            var hasSettingsLocal = (flagsLocal & 2) is 0 ? default : true ;
            var requestWriteAccessLocal = (flagsLocal & 4) is 0 ? default : true ;
            var showInAttachMenuLocal = (flagsLocal & 8) is 0 ? default : true ;
            var showInSideMenuLocal = (flagsLocal & 16) is 0 ? default : true ;
            var sideMenuDisclaimerNeededLocal = (flagsLocal & 32) is 0 ? default : true ;
            var botIdLocal =  des.As<long>().Read();
            var shortNameLocal =  des.As<string>().Read();
            var peerTypesLocal = (flagsLocal & 8) is 0 ? default : des.Read<AttachMenuPeerTypeBase>() ;
            var iconsLocal =  des.Read<AttachMenuBotIconBase>();
            return new() {
            Flags = flagsLocal,
            Inactive = inactiveLocal,
            HasSettings = hasSettingsLocal,
            RequestWriteAccess = requestWriteAccessLocal,
            ShowInAttachMenu = showInAttachMenuLocal,
            ShowInSideMenu = showInSideMenuLocal,
            SideMenuDisclaimerNeeded = sideMenuDisclaimerNeededLocal,
            BotId = botIdLocal,
            ShortName = shortNameLocal,
            PeerTypes = peerTypesLocal,
            Icons = iconsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AttachMenuBotsNs {
    public class AttachMenuBotsNotModified : AttachMenuBotsBase, ITlSerializable, ITlDeserializable<AttachMenuBotsNotModified> {
        public static readonly byte[] Identifier = [92,138,216,241,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static AttachMenuBotsNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class AttachMenuBots : AttachMenuBotsBase, ITlSerializable, ITlDeserializable<AttachMenuBots> {
        public static readonly byte[] Identifier = [192,1,67,60,];
        public required long Hash {get;set;}
        public required List<AttachMenuBotBase> Bots {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(Bots.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static AttachMenuBots TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var hashLocal =  des.As<long>().Read();
            var botsLocal =  des.Read<AttachMenuBotBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Hash = hashLocal,
            Bots = botsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AttachMenuBotsBotNs {
    public class AttachMenuBotsBot : AttachMenuBotsBotBase, ITlSerializable, ITlDeserializable<AttachMenuBotsBot> {
        public static readonly byte[] Identifier = [127,102,191,147,];
        public required AttachMenuBotBase Bot {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Bot.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static AttachMenuBotsBot TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var botLocal =  AttachMenuBotBase.TlDeserialize(des);
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Bot = botLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.WebViewResultNs {
    public class WebViewResultUrl : WebViewResultBase, ITlSerializable, ITlDeserializable<WebViewResultUrl> {
        public static readonly byte[] Identifier = [124,85,20,12,];
        public required long QueryId {get;set;}
        public required string Url {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(QueryId.TlSerialize());
            bytes.AddRange(Url.TlSerialize());
            return bytes.ToArray();
        }

        public new static WebViewResultUrl TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var queryIdLocal =  des.As<long>().Read();
            var urlLocal =  des.As<string>().Read();
            return new() {
            QueryId = queryIdLocal,
            Url = urlLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.SimpleWebViewResultNs {
    public class SimpleWebViewResultUrl : SimpleWebViewResultBase, ITlSerializable, ITlDeserializable<SimpleWebViewResultUrl> {
        public static readonly byte[] Identifier = [187,118,47,136,];
        public required string Url {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Url.TlSerialize());
            return bytes.ToArray();
        }

        public new static SimpleWebViewResultUrl TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlLocal =  des.As<string>().Read();
            return new() {
            Url = urlLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.WebViewMessageSentNs {
    public class WebViewMessageSent : WebViewMessageSentBase, ITlSerializable, ITlDeserializable<WebViewMessageSent> {
        public static readonly byte[] Identifier = [28,81,148,12,];
        private int Flags;
        public InputBotInlineMessageIDBase? MsgId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (MsgId is not null ? 1 : 0) ).TlSerialize());
            if(MsgId is not null) bytes.AddRange(MsgId.TlSerialize());
            return bytes.ToArray();
        }

        public new static WebViewMessageSent TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var msgIdLocal = (flagsLocal & 1) is 0 ? default : InputBotInlineMessageIDBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            MsgId = msgIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.BotMenuButtonNs {
    public class BotMenuButtonDefault : BotMenuButtonBase, ITlSerializable, ITlDeserializable<BotMenuButtonDefault> {
        public static readonly byte[] Identifier = [136,165,51,117,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static BotMenuButtonDefault TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class BotMenuButtonCommands : BotMenuButtonBase, ITlSerializable, ITlDeserializable<BotMenuButtonCommands> {
        public static readonly byte[] Identifier = [5,194,88,66,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static BotMenuButtonCommands TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class BotMenuButton : BotMenuButtonBase, ITlSerializable, ITlDeserializable<BotMenuButton> {
        public static readonly byte[] Identifier = [230,124,181,199,];
        public required string Text {get;set;}
        public required string Url {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(Url.TlSerialize());
            return bytes.ToArray();
        }

        public new static BotMenuButton TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  des.As<string>().Read();
            var urlLocal =  des.As<string>().Read();
            return new() {
            Text = textLocal,
            Url = urlLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AccountSavedRingtonesNs {
    public class AccountSavedRingtonesNotModified : AccountSavedRingtonesBase, ITlSerializable, ITlDeserializable<AccountSavedRingtonesNotModified> {
        public static readonly byte[] Identifier = [177,232,246,251,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static AccountSavedRingtonesNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class AccountSavedRingtones : AccountSavedRingtonesBase, ITlSerializable, ITlDeserializable<AccountSavedRingtones> {
        public static readonly byte[] Identifier = [197,44,233,193,];
        public required long Hash {get;set;}
        public required List<DocumentBase> Ringtones {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(Ringtones.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountSavedRingtones TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var hashLocal =  des.As<long>().Read();
            var ringtonesLocal =  des.Read<DocumentBase>();
            return new() {
            Hash = hashLocal,
            Ringtones = ringtonesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.NotificationSoundNs {
    public class NotificationSoundDefault : NotificationSoundBase, ITlSerializable, ITlDeserializable<NotificationSoundDefault> {
        public static readonly byte[] Identifier = [190,190,232,151,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static NotificationSoundDefault TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class NotificationSoundNone : NotificationSoundBase, ITlSerializable, ITlDeserializable<NotificationSoundNone> {
        public static readonly byte[] Identifier = [223,52,12,111,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static NotificationSoundNone TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class NotificationSoundLocal : NotificationSoundBase, ITlSerializable, ITlDeserializable<NotificationSoundLocal> {
        public static readonly byte[] Identifier = [228,154,11,131,];
        public required string Title {get;set;}
        public required string Data {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(Data.TlSerialize());
            return bytes.ToArray();
        }

        public new static NotificationSoundLocal TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var titleLocal =  des.As<string>().Read();
            var dataLocal =  des.As<string>().Read();
            return new() {
            Title = titleLocal,
            Data = dataLocal,
            };
        }
    }
    public class NotificationSoundRingtone : NotificationSoundBase, ITlSerializable, ITlDeserializable<NotificationSoundRingtone> {
        public static readonly byte[] Identifier = [73,128,108,255,];
        public required long Id {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            return bytes.ToArray();
        }

        public new static NotificationSoundRingtone TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AccountSavedRingtoneNs {
    public class AccountSavedRingtone : AccountSavedRingtoneBase, ITlSerializable, ITlDeserializable<AccountSavedRingtone> {
        public static readonly byte[] Identifier = [109,63,38,183,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static AccountSavedRingtone TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class AccountSavedRingtoneConverted : AccountSavedRingtoneBase, ITlSerializable, ITlDeserializable<AccountSavedRingtoneConverted> {
        public static readonly byte[] Identifier = [183,126,48,31,];
        public required DocumentBase Document {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Document.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountSavedRingtoneConverted TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var documentLocal =  DocumentBase.TlDeserialize(des);
            return new() {
            Document = documentLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AttachMenuPeerTypeNs {
    public class AttachMenuPeerTypeSameBotPM : AttachMenuPeerTypeBase, ITlSerializable, ITlDeserializable<AttachMenuPeerTypeSameBotPM> {
        public static readonly byte[] Identifier = [14,233,107,125,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static AttachMenuPeerTypeSameBotPM TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class AttachMenuPeerTypeBotPM : AttachMenuPeerTypeBase, ITlSerializable, ITlDeserializable<AttachMenuPeerTypeBotPM> {
        public static readonly byte[] Identifier = [26,250,43,195,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static AttachMenuPeerTypeBotPM TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class AttachMenuPeerTypePM : AttachMenuPeerTypeBase, ITlSerializable, ITlDeserializable<AttachMenuPeerTypePM> {
        public static readonly byte[] Identifier = [31,211,70,241,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static AttachMenuPeerTypePM TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class AttachMenuPeerTypeChat : AttachMenuPeerTypeBase, ITlSerializable, ITlDeserializable<AttachMenuPeerTypeChat> {
        public static readonly byte[] Identifier = [63,17,9,5,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static AttachMenuPeerTypeChat TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class AttachMenuPeerTypeBroadcast : AttachMenuPeerTypeBase, ITlSerializable, ITlDeserializable<AttachMenuPeerTypeBroadcast> {
        public static readonly byte[] Identifier = [252,222,251,123,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static AttachMenuPeerTypeBroadcast TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputInvoiceNs {
    public class InputInvoiceMessage : InputInvoiceBase, ITlSerializable, ITlDeserializable<InputInvoiceMessage> {
        public static readonly byte[] Identifier = [89,104,181,197,];
        public required InputPeerBase Peer {get;set;}
        public required int MsgId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(MsgId.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputInvoiceMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  InputPeerBase.TlDeserialize(des);
            var msgIdLocal =  des.As<int>().Read();
            return new() {
            Peer = peerLocal,
            MsgId = msgIdLocal,
            };
        }
    }
    public class InputInvoiceSlug : InputInvoiceBase, ITlSerializable, ITlDeserializable<InputInvoiceSlug> {
        public static readonly byte[] Identifier = [239,202,38,195,];
        public required string Slug {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Slug.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputInvoiceSlug TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var slugLocal =  des.As<string>().Read();
            return new() {
            Slug = slugLocal,
            };
        }
    }
    public class InputInvoicePremiumGiftCode : InputInvoiceBase, ITlSerializable, ITlDeserializable<InputInvoicePremiumGiftCode> {
        public static readonly byte[] Identifier = [13,108,152,152,];
        public required InputStorePaymentPurposeBase Purpose {get;set;}
        public required PremiumGiftCodeOptionBase Option {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Purpose.TlSerialize());
            bytes.AddRange(Option.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputInvoicePremiumGiftCode TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var purposeLocal =  InputStorePaymentPurposeBase.TlDeserialize(des);
            var optionLocal =  PremiumGiftCodeOptionBase.TlDeserialize(des);
            return new() {
            Purpose = purposeLocal,
            Option = optionLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PaymentsExportedInvoiceNs {
    public class PaymentsExportedInvoice : PaymentsExportedInvoiceBase, ITlSerializable, ITlDeserializable<PaymentsExportedInvoice> {
        public static readonly byte[] Identifier = [217,203,208,174,];
        public required string Url {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Url.TlSerialize());
            return bytes.ToArray();
        }

        public new static PaymentsExportedInvoice TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlLocal =  des.As<string>().Read();
            return new() {
            Url = urlLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesTranscribedAudioNs {
    public class MessagesTranscribedAudio : MessagesTranscribedAudioBase, ITlSerializable, ITlDeserializable<MessagesTranscribedAudio> {
        public static readonly byte[] Identifier = [87,217,185,207,];
        private int Flags;
        public bool Pending {get;set;}
        public required long TranscriptionId {get;set;}
        public required string Text {get;set;}
        public int? TrialRemainsNum {get;set;}
        public int? TrialRemainsUntilDate {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (TrialRemainsNum is not null ? 2 : 0) | (TrialRemainsUntilDate is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(TranscriptionId.TlSerialize());
            bytes.AddRange(Text.TlSerialize());
            if(TrialRemainsNum is not null) bytes.AddRange(TrialRemainsNum.TlSerialize());
            if(TrialRemainsUntilDate is not null) bytes.AddRange(TrialRemainsUntilDate.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesTranscribedAudio TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var pendingLocal = (flagsLocal & 1) is 0 ? default : true ;
            var transcriptionIdLocal =  des.As<long>().Read();
            var textLocal =  des.As<string>().Read();
            var trialRemainsNumLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            var trialRemainsUntilDateLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Pending = pendingLocal,
            TranscriptionId = transcriptionIdLocal,
            Text = textLocal,
            TrialRemainsNum = trialRemainsNumLocal,
            TrialRemainsUntilDate = trialRemainsUntilDateLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.HelpPremiumPromoNs {
    public class HelpPremiumPromo : HelpPremiumPromoBase, ITlSerializable, ITlDeserializable<HelpPremiumPromo> {
        public static readonly byte[] Identifier = [156,117,52,83,];
        public required string StatusText {get;set;}
        public required List<MessageEntityBase> StatusEntities {get;set;}
        public required List<string> VideoSections {get;set;}
        public required List<DocumentBase> Videos {get;set;}
        public required List<PremiumSubscriptionOptionBase> PeriodOptions {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(StatusText.TlSerialize());
            bytes.AddRange(StatusEntities.TlSerialize());
            bytes.AddRange(VideoSections.TlSerialize());
            bytes.AddRange(Videos.TlSerialize());
            bytes.AddRange(PeriodOptions.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static HelpPremiumPromo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var statusTextLocal =  des.As<string>().Read();
            var statusEntitiesLocal =  des.Read<MessageEntityBase>();
            var videoSectionsLocal =  des.ReadStrings();
            var videosLocal =  des.Read<DocumentBase>();
            var periodOptionsLocal =  des.Read<PremiumSubscriptionOptionBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            StatusText = statusTextLocal,
            StatusEntities = statusEntitiesLocal,
            VideoSections = videoSectionsLocal,
            Videos = videosLocal,
            PeriodOptions = periodOptionsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputStorePaymentPurposeNs {
    public class InputStorePaymentPremiumSubscription : InputStorePaymentPurposeBase, ITlSerializable, ITlDeserializable<InputStorePaymentPremiumSubscription> {
        public static readonly byte[] Identifier = [102,30,117,166,];
        private int Flags;
        public bool Restore {get;set;}
        public bool Upgrade {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputStorePaymentPremiumSubscription TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var restoreLocal = (flagsLocal & 1) is 0 ? default : true ;
            var upgradeLocal = (flagsLocal & 2) is 0 ? default : true ;
            return new() {
            Flags = flagsLocal,
            Restore = restoreLocal,
            Upgrade = upgradeLocal,
            };
        }
    }
    public class InputStorePaymentGiftPremium : InputStorePaymentPurposeBase, ITlSerializable, ITlDeserializable<InputStorePaymentGiftPremium> {
        public static readonly byte[] Identifier = [232,127,111,97,];
        public required InputUserBase UserId {get;set;}
        public required string Currency {get;set;}
        public required long Amount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Currency.TlSerialize());
            bytes.AddRange(Amount.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputStorePaymentGiftPremium TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  InputUserBase.TlDeserialize(des);
            var currencyLocal =  des.As<string>().Read();
            var amountLocal =  des.As<long>().Read();
            return new() {
            UserId = userIdLocal,
            Currency = currencyLocal,
            Amount = amountLocal,
            };
        }
    }
    public class InputStorePaymentPremiumGiftCode : InputStorePaymentPurposeBase, ITlSerializable, ITlDeserializable<InputStorePaymentPremiumGiftCode> {
        public static readonly byte[] Identifier = [63,95,128,163,];
        private int Flags;
        public required List<InputUserBase> Users {get;set;}
        public InputPeerBase? BoostPeer {get;set;}
        public required string Currency {get;set;}
        public required long Amount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (BoostPeer is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            if(BoostPeer is not null) bytes.AddRange(BoostPeer.TlSerialize());
            bytes.AddRange(Currency.TlSerialize());
            bytes.AddRange(Amount.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputStorePaymentPremiumGiftCode TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var usersLocal =  des.Read<InputUserBase>();
            var boostPeerLocal = (flagsLocal & 1) is 0 ? default : InputPeerBase.TlDeserialize(des) ;
            var currencyLocal =  des.As<string>().Read();
            var amountLocal =  des.As<long>().Read();
            return new() {
            Flags = flagsLocal,
            Users = usersLocal,
            BoostPeer = boostPeerLocal,
            Currency = currencyLocal,
            Amount = amountLocal,
            };
        }
    }
    public class InputStorePaymentPremiumGiveaway : InputStorePaymentPurposeBase, ITlSerializable, ITlDeserializable<InputStorePaymentPremiumGiveaway> {
        public static readonly byte[] Identifier = [202,68,5,22,];
        private int Flags;
        public bool OnlyNewSubscribers {get;set;}
        public bool WinnersAreVisible {get;set;}
        public required InputPeerBase BoostPeer {get;set;}
        public List<InputPeerBase>? AdditionalPeers {get;set;}
        public List<string>? CountriesIso2 {get;set;}
        public string? PrizeDescription {get;set;}
        public required long RandomId {get;set;}
        public required int UntilDate {get;set;}
        public required string Currency {get;set;}
        public required long Amount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (AdditionalPeers is not null ? 2 : 0) | (CountriesIso2 is not null ? 4 : 0) | (PrizeDescription is not null ? 16 : 0) ).TlSerialize());
            bytes.AddRange(BoostPeer.TlSerialize());
            if(AdditionalPeers is not null) bytes.AddRange(AdditionalPeers.TlSerialize());
            if(CountriesIso2 is not null) bytes.AddRange(CountriesIso2.TlSerialize());
            if(PrizeDescription is not null) bytes.AddRange(PrizeDescription.TlSerialize());
            bytes.AddRange(RandomId.TlSerialize());
            bytes.AddRange(UntilDate.TlSerialize());
            bytes.AddRange(Currency.TlSerialize());
            bytes.AddRange(Amount.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputStorePaymentPremiumGiveaway TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var onlyNewSubscribersLocal = (flagsLocal & 1) is 0 ? default : true ;
            var winnersAreVisibleLocal = (flagsLocal & 8) is 0 ? default : true ;
            var boostPeerLocal =  InputPeerBase.TlDeserialize(des);
            var additionalPeersLocal = (flagsLocal & 2) is 0 ? default : des.Read<InputPeerBase>() ;
            var countriesIso2Local = (flagsLocal & 4) is 0 ? default : des.ReadStrings() ;
            var prizeDescriptionLocal = (flagsLocal & 16) is 0 ? default : des.As<string>().Read() ;
            var randomIdLocal =  des.As<long>().Read();
            var untilDateLocal =  des.As<int>().Read();
            var currencyLocal =  des.As<string>().Read();
            var amountLocal =  des.As<long>().Read();
            return new() {
            Flags = flagsLocal,
            OnlyNewSubscribers = onlyNewSubscribersLocal,
            WinnersAreVisible = winnersAreVisibleLocal,
            BoostPeer = boostPeerLocal,
            AdditionalPeers = additionalPeersLocal,
            CountriesIso2 = countriesIso2Local,
            PrizeDescription = prizeDescriptionLocal,
            RandomId = randomIdLocal,
            UntilDate = untilDateLocal,
            Currency = currencyLocal,
            Amount = amountLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PremiumGiftOptionNs {
    public class PremiumGiftOption : PremiumGiftOptionBase, ITlSerializable, ITlDeserializable<PremiumGiftOption> {
        public static readonly byte[] Identifier = [25,67,195,116,];
        private int Flags;
        public required int Months {get;set;}
        public required string Currency {get;set;}
        public required long Amount {get;set;}
        public required string BotUrl {get;set;}
        public string? StoreProduct {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (StoreProduct is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Months.TlSerialize());
            bytes.AddRange(Currency.TlSerialize());
            bytes.AddRange(Amount.TlSerialize());
            bytes.AddRange(BotUrl.TlSerialize());
            if(StoreProduct is not null) bytes.AddRange(StoreProduct.TlSerialize());
            return bytes.ToArray();
        }

        public new static PremiumGiftOption TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var monthsLocal =  des.As<int>().Read();
            var currencyLocal =  des.As<string>().Read();
            var amountLocal =  des.As<long>().Read();
            var botUrlLocal =  des.As<string>().Read();
            var storeProductLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            Months = monthsLocal,
            Currency = currencyLocal,
            Amount = amountLocal,
            BotUrl = botUrlLocal,
            StoreProduct = storeProductLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PaymentFormMethodNs {
    public class PaymentFormMethod : PaymentFormMethodBase, ITlSerializable, ITlDeserializable<PaymentFormMethod> {
        public static readonly byte[] Identifier = [27,242,248,136,];
        public required string Url {get;set;}
        public required string Title {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            return bytes.ToArray();
        }

        public new static PaymentFormMethod TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlLocal =  des.As<string>().Read();
            var titleLocal =  des.As<string>().Read();
            return new() {
            Url = urlLocal,
            Title = titleLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.EmojiStatusNs {
    public class EmojiStatusEmpty : EmojiStatusBase, ITlSerializable, ITlDeserializable<EmojiStatusEmpty> {
        public static readonly byte[] Identifier = [174,26,225,45,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static EmojiStatusEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class EmojiStatus : EmojiStatusBase, ITlSerializable, ITlDeserializable<EmojiStatus> {
        public static readonly byte[] Identifier = [157,97,155,146,];
        public required long DocumentId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(DocumentId.TlSerialize());
            return bytes.ToArray();
        }

        public new static EmojiStatus TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var documentIdLocal =  des.As<long>().Read();
            return new() {
            DocumentId = documentIdLocal,
            };
        }
    }
    public class EmojiStatusUntil : EmojiStatusBase, ITlSerializable, ITlDeserializable<EmojiStatusUntil> {
        public static readonly byte[] Identifier = [199,168,48,250,];
        public required long DocumentId {get;set;}
        public required int Until {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(DocumentId.TlSerialize());
            bytes.AddRange(Until.TlSerialize());
            return bytes.ToArray();
        }

        public new static EmojiStatusUntil TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var documentIdLocal =  des.As<long>().Read();
            var untilLocal =  des.As<int>().Read();
            return new() {
            DocumentId = documentIdLocal,
            Until = untilLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AccountEmojiStatusesNs {
    public class AccountEmojiStatusesNotModified : AccountEmojiStatusesBase, ITlSerializable, ITlDeserializable<AccountEmojiStatusesNotModified> {
        public static readonly byte[] Identifier = [69,230,140,208,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static AccountEmojiStatusesNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class AccountEmojiStatuses : AccountEmojiStatusesBase, ITlSerializable, ITlDeserializable<AccountEmojiStatuses> {
        public static readonly byte[] Identifier = [209,103,196,144,];
        public required long Hash {get;set;}
        public required List<EmojiStatusBase> Statuses {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(Statuses.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountEmojiStatuses TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var hashLocal =  des.As<long>().Read();
            var statusesLocal =  des.Read<EmojiStatusBase>();
            return new() {
            Hash = hashLocal,
            Statuses = statusesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ReactionNs {
    public class ReactionEmpty : ReactionBase, ITlSerializable, ITlDeserializable<ReactionEmpty> {
        public static readonly byte[] Identifier = [25,212,245,121,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static ReactionEmpty TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class ReactionEmoji : ReactionBase, ITlSerializable, ITlDeserializable<ReactionEmoji> {
        public static readonly byte[] Identifier = [184,134,34,27,];
        public required string Emoticon {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Emoticon.TlSerialize());
            return bytes.ToArray();
        }

        public new static ReactionEmoji TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var emoticonLocal =  des.As<string>().Read();
            return new() {
            Emoticon = emoticonLocal,
            };
        }
    }
    public class ReactionCustomEmoji : ReactionBase, ITlSerializable, ITlDeserializable<ReactionCustomEmoji> {
        public static readonly byte[] Identifier = [115,252,53,137,];
        public required long DocumentId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(DocumentId.TlSerialize());
            return bytes.ToArray();
        }

        public new static ReactionCustomEmoji TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var documentIdLocal =  des.As<long>().Read();
            return new() {
            DocumentId = documentIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChatReactionsNs {
    public class ChatReactionsNone : ChatReactionsBase, ITlSerializable, ITlDeserializable<ChatReactionsNone> {
        public static readonly byte[] Identifier = [188,50,252,234,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static ChatReactionsNone TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class ChatReactionsAll : ChatReactionsBase, ITlSerializable, ITlDeserializable<ChatReactionsAll> {
        public static readonly byte[] Identifier = [202,139,146,82,];
        private int Flags;
        public bool AllowCustom {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatReactionsAll TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var allowCustomLocal = (flagsLocal & 1) is 0 ? default : true ;
            return new() {
            Flags = flagsLocal,
            AllowCustom = allowCustomLocal,
            };
        }
    }
    public class ChatReactionsSome : ChatReactionsBase, ITlSerializable, ITlDeserializable<ChatReactionsSome> {
        public static readonly byte[] Identifier = [55,64,29,102,];
        public required List<ReactionBase> Reactions {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Reactions.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatReactionsSome TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var reactionsLocal =  des.Read<ReactionBase>();
            return new() {
            Reactions = reactionsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesReactionsNs {
    public class MessagesReactionsNotModified : MessagesReactionsBase, ITlSerializable, ITlDeserializable<MessagesReactionsNotModified> {
        public static readonly byte[] Identifier = [223,219,111,176,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static MessagesReactionsNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class MessagesReactions : MessagesReactionsBase, ITlSerializable, ITlDeserializable<MessagesReactions> {
        public static readonly byte[] Identifier = [22,247,253,234,];
        public required long Hash {get;set;}
        public required List<ReactionBase> Reactions {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(Reactions.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesReactions TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var hashLocal =  des.As<long>().Read();
            var reactionsLocal =  des.Read<ReactionBase>();
            return new() {
            Hash = hashLocal,
            Reactions = reactionsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.EmailVerifyPurposeNs {
    public class EmailVerifyPurposeLoginSetup : EmailVerifyPurposeBase, ITlSerializable, ITlDeserializable<EmailVerifyPurposeLoginSetup> {
        public static readonly byte[] Identifier = [115,190,69,67,];
        public required string PhoneNumber {get;set;}
        public required string PhoneCodeHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PhoneNumber.TlSerialize());
            bytes.AddRange(PhoneCodeHash.TlSerialize());
            return bytes.ToArray();
        }

        public new static EmailVerifyPurposeLoginSetup TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var phoneNumberLocal =  des.As<string>().Read();
            var phoneCodeHashLocal =  des.As<string>().Read();
            return new() {
            PhoneNumber = phoneNumberLocal,
            PhoneCodeHash = phoneCodeHashLocal,
            };
        }
    }
    public class EmailVerifyPurposeLoginChange : EmailVerifyPurposeBase, ITlSerializable, ITlDeserializable<EmailVerifyPurposeLoginChange> {
        public static readonly byte[] Identifier = [235,34,125,82,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static EmailVerifyPurposeLoginChange TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class EmailVerifyPurposePassport : EmailVerifyPurposeBase, ITlSerializable, ITlDeserializable<EmailVerifyPurposePassport> {
        public static readonly byte[] Identifier = [133,22,245,187,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static EmailVerifyPurposePassport TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.EmailVerificationNs {
    public class EmailVerificationCode : EmailVerificationBase, ITlSerializable, ITlDeserializable<EmailVerificationCode> {
        public static readonly byte[] Identifier = [169,85,46,146,];
        public required string Code {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Code.TlSerialize());
            return bytes.ToArray();
        }

        public new static EmailVerificationCode TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var codeLocal =  des.As<string>().Read();
            return new() {
            Code = codeLocal,
            };
        }
    }
    public class EmailVerificationGoogle : EmailVerificationBase, ITlSerializable, ITlDeserializable<EmailVerificationGoogle> {
        public static readonly byte[] Identifier = [194,158,144,219,];
        public required string Token {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Token.TlSerialize());
            return bytes.ToArray();
        }

        public new static EmailVerificationGoogle TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var tokenLocal =  des.As<string>().Read();
            return new() {
            Token = tokenLocal,
            };
        }
    }
    public class EmailVerificationApple : EmailVerificationBase, ITlSerializable, ITlDeserializable<EmailVerificationApple> {
        public static readonly byte[] Identifier = [253,116,208,150,];
        public required string Token {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Token.TlSerialize());
            return bytes.ToArray();
        }

        public new static EmailVerificationApple TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var tokenLocal =  des.As<string>().Read();
            return new() {
            Token = tokenLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AccountEmailVerifiedNs {
    public class AccountEmailVerified : AccountEmailVerifiedBase, ITlSerializable, ITlDeserializable<AccountEmailVerified> {
        public static readonly byte[] Identifier = [27,205,150,43,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Email.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountEmailVerified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var emailLocal =  des.As<string>().Read();
            return new() {
            Email = emailLocal,
            };
        }
    }
    public class AccountEmailVerifiedLogin : AccountEmailVerifiedBase, ITlSerializable, ITlDeserializable<AccountEmailVerifiedLogin> {
        public static readonly byte[] Identifier = [97,13,187,225,];
        public required AuthSentCodeBase SentCode {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Email.TlSerialize());
            bytes.AddRange(SentCode.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountEmailVerifiedLogin TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var emailLocal =  des.As<string>().Read();
            var sentCodeLocal =  AuthSentCodeBase.TlDeserialize(des);
            return new() {
            Email = emailLocal,
            SentCode = sentCodeLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PremiumSubscriptionOptionNs {
    public class PremiumSubscriptionOption : PremiumSubscriptionOptionBase, ITlSerializable, ITlDeserializable<PremiumSubscriptionOption> {
        public static readonly byte[] Identifier = [242,29,45,95,];
        private int Flags;
        public bool Current {get;set;}
        public bool CanPurchaseUpgrade {get;set;}
        public string? Transaction {get;set;}
        public required int Months {get;set;}
        public required string Currency {get;set;}
        public required long Amount {get;set;}
        public required string BotUrl {get;set;}
        public string? StoreProduct {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Transaction is not null ? 8 : 0) | (StoreProduct is not null ? 1 : 0) ).TlSerialize());
            if(Transaction is not null) bytes.AddRange(Transaction.TlSerialize());
            bytes.AddRange(Months.TlSerialize());
            bytes.AddRange(Currency.TlSerialize());
            bytes.AddRange(Amount.TlSerialize());
            bytes.AddRange(BotUrl.TlSerialize());
            if(StoreProduct is not null) bytes.AddRange(StoreProduct.TlSerialize());
            return bytes.ToArray();
        }

        public new static PremiumSubscriptionOption TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var currentLocal = (flagsLocal & 2) is 0 ? default : true ;
            var canPurchaseUpgradeLocal = (flagsLocal & 4) is 0 ? default : true ;
            var transactionLocal = (flagsLocal & 8) is 0 ? default : des.As<string>().Read() ;
            var monthsLocal =  des.As<int>().Read();
            var currencyLocal =  des.As<string>().Read();
            var amountLocal =  des.As<long>().Read();
            var botUrlLocal =  des.As<string>().Read();
            var storeProductLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            Current = currentLocal,
            CanPurchaseUpgrade = canPurchaseUpgradeLocal,
            Transaction = transactionLocal,
            Months = monthsLocal,
            Currency = currencyLocal,
            Amount = amountLocal,
            BotUrl = botUrlLocal,
            StoreProduct = storeProductLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.SendAsPeerNs {
    public class SendAsPeer : SendAsPeerBase, ITlSerializable, ITlDeserializable<SendAsPeer> {
        public static readonly byte[] Identifier = [52,112,28,184,];
        private int Flags;
        public bool PremiumRequired {get;set;}
        public required PeerBase Peer {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            return bytes.ToArray();
        }

        public new static SendAsPeer TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var premiumRequiredLocal = (flagsLocal & 1) is 0 ? default : true ;
            var peerLocal =  PeerBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            PremiumRequired = premiumRequiredLocal,
            Peer = peerLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessageExtendedMediaNs {
    public class MessageExtendedMediaPreview : MessageExtendedMediaBase, ITlSerializable, ITlDeserializable<MessageExtendedMediaPreview> {
        public static readonly byte[] Identifier = [200,140,98,173,];
        private int Flags;
        public int? W {get;set;}
        public int? H {get;set;}
        public PhotoSizeBase? Thumb {get;set;}
        public int? VideoDuration {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (W is not null ? 1 : 0) | (H is not null ? 1 : 0) | (Thumb is not null ? 2 : 0) | (VideoDuration is not null ? 4 : 0) ).TlSerialize());
            if(W is not null) bytes.AddRange(W.TlSerialize());
            if(H is not null) bytes.AddRange(H.TlSerialize());
            if(Thumb is not null) bytes.AddRange(Thumb.TlSerialize());
            if(VideoDuration is not null) bytes.AddRange(VideoDuration.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageExtendedMediaPreview TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var wLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var hLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var thumbLocal = (flagsLocal & 2) is 0 ? default : PhotoSizeBase.TlDeserialize(des) ;
            var videoDurationLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            W = wLocal,
            H = hLocal,
            Thumb = thumbLocal,
            VideoDuration = videoDurationLocal,
            };
        }
    }
    public class MessageExtendedMedia : MessageExtendedMediaBase, ITlSerializable, ITlDeserializable<MessageExtendedMedia> {
        public static readonly byte[] Identifier = [100,156,71,238,];
        public required MessageMediaBase Media {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Media.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessageExtendedMedia TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var mediaLocal =  MessageMediaBase.TlDeserialize(des);
            return new() {
            Media = mediaLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StickerKeywordNs {
    public class StickerKeyword : StickerKeywordBase, ITlSerializable, ITlDeserializable<StickerKeyword> {
        public static readonly byte[] Identifier = [156,178,254,252,];
        public required long DocumentId {get;set;}
        public required List<string> Keyword {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(DocumentId.TlSerialize());
            bytes.AddRange(Keyword.TlSerialize());
            return bytes.ToArray();
        }

        public new static StickerKeyword TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var documentIdLocal =  des.As<long>().Read();
            var keywordLocal =  des.ReadStrings();
            return new() {
            DocumentId = documentIdLocal,
            Keyword = keywordLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.UsernameNs {
    public class Username : UsernameBase, ITlSerializable, ITlDeserializable<Username> {
        public static readonly byte[] Identifier = [71,54,7,180,];
        private int Flags;
        public bool Editable {get;set;}
        public bool Active {get;set;}
        public required string UsernameInner {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(UsernameInner.TlSerialize());
            return bytes.ToArray();
        }

        public new static Username TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var editableLocal = (flagsLocal & 1) is 0 ? default : true ;
            var activeLocal = (flagsLocal & 2) is 0 ? default : true ;
            var usernameInnerLocal =  des.As<string>().Read();
            return new() {
            Flags = flagsLocal,
            Editable = editableLocal,
            Active = activeLocal,
            UsernameInner = usernameInnerLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ForumTopicNs {
    public class ForumTopicDeleted : ForumTopicBase, ITlSerializable, ITlDeserializable<ForumTopicDeleted> {
        public static readonly byte[] Identifier = [155,16,63,2,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            return bytes.ToArray();
        }

        public new static ForumTopicDeleted TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<int>().Read();
            return new() {
            Id = idLocal,
            };
        }
    }
    public class ForumTopic : ForumTopicBase, ITlSerializable, ITlDeserializable<ForumTopic> {
        public static readonly byte[] Identifier = [169,29,112,113,];
        private int Flags;
        public bool My {get;set;}
        public bool Closed {get;set;}
        public bool Pinned {get;set;}
        public bool Short {get;set;}
        public bool Hidden {get;set;}
        public required int Date {get;set;}
        public required string Title {get;set;}
        public required int IconColor {get;set;}
        public long? IconEmojiId {get;set;}
        public required int TopMessage {get;set;}
        public required int ReadInboxMaxId {get;set;}
        public required int ReadOutboxMaxId {get;set;}
        public required int UnreadCount {get;set;}
        public required int UnreadMentionsCount {get;set;}
        public required int UnreadReactionsCount {get;set;}
        public required PeerBase FromId {get;set;}
        public required PeerNotifySettingsBase NotifySettings {get;set;}
        public DraftMessageBase? Draft {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (IconEmojiId is not null ? 1 : 0) | (Draft is not null ? 16 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(IconColor.TlSerialize());
            if(IconEmojiId is not null) bytes.AddRange(IconEmojiId.TlSerialize());
            bytes.AddRange(TopMessage.TlSerialize());
            bytes.AddRange(ReadInboxMaxId.TlSerialize());
            bytes.AddRange(ReadOutboxMaxId.TlSerialize());
            bytes.AddRange(UnreadCount.TlSerialize());
            bytes.AddRange(UnreadMentionsCount.TlSerialize());
            bytes.AddRange(UnreadReactionsCount.TlSerialize());
            bytes.AddRange(FromId.TlSerialize());
            bytes.AddRange(NotifySettings.TlSerialize());
            if(Draft is not null) bytes.AddRange(Draft.TlSerialize());
            return bytes.ToArray();
        }

        public new static ForumTopic TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var myLocal = (flagsLocal & 2) is 0 ? default : true ;
            var closedLocal = (flagsLocal & 4) is 0 ? default : true ;
            var pinnedLocal = (flagsLocal & 8) is 0 ? default : true ;
            var shortLocal = (flagsLocal & 32) is 0 ? default : true ;
            var hiddenLocal = (flagsLocal & 64) is 0 ? default : true ;
            var idLocal =  des.As<int>().Read();
            var dateLocal =  des.As<int>().Read();
            var titleLocal =  des.As<string>().Read();
            var iconColorLocal =  des.As<int>().Read();
            var iconEmojiIdLocal = (flagsLocal & 1) is 0 ? default : des.As<long>().Read() ;
            var topMessageLocal =  des.As<int>().Read();
            var readInboxMaxIdLocal =  des.As<int>().Read();
            var readOutboxMaxIdLocal =  des.As<int>().Read();
            var unreadCountLocal =  des.As<int>().Read();
            var unreadMentionsCountLocal =  des.As<int>().Read();
            var unreadReactionsCountLocal =  des.As<int>().Read();
            var fromIdLocal =  PeerBase.TlDeserialize(des);
            var notifySettingsLocal =  PeerNotifySettingsBase.TlDeserialize(des);
            var draftLocal = (flagsLocal & 16) is 0 ? default : DraftMessageBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            My = myLocal,
            Closed = closedLocal,
            Pinned = pinnedLocal,
            Short = shortLocal,
            Hidden = hiddenLocal,
            Id = idLocal,
            Date = dateLocal,
            Title = titleLocal,
            IconColor = iconColorLocal,
            IconEmojiId = iconEmojiIdLocal,
            TopMessage = topMessageLocal,
            ReadInboxMaxId = readInboxMaxIdLocal,
            ReadOutboxMaxId = readOutboxMaxIdLocal,
            UnreadCount = unreadCountLocal,
            UnreadMentionsCount = unreadMentionsCountLocal,
            UnreadReactionsCount = unreadReactionsCountLocal,
            FromId = fromIdLocal,
            NotifySettings = notifySettingsLocal,
            Draft = draftLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesForumTopicsNs {
    public class MessagesForumTopics : MessagesForumTopicsBase, ITlSerializable, ITlDeserializable<MessagesForumTopics> {
        public static readonly byte[] Identifier = [211,23,118,54,];
        private int Flags;
        public bool OrderByCreateDate {get;set;}
        public required int Count {get;set;}
        public required List<ForumTopicBase> Topics {get;set;}
        public required List<MessageBase> Messages {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public required int Pts {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(Topics.TlSerialize());
            bytes.AddRange(Messages.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            bytes.AddRange(Pts.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesForumTopics TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var orderByCreateDateLocal = (flagsLocal & 1) is 0 ? default : true ;
            var countLocal =  des.As<int>().Read();
            var topicsLocal =  des.Read<ForumTopicBase>();
            var messagesLocal =  des.Read<MessageBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            var ptsLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            OrderByCreateDate = orderByCreateDateLocal,
            Count = countLocal,
            Topics = topicsLocal,
            Messages = messagesLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            Pts = ptsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.DefaultHistoryTTLNs {
    public class DefaultHistoryTTL : DefaultHistoryTTLBase, ITlSerializable, ITlDeserializable<DefaultHistoryTTL> {
        public static readonly byte[] Identifier = [32,107,180,67,];
        public required int Period {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Period.TlSerialize());
            return bytes.ToArray();
        }

        public new static DefaultHistoryTTL TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var periodLocal =  des.As<int>().Read();
            return new() {
            Period = periodLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ExportedContactTokenNs {
    public class ExportedContactToken : ExportedContactTokenBase, ITlSerializable, ITlDeserializable<ExportedContactToken> {
        public static readonly byte[] Identifier = [155,16,191,65,];
        public required string Url {get;set;}
        public required int Expires {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(Expires.TlSerialize());
            return bytes.ToArray();
        }

        public new static ExportedContactToken TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlLocal =  des.As<string>().Read();
            var expiresLocal =  des.As<int>().Read();
            return new() {
            Url = urlLocal,
            Expires = expiresLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.RequestPeerTypeNs {
    public class RequestPeerTypeUser : RequestPeerTypeBase, ITlSerializable, ITlDeserializable<RequestPeerTypeUser> {
        public static readonly byte[] Identifier = [0,138,59,95,];
        public bool Bot {get;set;}
        public bool Premium {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            return bytes.ToArray();
        }

        public new static RequestPeerTypeUser TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var botLocal = (flagsLocal & 1) is 0 ? default : true ;
            var premiumLocal = (flagsLocal & 2) is 0 ? default : true ;
            return new() {
            Flags = flagsLocal,
            Bot = botLocal,
            Premium = premiumLocal,
            };
        }
    }
    public class RequestPeerTypeChat : RequestPeerTypeBase, ITlSerializable, ITlDeserializable<RequestPeerTypeChat> {
        public static readonly byte[] Identifier = [27,110,240,201,];
        public bool Creator {get;set;}
        public bool BotParticipant {get;set;}
        public bool HasUsername {get;set;}
        public bool Forum {get;set;}
        public ChatAdminRightsBase? UserAdminRights {get;set;}
        public ChatAdminRightsBase? BotAdminRights {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (UserAdminRights is not null ? 2 : 0) | (BotAdminRights is not null ? 4 : 0) ).TlSerialize());
            if(UserAdminRights is not null) bytes.AddRange(UserAdminRights.TlSerialize());
            if(BotAdminRights is not null) bytes.AddRange(BotAdminRights.TlSerialize());
            return bytes.ToArray();
        }

        public new static RequestPeerTypeChat TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var creatorLocal = (flagsLocal & 1) is 0 ? default : true ;
            var botParticipantLocal = (flagsLocal & 32) is 0 ? default : true ;
            var hasUsernameLocal = (flagsLocal & 8) is 0 ? default : true ;
            var forumLocal = (flagsLocal & 16) is 0 ? default : true ;
            var userAdminRightsLocal = (flagsLocal & 2) is 0 ? default : ChatAdminRightsBase.TlDeserialize(des) ;
            var botAdminRightsLocal = (flagsLocal & 4) is 0 ? default : ChatAdminRightsBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Creator = creatorLocal,
            BotParticipant = botParticipantLocal,
            HasUsername = hasUsernameLocal,
            Forum = forumLocal,
            UserAdminRights = userAdminRightsLocal,
            BotAdminRights = botAdminRightsLocal,
            };
        }
    }
    public class RequestPeerTypeBroadcast : RequestPeerTypeBase, ITlSerializable, ITlDeserializable<RequestPeerTypeBroadcast> {
        public static readonly byte[] Identifier = [108,239,155,51,];
        public bool Creator {get;set;}
        public bool HasUsername {get;set;}
        public ChatAdminRightsBase? UserAdminRights {get;set;}
        public ChatAdminRightsBase? BotAdminRights {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (UserAdminRights is not null ? 2 : 0) | (BotAdminRights is not null ? 4 : 0) ).TlSerialize());
            if(UserAdminRights is not null) bytes.AddRange(UserAdminRights.TlSerialize());
            if(BotAdminRights is not null) bytes.AddRange(BotAdminRights.TlSerialize());
            return bytes.ToArray();
        }

        public new static RequestPeerTypeBroadcast TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var creatorLocal = (flagsLocal & 1) is 0 ? default : true ;
            var hasUsernameLocal = (flagsLocal & 8) is 0 ? default : true ;
            var userAdminRightsLocal = (flagsLocal & 2) is 0 ? default : ChatAdminRightsBase.TlDeserialize(des) ;
            var botAdminRightsLocal = (flagsLocal & 4) is 0 ? default : ChatAdminRightsBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Creator = creatorLocal,
            HasUsername = hasUsernameLocal,
            UserAdminRights = userAdminRightsLocal,
            BotAdminRights = botAdminRightsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.EmojiListNs {
    public class EmojiListNotModified : EmojiListBase, ITlSerializable, ITlDeserializable<EmojiListNotModified> {
        public static readonly byte[] Identifier = [250,173,30,72,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static EmojiListNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class EmojiList : EmojiListBase, ITlSerializable, ITlDeserializable<EmojiList> {
        public static readonly byte[] Identifier = [209,17,30,122,];
        public required long Hash {get;set;}
        public required List<long> DocumentId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(DocumentId.TlSerialize());
            return bytes.ToArray();
        }

        public new static EmojiList TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var hashLocal =  des.As<long>().Read();
            var documentIdLocal =  des.ReadNumbers<long>();
            return new() {
            Hash = hashLocal,
            DocumentId = documentIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.EmojiGroupNs {
    public class EmojiGroup : EmojiGroupBase, ITlSerializable, ITlDeserializable<EmojiGroup> {
        public static readonly byte[] Identifier = [169,189,154,122,];
        public required string Title {get;set;}
        public required long IconEmojiId {get;set;}
        public required List<string> Emoticons {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(IconEmojiId.TlSerialize());
            bytes.AddRange(Emoticons.TlSerialize());
            return bytes.ToArray();
        }

        public new static EmojiGroup TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var titleLocal =  des.As<string>().Read();
            var iconEmojiIdLocal =  des.As<long>().Read();
            var emoticonsLocal =  des.ReadStrings();
            return new() {
            Title = titleLocal,
            IconEmojiId = iconEmojiIdLocal,
            Emoticons = emoticonsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesEmojiGroupsNs {
    public class MessagesEmojiGroupsNotModified : MessagesEmojiGroupsBase, ITlSerializable, ITlDeserializable<MessagesEmojiGroupsNotModified> {
        public static readonly byte[] Identifier = [135,173,180,111,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static MessagesEmojiGroupsNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class MessagesEmojiGroups : MessagesEmojiGroupsBase, ITlSerializable, ITlDeserializable<MessagesEmojiGroups> {
        public static readonly byte[] Identifier = [75,185,31,136,];
        public required int Hash {get;set;}
        public required List<EmojiGroupBase> Groups {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(Groups.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesEmojiGroups TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var hashLocal =  des.As<int>().Read();
            var groupsLocal =  des.Read<EmojiGroupBase>();
            return new() {
            Hash = hashLocal,
            Groups = groupsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.TextWithEntitiesNs {
    public class TextWithEntities : TextWithEntitiesBase, ITlSerializable, ITlDeserializable<TextWithEntities> {
        public static readonly byte[] Identifier = [70,49,31,117,];
        public required string Text {get;set;}
        public required List<MessageEntityBase> Entities {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(Entities.TlSerialize());
            return bytes.ToArray();
        }

        public new static TextWithEntities TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  des.As<string>().Read();
            var entitiesLocal =  des.Read<MessageEntityBase>();
            return new() {
            Text = textLocal,
            Entities = entitiesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesTranslatedTextNs {
    public class MessagesTranslateResult : MessagesTranslatedTextBase, ITlSerializable, ITlDeserializable<MessagesTranslateResult> {
        public static readonly byte[] Identifier = [248,50,219,51,];
        public required List<TextWithEntitiesBase> Result {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Result.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesTranslateResult TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var resultLocal =  des.Read<TextWithEntitiesBase>();
            return new() {
            Result = resultLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AutoSaveSettingsNs {
    public class AutoSaveSettings : AutoSaveSettingsBase, ITlSerializable, ITlDeserializable<AutoSaveSettings> {
        public static readonly byte[] Identifier = [206,52,72,200,];
        private int Flags;
        public bool Photos {get;set;}
        public bool Videos {get;set;}
        public long? VideoMaxSize {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (VideoMaxSize is not null ? 4 : 0) ).TlSerialize());
            if(VideoMaxSize is not null) bytes.AddRange(VideoMaxSize.TlSerialize());
            return bytes.ToArray();
        }

        public new static AutoSaveSettings TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var photosLocal = (flagsLocal & 1) is 0 ? default : true ;
            var videosLocal = (flagsLocal & 2) is 0 ? default : true ;
            var videoMaxSizeLocal = (flagsLocal & 4) is 0 ? default : des.As<long>().Read() ;
            return new() {
            Flags = flagsLocal,
            Photos = photosLocal,
            Videos = videosLocal,
            VideoMaxSize = videoMaxSizeLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AutoSaveExceptionNs {
    public class AutoSaveException : AutoSaveExceptionBase, ITlSerializable, ITlDeserializable<AutoSaveException> {
        public static readonly byte[] Identifier = [71,45,96,129,];
        public required PeerBase Peer {get;set;}
        public required AutoSaveSettingsBase Settings {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(Settings.TlSerialize());
            return bytes.ToArray();
        }

        public new static AutoSaveException TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var settingsLocal =  AutoSaveSettingsBase.TlDeserialize(des);
            return new() {
            Peer = peerLocal,
            Settings = settingsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AccountAutoSaveSettingsNs {
    public class AccountAutoSaveSettings : AccountAutoSaveSettingsBase, ITlSerializable, ITlDeserializable<AccountAutoSaveSettings> {
        public static readonly byte[] Identifier = [157,6,62,76,];
        public required AutoSaveSettingsBase UsersSettings {get;set;}
        public required AutoSaveSettingsBase ChatsSettings {get;set;}
        public required AutoSaveSettingsBase BroadcastsSettings {get;set;}
        public required List<AutoSaveExceptionBase> Exceptions {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UsersSettings.TlSerialize());
            bytes.AddRange(ChatsSettings.TlSerialize());
            bytes.AddRange(BroadcastsSettings.TlSerialize());
            bytes.AddRange(Exceptions.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static AccountAutoSaveSettings TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var usersSettingsLocal =  AutoSaveSettingsBase.TlDeserialize(des);
            var chatsSettingsLocal =  AutoSaveSettingsBase.TlDeserialize(des);
            var broadcastsSettingsLocal =  AutoSaveSettingsBase.TlDeserialize(des);
            var exceptionsLocal =  des.Read<AutoSaveExceptionBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            UsersSettings = usersSettingsLocal,
            ChatsSettings = chatsSettingsLocal,
            BroadcastsSettings = broadcastsSettingsLocal,
            Exceptions = exceptionsLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.HelpAppConfigNs {
    public class HelpAppConfigNotModified : HelpAppConfigBase, ITlSerializable, ITlDeserializable<HelpAppConfigNotModified> {
        public static readonly byte[] Identifier = [29,100,222,124,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static HelpAppConfigNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class HelpAppConfig : HelpAppConfigBase, ITlSerializable, ITlDeserializable<HelpAppConfig> {
        public static readonly byte[] Identifier = [46,120,24,221,];
        public required int Hash {get;set;}
        public required JSONValueBase Config {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(Config.TlSerialize());
            return bytes.ToArray();
        }

        public new static HelpAppConfig TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var hashLocal =  des.As<int>().Read();
            var configLocal =  JSONValueBase.TlDeserialize(des);
            return new() {
            Hash = hashLocal,
            Config = configLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputBotAppNs {
    public class InputBotAppID : InputBotAppBase, ITlSerializable, ITlDeserializable<InputBotAppID> {
        public static readonly byte[] Identifier = [122,189,32,169,];
        public required long Id {get;set;}
        public required long AccessHash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputBotAppID TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            return new() {
            Id = idLocal,
            AccessHash = accessHashLocal,
            };
        }
    }
    public class InputBotAppShortName : InputBotAppBase, ITlSerializable, ITlDeserializable<InputBotAppShortName> {
        public static readonly byte[] Identifier = [7,4,140,144,];
        public required InputUserBase BotId {get;set;}
        public required string ShortName {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(BotId.TlSerialize());
            bytes.AddRange(ShortName.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputBotAppShortName TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var botIdLocal =  InputUserBase.TlDeserialize(des);
            var shortNameLocal =  des.As<string>().Read();
            return new() {
            BotId = botIdLocal,
            ShortName = shortNameLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.BotAppNs {
    public class BotAppNotModified : BotAppBase, ITlSerializable, ITlDeserializable<BotAppNotModified> {
        public static readonly byte[] Identifier = [183,116,166,93,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static BotAppNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class BotApp : BotAppBase, ITlSerializable, ITlDeserializable<BotApp> {
        public static readonly byte[] Identifier = [214,209,252,149,];
        private int Flags;
        public required long Id {get;set;}
        public required long AccessHash {get;set;}
        public required string ShortName {get;set;}
        public required string Title {get;set;}
        public required string Description {get;set;}
        public required PhotoBase Photo {get;set;}
        public DocumentBase? Document {get;set;}
        public required long Hash {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Document is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(AccessHash.TlSerialize());
            bytes.AddRange(ShortName.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(Description.TlSerialize());
            bytes.AddRange(Photo.TlSerialize());
            if(Document is not null) bytes.AddRange(Document.TlSerialize());
            bytes.AddRange(Hash.TlSerialize());
            return bytes.ToArray();
        }

        public new static BotApp TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var idLocal =  des.As<long>().Read();
            var accessHashLocal =  des.As<long>().Read();
            var shortNameLocal =  des.As<string>().Read();
            var titleLocal =  des.As<string>().Read();
            var descriptionLocal =  des.As<string>().Read();
            var photoLocal =  PhotoBase.TlDeserialize(des);
            var documentLocal = (flagsLocal & 1) is 0 ? default : DocumentBase.TlDeserialize(des) ;
            var hashLocal =  des.As<long>().Read();
            return new() {
            Flags = flagsLocal,
            Id = idLocal,
            AccessHash = accessHashLocal,
            ShortName = shortNameLocal,
            Title = titleLocal,
            Description = descriptionLocal,
            Photo = photoLocal,
            Document = documentLocal,
            Hash = hashLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesBotAppNs {
    public class MessagesBotApp : MessagesBotAppBase, ITlSerializable, ITlDeserializable<MessagesBotApp> {
        public static readonly byte[] Identifier = [245,173,80,235,];
        private int Flags;
        public bool Inactive {get;set;}
        public bool RequestWriteAccess {get;set;}
        public bool HasSettings {get;set;}
        public required BotAppBase App {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(App.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesBotApp TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var inactiveLocal = (flagsLocal & 1) is 0 ? default : true ;
            var requestWriteAccessLocal = (flagsLocal & 2) is 0 ? default : true ;
            var hasSettingsLocal = (flagsLocal & 4) is 0 ? default : true ;
            var appLocal =  BotAppBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Inactive = inactiveLocal,
            RequestWriteAccess = requestWriteAccessLocal,
            HasSettings = hasSettingsLocal,
            App = appLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.AppWebViewResultNs {
    public class AppWebViewResultUrl : AppWebViewResultBase, ITlSerializable, ITlDeserializable<AppWebViewResultUrl> {
        public static readonly byte[] Identifier = [13,79,27,60,];
        public required string Url {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Url.TlSerialize());
            return bytes.ToArray();
        }

        public new static AppWebViewResultUrl TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var urlLocal =  des.As<string>().Read();
            return new() {
            Url = urlLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InlineBotWebViewNs {
    public class InlineBotWebView : InlineBotWebViewBase, ITlSerializable, ITlDeserializable<InlineBotWebView> {
        public static readonly byte[] Identifier = [213,149,114,181,];
        public required string Text {get;set;}
        public required string Url {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Text.TlSerialize());
            bytes.AddRange(Url.TlSerialize());
            return bytes.ToArray();
        }

        public new static InlineBotWebView TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var textLocal =  des.As<string>().Read();
            var urlLocal =  des.As<string>().Read();
            return new() {
            Text = textLocal,
            Url = urlLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ReadParticipantDateNs {
    public class ReadParticipantDate : ReadParticipantDateBase, ITlSerializable, ITlDeserializable<ReadParticipantDate> {
        public static readonly byte[] Identifier = [114,241,79,74,];
        public required long UserId {get;set;}
        public required int Date {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            return bytes.ToArray();
        }

        public new static ReadParticipantDate TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  des.As<long>().Read();
            var dateLocal =  des.As<int>().Read();
            return new() {
            UserId = userIdLocal,
            Date = dateLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputChatlistNs {
    public class InputChatlistDialogFilter : InputChatlistBase, ITlSerializable, ITlDeserializable<InputChatlistDialogFilter> {
        public static readonly byte[] Identifier = [51,218,224,243,];
        public required int FilterId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(FilterId.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputChatlistDialogFilter TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var filterIdLocal =  des.As<int>().Read();
            return new() {
            FilterId = filterIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ExportedChatlistInviteNs {
    public class ExportedChatlistInvite : ExportedChatlistInviteBase, ITlSerializable, ITlDeserializable<ExportedChatlistInvite> {
        public static readonly byte[] Identifier = [172,129,81,12,];
        private int Flags;
        public required string Title {get;set;}
        public required string Url {get;set;}
        public required List<PeerBase> Peers {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(Peers.TlSerialize());
            return bytes.ToArray();
        }

        public new static ExportedChatlistInvite TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var titleLocal =  des.As<string>().Read();
            var urlLocal =  des.As<string>().Read();
            var peersLocal =  des.Read<PeerBase>();
            return new() {
            Flags = flagsLocal,
            Title = titleLocal,
            Url = urlLocal,
            Peers = peersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChatlistsExportedChatlistInviteNs {
    public class ChatlistsExportedChatlistInvite : ChatlistsExportedChatlistInviteBase, ITlSerializable, ITlDeserializable<ChatlistsExportedChatlistInvite> {
        public static readonly byte[] Identifier = [166,227,230,16,];
        public required DialogFilterBase Filter {get;set;}
        public required ExportedChatlistInviteBase Invite {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Filter.TlSerialize());
            bytes.AddRange(Invite.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatlistsExportedChatlistInvite TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var filterLocal =  DialogFilterBase.TlDeserialize(des);
            var inviteLocal =  ExportedChatlistInviteBase.TlDeserialize(des);
            return new() {
            Filter = filterLocal,
            Invite = inviteLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChatlistsExportedInvitesNs {
    public class ChatlistsExportedInvites : ChatlistsExportedInvitesBase, ITlSerializable, ITlDeserializable<ChatlistsExportedInvites> {
        public static readonly byte[] Identifier = [199,109,171,16,];
        public required List<ExportedChatlistInviteBase> Invites {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Invites.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatlistsExportedInvites TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var invitesLocal =  des.Read<ExportedChatlistInviteBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Invites = invitesLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChatlistsChatlistInviteNs {
    public class ChatlistsChatlistInviteAlready : ChatlistsChatlistInviteBase, ITlSerializable, ITlDeserializable<ChatlistsChatlistInviteAlready> {
        public static readonly byte[] Identifier = [89,246,135,250,];
        public required int FilterId {get;set;}
        public required List<PeerBase> MissingPeers {get;set;}
        public required List<PeerBase> AlreadyPeers {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(FilterId.TlSerialize());
            bytes.AddRange(MissingPeers.TlSerialize());
            bytes.AddRange(AlreadyPeers.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatlistsChatlistInviteAlready TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var filterIdLocal =  des.As<int>().Read();
            var missingPeersLocal =  des.Read<PeerBase>();
            var alreadyPeersLocal =  des.Read<PeerBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            FilterId = filterIdLocal,
            MissingPeers = missingPeersLocal,
            AlreadyPeers = alreadyPeersLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }
    public class ChatlistsChatlistInvite : ChatlistsChatlistInviteBase, ITlSerializable, ITlDeserializable<ChatlistsChatlistInvite> {
        public static readonly byte[] Identifier = [157,131,205,29,];
        private int Flags;
        public required string Title {get;set;}
        public string? Emoticon {get;set;}
        public required List<PeerBase> Peers {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Emoticon is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            if(Emoticon is not null) bytes.AddRange(Emoticon.TlSerialize());
            bytes.AddRange(Peers.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatlistsChatlistInvite TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var titleLocal =  des.As<string>().Read();
            var emoticonLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var peersLocal =  des.Read<PeerBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Flags = flagsLocal,
            Title = titleLocal,
            Emoticon = emoticonLocal,
            Peers = peersLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ChatlistsChatlistUpdatesNs {
    public class ChatlistsChatlistUpdates : ChatlistsChatlistUpdatesBase, ITlSerializable, ITlDeserializable<ChatlistsChatlistUpdates> {
        public static readonly byte[] Identifier = [141,135,189,147,];
        public required List<PeerBase> MissingPeers {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(MissingPeers.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static ChatlistsChatlistUpdates TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var missingPeersLocal =  des.Read<PeerBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            MissingPeers = missingPeersLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.BotsBotInfoNs {
    public class BotsBotInfo : BotsBotInfoBase, ITlSerializable, ITlDeserializable<BotsBotInfo> {
        public static readonly byte[] Identifier = [176,117,167,232,];
        public required string Name {get;set;}
        public required string About {get;set;}
        public required string Description {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Name.TlSerialize());
            bytes.AddRange(About.TlSerialize());
            bytes.AddRange(Description.TlSerialize());
            return bytes.ToArray();
        }

        public new static BotsBotInfo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var nameLocal =  des.As<string>().Read();
            var aboutLocal =  des.As<string>().Read();
            var descriptionLocal =  des.As<string>().Read();
            return new() {
            Name = nameLocal,
            About = aboutLocal,
            Description = descriptionLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagePeerVoteNs {
    public class MessagePeerVote : MessagePeerVoteBase, ITlSerializable, ITlDeserializable<MessagePeerVote> {
        public static readonly byte[] Identifier = [92,45,204,182,];
        public required byte[] Option {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(Option.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagePeerVote TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var optionLocal =  des.As<byte[]>().Read();
            var dateLocal =  des.As<int>().Read();
            return new() {
            Peer = peerLocal,
            Option = optionLocal,
            Date = dateLocal,
            };
        }
    }
    public class MessagePeerVoteInputOption : MessagePeerVoteBase, ITlSerializable, ITlDeserializable<MessagePeerVoteInputOption> {
        public static readonly byte[] Identifier = [4,165,205,116,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagePeerVoteInputOption TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var dateLocal =  des.As<int>().Read();
            return new() {
            Peer = peerLocal,
            Date = dateLocal,
            };
        }
    }
    public class MessagePeerVoteMultiple : MessagePeerVoteBase, ITlSerializable, ITlDeserializable<MessagePeerVoteMultiple> {
        public static readonly byte[] Identifier = [230,246,40,70,];
        public required List<byte[]> Options {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(Options.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagePeerVoteMultiple TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var optionsLocal =  des.ReadByteArrayList();
            var dateLocal =  des.As<int>().Read();
            return new() {
            Peer = peerLocal,
            Options = optionsLocal,
            Date = dateLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.SponsoredWebPageNs {
    public class SponsoredWebPage : SponsoredWebPageBase, ITlSerializable, ITlDeserializable<SponsoredWebPage> {
        public static readonly byte[] Identifier = [99,236,184,61,];
        private int Flags;
        public required string Url {get;set;}
        public required string SiteName {get;set;}
        public PhotoBase? Photo {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Photo is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Url.TlSerialize());
            bytes.AddRange(SiteName.TlSerialize());
            if(Photo is not null) bytes.AddRange(Photo.TlSerialize());
            return bytes.ToArray();
        }

        public new static SponsoredWebPage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var urlLocal =  des.As<string>().Read();
            var siteNameLocal =  des.As<string>().Read();
            var photoLocal = (flagsLocal & 1) is 0 ? default : PhotoBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Url = urlLocal,
            SiteName = siteNameLocal,
            Photo = photoLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StoryViewsNs {
    public class StoryViews : StoryViewsBase, ITlSerializable, ITlDeserializable<StoryViews> {
        public static readonly byte[] Identifier = [214,92,89,141,];
        private int Flags;
        public bool HasViewers {get;set;}
        public required int ViewsCount {get;set;}
        public int? ForwardsCount {get;set;}
        public List<ReactionCountBase>? Reactions {get;set;}
        public int? ReactionsCount {get;set;}
        public List<long>? RecentViewers {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (ForwardsCount is not null ? 4 : 0) | (Reactions is not null ? 8 : 0) | (ReactionsCount is not null ? 16 : 0) | (RecentViewers is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(ViewsCount.TlSerialize());
            if(ForwardsCount is not null) bytes.AddRange(ForwardsCount.TlSerialize());
            if(Reactions is not null) bytes.AddRange(Reactions.TlSerialize());
            if(ReactionsCount is not null) bytes.AddRange(ReactionsCount.TlSerialize());
            if(RecentViewers is not null) bytes.AddRange(RecentViewers.TlSerialize());
            return bytes.ToArray();
        }

        public new static StoryViews TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var hasViewersLocal = (flagsLocal & 2) is 0 ? default : true ;
            var viewsCountLocal =  des.As<int>().Read();
            var forwardsCountLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            var reactionsLocal = (flagsLocal & 8) is 0 ? default : des.Read<ReactionCountBase>() ;
            var reactionsCountLocal = (flagsLocal & 16) is 0 ? default : des.As<int>().Read() ;
            var recentViewersLocal = (flagsLocal & 1) is 0 ? default : des.ReadNumbers<long>() ;
            return new() {
            Flags = flagsLocal,
            HasViewers = hasViewersLocal,
            ViewsCount = viewsCountLocal,
            ForwardsCount = forwardsCountLocal,
            Reactions = reactionsLocal,
            ReactionsCount = reactionsCountLocal,
            RecentViewers = recentViewersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StoryItemNs {
    public class StoryItemDeleted : StoryItemBase, ITlSerializable, ITlDeserializable<StoryItemDeleted> {
        public static readonly byte[] Identifier = [79,238,230,81,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            return bytes.ToArray();
        }

        public new static StoryItemDeleted TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<int>().Read();
            return new() {
            Id = idLocal,
            };
        }
    }
    public class StoryItemSkipped : StoryItemBase, ITlSerializable, ITlDeserializable<StoryItemSkipped> {
        public static readonly byte[] Identifier = [19,201,173,255,];
        private int Flags;
        public bool CloseFriends {get;set;}
        public required int Date {get;set;}
        public required int ExpireDate {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(ExpireDate.TlSerialize());
            return bytes.ToArray();
        }

        public new static StoryItemSkipped TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var closeFriendsLocal = (flagsLocal & 256) is 0 ? default : true ;
            var idLocal =  des.As<int>().Read();
            var dateLocal =  des.As<int>().Read();
            var expireDateLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            CloseFriends = closeFriendsLocal,
            Id = idLocal,
            Date = dateLocal,
            ExpireDate = expireDateLocal,
            };
        }
    }
    public class StoryItem : StoryItemBase, ITlSerializable, ITlDeserializable<StoryItem> {
        public static readonly byte[] Identifier = [161,101,99,175,];
        private int Flags;
        public bool Pinned {get;set;}
        public bool Public {get;set;}
        public bool CloseFriends {get;set;}
        public bool Min {get;set;}
        public bool Noforwards {get;set;}
        public bool Edited {get;set;}
        public bool Contacts {get;set;}
        public bool SelectedContacts {get;set;}
        public bool Out {get;set;}
        public required int Date {get;set;}
        public StoryFwdHeaderBase? FwdFrom {get;set;}
        public required int ExpireDate {get;set;}
        public string? Caption {get;set;}
        public List<MessageEntityBase>? Entities {get;set;}
        public required MessageMediaBase Media {get;set;}
        public List<MediaAreaBase>? MediaAreas {get;set;}
        public List<PrivacyRuleBase>? Privacy {get;set;}
        public StoryViewsBase? Views {get;set;}
        public ReactionBase? SentReaction {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (FwdFrom is not null ? 131072 : 0) | (Caption is not null ? 1 : 0) | (Entities is not null ? 2 : 0) | (MediaAreas is not null ? 16384 : 0) | (Privacy is not null ? 4 : 0) | (Views is not null ? 8 : 0) | (SentReaction is not null ? 32768 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            if(FwdFrom is not null) bytes.AddRange(FwdFrom.TlSerialize());
            bytes.AddRange(ExpireDate.TlSerialize());
            if(Caption is not null) bytes.AddRange(Caption.TlSerialize());
            if(Entities is not null) bytes.AddRange(Entities.TlSerialize());
            bytes.AddRange(Media.TlSerialize());
            if(MediaAreas is not null) bytes.AddRange(MediaAreas.TlSerialize());
            if(Privacy is not null) bytes.AddRange(Privacy.TlSerialize());
            if(Views is not null) bytes.AddRange(Views.TlSerialize());
            if(SentReaction is not null) bytes.AddRange(SentReaction.TlSerialize());
            return bytes.ToArray();
        }

        public new static StoryItem TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var pinnedLocal = (flagsLocal & 32) is 0 ? default : true ;
            var publicLocal = (flagsLocal & 128) is 0 ? default : true ;
            var closeFriendsLocal = (flagsLocal & 256) is 0 ? default : true ;
            var minLocal = (flagsLocal & 512) is 0 ? default : true ;
            var noforwardsLocal = (flagsLocal & 1024) is 0 ? default : true ;
            var editedLocal = (flagsLocal & 2048) is 0 ? default : true ;
            var contactsLocal = (flagsLocal & 4096) is 0 ? default : true ;
            var selectedContactsLocal = (flagsLocal & 8192) is 0 ? default : true ;
            var outLocal = (flagsLocal & 65536) is 0 ? default : true ;
            var idLocal =  des.As<int>().Read();
            var dateLocal =  des.As<int>().Read();
            var fwdFromLocal = (flagsLocal & 131072) is 0 ? default : StoryFwdHeaderBase.TlDeserialize(des) ;
            var expireDateLocal =  des.As<int>().Read();
            var captionLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var entitiesLocal = (flagsLocal & 2) is 0 ? default : des.Read<MessageEntityBase>() ;
            var mediaLocal =  MessageMediaBase.TlDeserialize(des);
            var mediaAreasLocal = (flagsLocal & 16384) is 0 ? default : des.Read<MediaAreaBase>() ;
            var privacyLocal = (flagsLocal & 4) is 0 ? default : des.Read<PrivacyRuleBase>() ;
            var viewsLocal = (flagsLocal & 8) is 0 ? default : StoryViewsBase.TlDeserialize(des) ;
            var sentReactionLocal = (flagsLocal & 32768) is 0 ? default : ReactionBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Pinned = pinnedLocal,
            Public = publicLocal,
            CloseFriends = closeFriendsLocal,
            Min = minLocal,
            Noforwards = noforwardsLocal,
            Edited = editedLocal,
            Contacts = contactsLocal,
            SelectedContacts = selectedContactsLocal,
            Out = outLocal,
            Id = idLocal,
            Date = dateLocal,
            FwdFrom = fwdFromLocal,
            ExpireDate = expireDateLocal,
            Caption = captionLocal,
            Entities = entitiesLocal,
            Media = mediaLocal,
            MediaAreas = mediaAreasLocal,
            Privacy = privacyLocal,
            Views = viewsLocal,
            SentReaction = sentReactionLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StoriesAllStoriesNs {
    public class StoriesAllStoriesNotModified : StoriesAllStoriesBase, ITlSerializable, ITlDeserializable<StoriesAllStoriesNotModified> {
        public static readonly byte[] Identifier = [62,254,88,17,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(State.TlSerialize());
            bytes.AddRange(StealthMode.TlSerialize());
            return bytes.ToArray();
        }

        public new static StoriesAllStoriesNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var stateLocal =  des.As<string>().Read();
            var stealthModeLocal =  StoriesStealthModeBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            State = stateLocal,
            StealthMode = stealthModeLocal,
            };
        }
    }
    public class StoriesAllStories : StoriesAllStoriesBase, ITlSerializable, ITlDeserializable<StoriesAllStories> {
        public static readonly byte[] Identifier = [129,94,252,110,];
        public bool HasMore {get;set;}
        public required int Count {get;set;}
        public required List<PeerStoriesBase> PeerStories {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(State.TlSerialize());
            bytes.AddRange(PeerStories.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            bytes.AddRange(StealthMode.TlSerialize());
            return bytes.ToArray();
        }

        public new static StoriesAllStories TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var hasMoreLocal = (flagsLocal & 1) is 0 ? default : true ;
            var countLocal =  des.As<int>().Read();
            var stateLocal =  des.As<string>().Read();
            var peerStoriesLocal =  des.Read<PeerStoriesBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            var stealthModeLocal =  StoriesStealthModeBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            HasMore = hasMoreLocal,
            Count = countLocal,
            State = stateLocal,
            PeerStories = peerStoriesLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            StealthMode = stealthModeLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StoriesStoriesNs {
    public class StoriesStories : StoriesStoriesBase, ITlSerializable, ITlDeserializable<StoriesStories> {
        public static readonly byte[] Identifier = [200,195,216,93,];
        public required int Count {get;set;}
        public required List<StoryItemBase> Stories {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(Stories.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static StoriesStories TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var countLocal =  des.As<int>().Read();
            var storiesLocal =  des.Read<StoryItemBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Count = countLocal,
            Stories = storiesLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StoryViewNs {
    public class StoryView : StoryViewBase, ITlSerializable, ITlDeserializable<StoryView> {
        public static readonly byte[] Identifier = [197,234,189,176,];
        public required long UserId {get;set;}
        public required int Date {get;set;}
        public ReactionBase? Reaction {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Reaction is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            if(Reaction is not null) bytes.AddRange(Reaction.TlSerialize());
            return bytes.ToArray();
        }

        public new static StoryView TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var blockedLocal = (flagsLocal & 1) is 0 ? default : true ;
            var blockedMyStoriesFromLocal = (flagsLocal & 2) is 0 ? default : true ;
            var userIdLocal =  des.As<long>().Read();
            var dateLocal =  des.As<int>().Read();
            var reactionLocal = (flagsLocal & 4) is 0 ? default : ReactionBase.TlDeserialize(des) ;
            return new() {
            Flags = flagsLocal,
            Blocked = blockedLocal,
            BlockedMyStoriesFrom = blockedMyStoriesFromLocal,
            UserId = userIdLocal,
            Date = dateLocal,
            Reaction = reactionLocal,
            };
        }
    }
    public class StoryViewPublicForward : StoryViewBase, ITlSerializable, ITlDeserializable<StoryViewPublicForward> {
        public static readonly byte[] Identifier = [11,103,131,144,];
        public required MessageBase Message {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Message.TlSerialize());
            return bytes.ToArray();
        }

        public new static StoryViewPublicForward TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var blockedLocal = (flagsLocal & 1) is 0 ? default : true ;
            var blockedMyStoriesFromLocal = (flagsLocal & 2) is 0 ? default : true ;
            var messageLocal =  MessageBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Blocked = blockedLocal,
            BlockedMyStoriesFrom = blockedMyStoriesFromLocal,
            Message = messageLocal,
            };
        }
    }
    public class StoryViewPublicRepost : StoryViewBase, ITlSerializable, ITlDeserializable<StoryViewPublicRepost> {
        public static readonly byte[] Identifier = [73,207,116,189,];
        public required PeerBase PeerId {get;set;}
        public required StoryItemBase Story {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(PeerId.TlSerialize());
            bytes.AddRange(Story.TlSerialize());
            return bytes.ToArray();
        }

        public new static StoryViewPublicRepost TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var blockedLocal = (flagsLocal & 1) is 0 ? default : true ;
            var blockedMyStoriesFromLocal = (flagsLocal & 2) is 0 ? default : true ;
            var peerIdLocal =  PeerBase.TlDeserialize(des);
            var storyLocal =  StoryItemBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Blocked = blockedLocal,
            BlockedMyStoriesFrom = blockedMyStoriesFromLocal,
            PeerId = peerIdLocal,
            Story = storyLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StoriesStoryViewsListNs {
    public class StoriesStoryViewsList : StoriesStoryViewsListBase, ITlSerializable, ITlDeserializable<StoriesStoryViewsList> {
        public static readonly byte[] Identifier = [197,143,215,89,];
        private int Flags;
        public required int Count {get;set;}
        public required int ViewsCount {get;set;}
        public required int ForwardsCount {get;set;}
        public required int ReactionsCount {get;set;}
        public required List<StoryViewBase> Views {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public string? NextOffset {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (NextOffset is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(ViewsCount.TlSerialize());
            bytes.AddRange(ForwardsCount.TlSerialize());
            bytes.AddRange(ReactionsCount.TlSerialize());
            bytes.AddRange(Views.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            if(NextOffset is not null) bytes.AddRange(NextOffset.TlSerialize());
            return bytes.ToArray();
        }

        public new static StoriesStoryViewsList TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var countLocal =  des.As<int>().Read();
            var viewsCountLocal =  des.As<int>().Read();
            var forwardsCountLocal =  des.As<int>().Read();
            var reactionsCountLocal =  des.As<int>().Read();
            var viewsLocal =  des.Read<StoryViewBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            var nextOffsetLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            Count = countLocal,
            ViewsCount = viewsCountLocal,
            ForwardsCount = forwardsCountLocal,
            ReactionsCount = reactionsCountLocal,
            Views = viewsLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            NextOffset = nextOffsetLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StoriesStoryViewsNs {
    public class StoriesStoryViews : StoriesStoryViewsBase, ITlSerializable, ITlDeserializable<StoriesStoryViews> {
        public static readonly byte[] Identifier = [29,237,158,222,];
        public required List<StoryViewsBase> Views {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Views.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static StoriesStoryViews TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var viewsLocal =  des.Read<StoryViewsBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Views = viewsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.InputReplyToNs {
    public class InputReplyToMessage : InputReplyToBase, ITlSerializable, ITlDeserializable<InputReplyToMessage> {
        public static readonly byte[] Identifier = [213,246,192,34,];
        private int Flags;
        public required int ReplyToMsgId {get;set;}
        public int? TopMsgId {get;set;}
        public InputPeerBase? ReplyToPeerId {get;set;}
        public string? QuoteText {get;set;}
        public List<MessageEntityBase>? QuoteEntities {get;set;}
        public int? QuoteOffset {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (TopMsgId is not null ? 1 : 0) | (ReplyToPeerId is not null ? 2 : 0) | (QuoteText is not null ? 4 : 0) | (QuoteEntities is not null ? 8 : 0) | (QuoteOffset is not null ? 16 : 0) ).TlSerialize());
            bytes.AddRange(ReplyToMsgId.TlSerialize());
            if(TopMsgId is not null) bytes.AddRange(TopMsgId.TlSerialize());
            if(ReplyToPeerId is not null) bytes.AddRange(ReplyToPeerId.TlSerialize());
            if(QuoteText is not null) bytes.AddRange(QuoteText.TlSerialize());
            if(QuoteEntities is not null) bytes.AddRange(QuoteEntities.TlSerialize());
            if(QuoteOffset is not null) bytes.AddRange(QuoteOffset.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputReplyToMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var replyToMsgIdLocal =  des.As<int>().Read();
            var topMsgIdLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var replyToPeerIdLocal = (flagsLocal & 2) is 0 ? default : InputPeerBase.TlDeserialize(des) ;
            var quoteTextLocal = (flagsLocal & 4) is 0 ? default : des.As<string>().Read() ;
            var quoteEntitiesLocal = (flagsLocal & 8) is 0 ? default : des.Read<MessageEntityBase>() ;
            var quoteOffsetLocal = (flagsLocal & 16) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            ReplyToMsgId = replyToMsgIdLocal,
            TopMsgId = topMsgIdLocal,
            ReplyToPeerId = replyToPeerIdLocal,
            QuoteText = quoteTextLocal,
            QuoteEntities = quoteEntitiesLocal,
            QuoteOffset = quoteOffsetLocal,
            };
        }
    }
    public class InputReplyToStory : InputReplyToBase, ITlSerializable, ITlDeserializable<InputReplyToStory> {
        public static readonly byte[] Identifier = [131,242,176,21,];
        public required InputUserBase UserId {get;set;}
        public required int StoryId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(UserId.TlSerialize());
            bytes.AddRange(StoryId.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputReplyToStory TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var userIdLocal =  InputUserBase.TlDeserialize(des);
            var storyIdLocal =  des.As<int>().Read();
            return new() {
            UserId = userIdLocal,
            StoryId = storyIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.ExportedStoryLinkNs {
    public class ExportedStoryLink : ExportedStoryLinkBase, ITlSerializable, ITlDeserializable<ExportedStoryLink> {
        public static readonly byte[] Identifier = [59,5,201,63,];
        public required string Link {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Link.TlSerialize());
            return bytes.ToArray();
        }

        public new static ExportedStoryLink TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var linkLocal =  des.As<string>().Read();
            return new() {
            Link = linkLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StoriesStealthModeNs {
    public class StoriesStealthMode : StoriesStealthModeBase, ITlSerializable, ITlDeserializable<StoriesStealthMode> {
        public static readonly byte[] Identifier = [253,39,46,113,];
        private int Flags;
        public int? ActiveUntilDate {get;set;}
        public int? CooldownUntilDate {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (ActiveUntilDate is not null ? 1 : 0) | (CooldownUntilDate is not null ? 2 : 0) ).TlSerialize());
            if(ActiveUntilDate is not null) bytes.AddRange(ActiveUntilDate.TlSerialize());
            if(CooldownUntilDate is not null) bytes.AddRange(CooldownUntilDate.TlSerialize());
            return bytes.ToArray();
        }

        public new static StoriesStealthMode TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var activeUntilDateLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var cooldownUntilDateLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            ActiveUntilDate = activeUntilDateLocal,
            CooldownUntilDate = cooldownUntilDateLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MediaAreaCoordinatesNs {
    public class MediaAreaCoordinates : MediaAreaCoordinatesBase, ITlSerializable, ITlDeserializable<MediaAreaCoordinates> {
        public static readonly byte[] Identifier = [78,234,209,3,];
        public required double X {get;set;}
        public required double Y {get;set;}
        public required double W {get;set;}
        public required double H {get;set;}
        public required double Rotation {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(X.TlSerialize());
            bytes.AddRange(Y.TlSerialize());
            bytes.AddRange(W.TlSerialize());
            bytes.AddRange(H.TlSerialize());
            bytes.AddRange(Rotation.TlSerialize());
            return bytes.ToArray();
        }

        public new static MediaAreaCoordinates TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var xLocal =  des.As<double>().Read();
            var yLocal =  des.As<double>().Read();
            var wLocal =  des.As<double>().Read();
            var hLocal =  des.As<double>().Read();
            var rotationLocal =  des.As<double>().Read();
            return new() {
            X = xLocal,
            Y = yLocal,
            W = wLocal,
            H = hLocal,
            Rotation = rotationLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MediaAreaNs {
    public class MediaAreaVenue : MediaAreaBase, ITlSerializable, ITlDeserializable<MediaAreaVenue> {
        public static readonly byte[] Identifier = [156,219,130,190,];
        public required GeoPointBase Geo {get;set;}
        public required string Title {get;set;}
        public required string Address {get;set;}
        public required string Provider {get;set;}
        public required string VenueId {get;set;}
        public required string VenueType {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Coordinates.TlSerialize());
            bytes.AddRange(Geo.TlSerialize());
            bytes.AddRange(Title.TlSerialize());
            bytes.AddRange(Address.TlSerialize());
            bytes.AddRange(Provider.TlSerialize());
            bytes.AddRange(VenueId.TlSerialize());
            bytes.AddRange(VenueType.TlSerialize());
            return bytes.ToArray();
        }

        public new static MediaAreaVenue TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var coordinatesLocal =  MediaAreaCoordinatesBase.TlDeserialize(des);
            var geoLocal =  GeoPointBase.TlDeserialize(des);
            var titleLocal =  des.As<string>().Read();
            var addressLocal =  des.As<string>().Read();
            var providerLocal =  des.As<string>().Read();
            var venueIdLocal =  des.As<string>().Read();
            var venueTypeLocal =  des.As<string>().Read();
            return new() {
            Coordinates = coordinatesLocal,
            Geo = geoLocal,
            Title = titleLocal,
            Address = addressLocal,
            Provider = providerLocal,
            VenueId = venueIdLocal,
            VenueType = venueTypeLocal,
            };
        }
    }
    public class InputMediaAreaVenue : MediaAreaBase, ITlSerializable, ITlDeserializable<InputMediaAreaVenue> {
        public static readonly byte[] Identifier = [127,33,130,178,];
        public required long QueryId {get;set;}
        public required string ResultId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Coordinates.TlSerialize());
            bytes.AddRange(QueryId.TlSerialize());
            bytes.AddRange(ResultId.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMediaAreaVenue TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var coordinatesLocal =  MediaAreaCoordinatesBase.TlDeserialize(des);
            var queryIdLocal =  des.As<long>().Read();
            var resultIdLocal =  des.As<string>().Read();
            return new() {
            Coordinates = coordinatesLocal,
            QueryId = queryIdLocal,
            ResultId = resultIdLocal,
            };
        }
    }
    public class MediaAreaGeoPoint : MediaAreaBase, ITlSerializable, ITlDeserializable<MediaAreaGeoPoint> {
        public static readonly byte[] Identifier = [34,59,139,223,];
        public required GeoPointBase Geo {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Coordinates.TlSerialize());
            bytes.AddRange(Geo.TlSerialize());
            return bytes.ToArray();
        }

        public new static MediaAreaGeoPoint TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var coordinatesLocal =  MediaAreaCoordinatesBase.TlDeserialize(des);
            var geoLocal =  GeoPointBase.TlDeserialize(des);
            return new() {
            Coordinates = coordinatesLocal,
            Geo = geoLocal,
            };
        }
    }
    public class MediaAreaSuggestedReaction : MediaAreaBase, ITlSerializable, ITlDeserializable<MediaAreaSuggestedReaction> {
        public static readonly byte[] Identifier = [113,88,69,20,];
        private int Flags;
        public bool Dark {get;set;}
        public bool Flipped {get;set;}
        public required ReactionBase Reaction {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Coordinates.TlSerialize());
            bytes.AddRange(Reaction.TlSerialize());
            return bytes.ToArray();
        }

        public new static MediaAreaSuggestedReaction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var darkLocal = (flagsLocal & 1) is 0 ? default : true ;
            var flippedLocal = (flagsLocal & 2) is 0 ? default : true ;
            var coordinatesLocal =  MediaAreaCoordinatesBase.TlDeserialize(des);
            var reactionLocal =  ReactionBase.TlDeserialize(des);
            return new() {
            Flags = flagsLocal,
            Dark = darkLocal,
            Flipped = flippedLocal,
            Coordinates = coordinatesLocal,
            Reaction = reactionLocal,
            };
        }
    }
    public class MediaAreaChannelPost : MediaAreaBase, ITlSerializable, ITlDeserializable<MediaAreaChannelPost> {
        public static readonly byte[] Identifier = [175,22,4,119,];
        public required long ChannelId {get;set;}
        public required int MsgId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Coordinates.TlSerialize());
            bytes.AddRange(ChannelId.TlSerialize());
            bytes.AddRange(MsgId.TlSerialize());
            return bytes.ToArray();
        }

        public new static MediaAreaChannelPost TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var coordinatesLocal =  MediaAreaCoordinatesBase.TlDeserialize(des);
            var channelIdLocal =  des.As<long>().Read();
            var msgIdLocal =  des.As<int>().Read();
            return new() {
            Coordinates = coordinatesLocal,
            ChannelId = channelIdLocal,
            MsgId = msgIdLocal,
            };
        }
    }
    public class InputMediaAreaChannelPost : MediaAreaBase, ITlSerializable, ITlDeserializable<InputMediaAreaChannelPost> {
        public static readonly byte[] Identifier = [191,242,113,34,];
        public required InputChannelBase Channel {get;set;}
        public required int MsgId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Coordinates.TlSerialize());
            bytes.AddRange(Channel.TlSerialize());
            bytes.AddRange(MsgId.TlSerialize());
            return bytes.ToArray();
        }

        public new static InputMediaAreaChannelPost TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var coordinatesLocal =  MediaAreaCoordinatesBase.TlDeserialize(des);
            var channelLocal =  InputChannelBase.TlDeserialize(des);
            var msgIdLocal =  des.As<int>().Read();
            return new() {
            Coordinates = coordinatesLocal,
            Channel = channelLocal,
            MsgId = msgIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PeerStoriesNs {
    public class PeerStories : PeerStoriesBase, ITlSerializable, ITlDeserializable<PeerStories> {
        public static readonly byte[] Identifier = [153,233,53,154,];
        private int Flags;
        public required PeerBase Peer {get;set;}
        public int? MaxReadId {get;set;}
        public required List<StoryItemBase> Stories {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (MaxReadId is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            if(MaxReadId is not null) bytes.AddRange(MaxReadId.TlSerialize());
            bytes.AddRange(Stories.TlSerialize());
            return bytes.ToArray();
        }

        public new static PeerStories TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var peerLocal =  PeerBase.TlDeserialize(des);
            var maxReadIdLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var storiesLocal =  des.Read<StoryItemBase>();
            return new() {
            Flags = flagsLocal,
            Peer = peerLocal,
            MaxReadId = maxReadIdLocal,
            Stories = storiesLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StoriesPeerStoriesNs {
    public class StoriesPeerStories : StoriesPeerStoriesBase, ITlSerializable, ITlDeserializable<StoriesPeerStories> {
        public static readonly byte[] Identifier = [104,135,230,202,];
        public required PeerStoriesBase Stories {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Stories.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static StoriesPeerStories TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var storiesLocal =  PeerStoriesBase.TlDeserialize(des);
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Stories = storiesLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesWebPageNs {
    public class MessagesWebPage : MessagesWebPageBase, ITlSerializable, ITlDeserializable<MessagesWebPage> {
        public static readonly byte[] Identifier = [189,18,94,253,];
        public required WebPageBase Webpage {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Webpage.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesWebPage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var webpageLocal =  WebPageBase.TlDeserialize(des);
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Webpage = webpageLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PremiumGiftCodeOptionNs {
    public class PremiumGiftCodeOption : PremiumGiftCodeOptionBase, ITlSerializable, ITlDeserializable<PremiumGiftCodeOption> {
        public static readonly byte[] Identifier = [43,150,126,37,];
        private int Flags;
        public required int Users {get;set;}
        public required int Months {get;set;}
        public string? StoreProduct {get;set;}
        public int? StoreQuantity {get;set;}
        public required string Currency {get;set;}
        public required long Amount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (StoreProduct is not null ? 1 : 0) | (StoreQuantity is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            bytes.AddRange(Months.TlSerialize());
            if(StoreProduct is not null) bytes.AddRange(StoreProduct.TlSerialize());
            if(StoreQuantity is not null) bytes.AddRange(StoreQuantity.TlSerialize());
            bytes.AddRange(Currency.TlSerialize());
            bytes.AddRange(Amount.TlSerialize());
            return bytes.ToArray();
        }

        public new static PremiumGiftCodeOption TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var usersLocal =  des.As<int>().Read();
            var monthsLocal =  des.As<int>().Read();
            var storeProductLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var storeQuantityLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            var currencyLocal =  des.As<string>().Read();
            var amountLocal =  des.As<long>().Read();
            return new() {
            Flags = flagsLocal,
            Users = usersLocal,
            Months = monthsLocal,
            StoreProduct = storeProductLocal,
            StoreQuantity = storeQuantityLocal,
            Currency = currencyLocal,
            Amount = amountLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PaymentsCheckedGiftCodeNs {
    public class PaymentsCheckedGiftCode : PaymentsCheckedGiftCodeBase, ITlSerializable, ITlDeserializable<PaymentsCheckedGiftCode> {
        public static readonly byte[] Identifier = [150,16,74,40,];
        private int Flags;
        public bool ViaGiveaway {get;set;}
        public PeerBase? FromId {get;set;}
        public int? GiveawayMsgId {get;set;}
        public long? ToId {get;set;}
        public required int Date {get;set;}
        public required int Months {get;set;}
        public int? UsedDate {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (FromId is not null ? 16 : 0) | (GiveawayMsgId is not null ? 8 : 0) | (ToId is not null ? 1 : 0) | (UsedDate is not null ? 2 : 0) ).TlSerialize());
            if(FromId is not null) bytes.AddRange(FromId.TlSerialize());
            if(GiveawayMsgId is not null) bytes.AddRange(GiveawayMsgId.TlSerialize());
            if(ToId is not null) bytes.AddRange(ToId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(Months.TlSerialize());
            if(UsedDate is not null) bytes.AddRange(UsedDate.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static PaymentsCheckedGiftCode TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var viaGiveawayLocal = (flagsLocal & 4) is 0 ? default : true ;
            var fromIdLocal = (flagsLocal & 16) is 0 ? default : PeerBase.TlDeserialize(des) ;
            var giveawayMsgIdLocal = (flagsLocal & 8) is 0 ? default : des.As<int>().Read() ;
            var toIdLocal = (flagsLocal & 1) is 0 ? default : des.As<long>().Read() ;
            var dateLocal =  des.As<int>().Read();
            var monthsLocal =  des.As<int>().Read();
            var usedDateLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Flags = flagsLocal,
            ViaGiveaway = viaGiveawayLocal,
            FromId = fromIdLocal,
            GiveawayMsgId = giveawayMsgIdLocal,
            ToId = toIdLocal,
            Date = dateLocal,
            Months = monthsLocal,
            UsedDate = usedDateLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PaymentsGiveawayInfoNs {
    public class PaymentsGiveawayInfo : PaymentsGiveawayInfoBase, ITlSerializable, ITlDeserializable<PaymentsGiveawayInfo> {
        public static readonly byte[] Identifier = [160,218,103,67,];
        public bool Participating {get;set;}
        public bool PreparingResults {get;set;}
        public int? JoinedTooEarlyDate {get;set;}
        public long? AdminDisallowedChatId {get;set;}
        public string? DisallowedCountry {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (JoinedTooEarlyDate is not null ? 2 : 0) | (AdminDisallowedChatId is not null ? 4 : 0) | (DisallowedCountry is not null ? 16 : 0) ).TlSerialize());
            bytes.AddRange(StartDate.TlSerialize());
            if(JoinedTooEarlyDate is not null) bytes.AddRange(JoinedTooEarlyDate.TlSerialize());
            if(AdminDisallowedChatId is not null) bytes.AddRange(AdminDisallowedChatId.TlSerialize());
            if(DisallowedCountry is not null) bytes.AddRange(DisallowedCountry.TlSerialize());
            return bytes.ToArray();
        }

        public new static PaymentsGiveawayInfo TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var participatingLocal = (flagsLocal & 1) is 0 ? default : true ;
            var preparingResultsLocal = (flagsLocal & 8) is 0 ? default : true ;
            var startDateLocal =  des.As<int>().Read();
            var joinedTooEarlyDateLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            var adminDisallowedChatIdLocal = (flagsLocal & 4) is 0 ? default : des.As<long>().Read() ;
            var disallowedCountryLocal = (flagsLocal & 16) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            Participating = participatingLocal,
            PreparingResults = preparingResultsLocal,
            StartDate = startDateLocal,
            JoinedTooEarlyDate = joinedTooEarlyDateLocal,
            AdminDisallowedChatId = adminDisallowedChatIdLocal,
            DisallowedCountry = disallowedCountryLocal,
            };
        }
    }
    public class PaymentsGiveawayInfoResults : PaymentsGiveawayInfoBase, ITlSerializable, ITlDeserializable<PaymentsGiveawayInfoResults> {
        public static readonly byte[] Identifier = [112,85,205,0,];
        public bool Winner {get;set;}
        public bool Refunded {get;set;}
        public string? GiftCodeSlug {get;set;}
        public required int FinishDate {get;set;}
        public required int WinnersCount {get;set;}
        public required int ActivatedCount {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (GiftCodeSlug is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(StartDate.TlSerialize());
            if(GiftCodeSlug is not null) bytes.AddRange(GiftCodeSlug.TlSerialize());
            bytes.AddRange(FinishDate.TlSerialize());
            bytes.AddRange(WinnersCount.TlSerialize());
            bytes.AddRange(ActivatedCount.TlSerialize());
            return bytes.ToArray();
        }

        public new static PaymentsGiveawayInfoResults TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var winnerLocal = (flagsLocal & 1) is 0 ? default : true ;
            var refundedLocal = (flagsLocal & 2) is 0 ? default : true ;
            var startDateLocal =  des.As<int>().Read();
            var giftCodeSlugLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var finishDateLocal =  des.As<int>().Read();
            var winnersCountLocal =  des.As<int>().Read();
            var activatedCountLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            Winner = winnerLocal,
            Refunded = refundedLocal,
            StartDate = startDateLocal,
            GiftCodeSlug = giftCodeSlugLocal,
            FinishDate = finishDateLocal,
            WinnersCount = winnersCountLocal,
            ActivatedCount = activatedCountLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PrepaidGiveawayNs {
    public class PrepaidGiveaway : PrepaidGiveawayBase, ITlSerializable, ITlDeserializable<PrepaidGiveaway> {
        public static readonly byte[] Identifier = [84,157,83,178,];
        public required long Id {get;set;}
        public required int Months {get;set;}
        public required int Quantity {get;set;}
        public required int Date {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Id.TlSerialize());
            bytes.AddRange(Months.TlSerialize());
            bytes.AddRange(Quantity.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            return bytes.ToArray();
        }

        public new static PrepaidGiveaway TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var idLocal =  des.As<long>().Read();
            var monthsLocal =  des.As<int>().Read();
            var quantityLocal =  des.As<int>().Read();
            var dateLocal =  des.As<int>().Read();
            return new() {
            Id = idLocal,
            Months = monthsLocal,
            Quantity = quantityLocal,
            Date = dateLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.BoostNs {
    public class Boost : BoostBase, ITlSerializable, ITlDeserializable<Boost> {
        public static readonly byte[] Identifier = [113,140,28,42,];
        private int Flags;
        public bool Gift {get;set;}
        public bool Giveaway {get;set;}
        public bool Unclaimed {get;set;}
        public required string Id {get;set;}
        public long? UserId {get;set;}
        public int? GiveawayMsgId {get;set;}
        public required int Date {get;set;}
        public required int Expires {get;set;}
        public string? UsedGiftSlug {get;set;}
        public int? Multiplier {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (UserId is not null ? 1 : 0) | (GiveawayMsgId is not null ? 4 : 0) | (UsedGiftSlug is not null ? 16 : 0) | (Multiplier is not null ? 32 : 0) ).TlSerialize());
            bytes.AddRange(Id.TlSerialize());
            if(UserId is not null) bytes.AddRange(UserId.TlSerialize());
            if(GiveawayMsgId is not null) bytes.AddRange(GiveawayMsgId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(Expires.TlSerialize());
            if(UsedGiftSlug is not null) bytes.AddRange(UsedGiftSlug.TlSerialize());
            if(Multiplier is not null) bytes.AddRange(Multiplier.TlSerialize());
            return bytes.ToArray();
        }

        public new static Boost TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var giftLocal = (flagsLocal & 2) is 0 ? default : true ;
            var giveawayLocal = (flagsLocal & 4) is 0 ? default : true ;
            var unclaimedLocal = (flagsLocal & 8) is 0 ? default : true ;
            var idLocal =  des.As<string>().Read();
            var userIdLocal = (flagsLocal & 1) is 0 ? default : des.As<long>().Read() ;
            var giveawayMsgIdLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            var dateLocal =  des.As<int>().Read();
            var expiresLocal =  des.As<int>().Read();
            var usedGiftSlugLocal = (flagsLocal & 16) is 0 ? default : des.As<string>().Read() ;
            var multiplierLocal = (flagsLocal & 32) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Gift = giftLocal,
            Giveaway = giveawayLocal,
            Unclaimed = unclaimedLocal,
            Id = idLocal,
            UserId = userIdLocal,
            GiveawayMsgId = giveawayMsgIdLocal,
            Date = dateLocal,
            Expires = expiresLocal,
            UsedGiftSlug = usedGiftSlugLocal,
            Multiplier = multiplierLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PremiumBoostsListNs {
    public class PremiumBoostsList : PremiumBoostsListBase, ITlSerializable, ITlDeserializable<PremiumBoostsList> {
        public static readonly byte[] Identifier = [60,97,248,134,];
        private int Flags;
        public required int Count {get;set;}
        public required List<BoostBase> Boosts {get;set;}
        public string? NextOffset {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (NextOffset is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(Boosts.TlSerialize());
            if(NextOffset is not null) bytes.AddRange(NextOffset.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static PremiumBoostsList TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var countLocal =  des.As<int>().Read();
            var boostsLocal =  des.Read<BoostBase>();
            var nextOffsetLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Flags = flagsLocal,
            Count = countLocal,
            Boosts = boostsLocal,
            NextOffset = nextOffsetLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MyBoostNs {
    public class MyBoost : MyBoostBase, ITlSerializable, ITlDeserializable<MyBoost> {
        public static readonly byte[] Identifier = [92,65,72,196,];
        private int Flags;
        public required int Slot {get;set;}
        public PeerBase? Peer {get;set;}
        public required int Date {get;set;}
        public required int Expires {get;set;}
        public int? CooldownUntilDate {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Peer is not null ? 1 : 0) | (CooldownUntilDate is not null ? 2 : 0) ).TlSerialize());
            bytes.AddRange(Slot.TlSerialize());
            if(Peer is not null) bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(Expires.TlSerialize());
            if(CooldownUntilDate is not null) bytes.AddRange(CooldownUntilDate.TlSerialize());
            return bytes.ToArray();
        }

        public new static MyBoost TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var slotLocal =  des.As<int>().Read();
            var peerLocal = (flagsLocal & 1) is 0 ? default : PeerBase.TlDeserialize(des) ;
            var dateLocal =  des.As<int>().Read();
            var expiresLocal =  des.As<int>().Read();
            var cooldownUntilDateLocal = (flagsLocal & 2) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Slot = slotLocal,
            Peer = peerLocal,
            Date = dateLocal,
            Expires = expiresLocal,
            CooldownUntilDate = cooldownUntilDateLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PremiumMyBoostsNs {
    public class PremiumMyBoosts : PremiumMyBoostsBase, ITlSerializable, ITlDeserializable<PremiumMyBoosts> {
        public static readonly byte[] Identifier = [226,40,226,154,];
        public required List<MyBoostBase> MyBoosts {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(MyBoosts.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static PremiumMyBoosts TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var myBoostsLocal =  des.Read<MyBoostBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            MyBoosts = myBoostsLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PremiumBoostsStatusNs {
    public class PremiumBoostsStatus : PremiumBoostsStatusBase, ITlSerializable, ITlDeserializable<PremiumBoostsStatus> {
        public static readonly byte[] Identifier = [122,66,89,73,];
        private int Flags;
        public bool MyBoost {get;set;}
        public required int Level {get;set;}
        public required int CurrentLevelBoosts {get;set;}
        public required int Boosts {get;set;}
        public int? GiftBoosts {get;set;}
        public int? NextLevelBoosts {get;set;}
        public StatsPercentValueBase? PremiumAudience {get;set;}
        public required string BoostUrl {get;set;}
        public List<PrepaidGiveawayBase>? PrepaidGiveaways {get;set;}
        public List<int>? MyBoostSlots {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (GiftBoosts is not null ? 16 : 0) | (NextLevelBoosts is not null ? 1 : 0) | (PremiumAudience is not null ? 2 : 0) | (PrepaidGiveaways is not null ? 8 : 0) | (MyBoostSlots is not null ? 4 : 0) ).TlSerialize());
            bytes.AddRange(Level.TlSerialize());
            bytes.AddRange(CurrentLevelBoosts.TlSerialize());
            bytes.AddRange(Boosts.TlSerialize());
            if(GiftBoosts is not null) bytes.AddRange(GiftBoosts.TlSerialize());
            if(NextLevelBoosts is not null) bytes.AddRange(NextLevelBoosts.TlSerialize());
            if(PremiumAudience is not null) bytes.AddRange(PremiumAudience.TlSerialize());
            bytes.AddRange(BoostUrl.TlSerialize());
            if(PrepaidGiveaways is not null) bytes.AddRange(PrepaidGiveaways.TlSerialize());
            if(MyBoostSlots is not null) bytes.AddRange(MyBoostSlots.TlSerialize());
            return bytes.ToArray();
        }

        public new static PremiumBoostsStatus TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var myBoostLocal = (flagsLocal & 4) is 0 ? default : true ;
            var levelLocal =  des.As<int>().Read();
            var currentLevelBoostsLocal =  des.As<int>().Read();
            var boostsLocal =  des.As<int>().Read();
            var giftBoostsLocal = (flagsLocal & 16) is 0 ? default : des.As<int>().Read() ;
            var nextLevelBoostsLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var premiumAudienceLocal = (flagsLocal & 2) is 0 ? default : StatsPercentValueBase.TlDeserialize(des) ;
            var boostUrlLocal =  des.As<string>().Read();
            var prepaidGiveawaysLocal = (flagsLocal & 8) is 0 ? default : des.Read<PrepaidGiveawayBase>() ;
            var myBoostSlotsLocal = (flagsLocal & 4) is 0 ? default : des.ReadNumbers<int>() ;
            return new() {
            Flags = flagsLocal,
            MyBoost = myBoostLocal,
            Level = levelLocal,
            CurrentLevelBoosts = currentLevelBoostsLocal,
            Boosts = boostsLocal,
            GiftBoosts = giftBoostsLocal,
            NextLevelBoosts = nextLevelBoostsLocal,
            PremiumAudience = premiumAudienceLocal,
            BoostUrl = boostUrlLocal,
            PrepaidGiveaways = prepaidGiveawaysLocal,
            MyBoostSlots = myBoostSlotsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StoryFwdHeaderNs {
    public class StoryFwdHeader : StoryFwdHeaderBase, ITlSerializable, ITlDeserializable<StoryFwdHeader> {
        public static readonly byte[] Identifier = [80,225,38,184,];
        private int Flags;
        public bool Modified {get;set;}
        public PeerBase? From {get;set;}
        public string? FromName {get;set;}
        public int? StoryId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (From is not null ? 1 : 0) | (FromName is not null ? 2 : 0) | (StoryId is not null ? 4 : 0) ).TlSerialize());
            if(From is not null) bytes.AddRange(From.TlSerialize());
            if(FromName is not null) bytes.AddRange(FromName.TlSerialize());
            if(StoryId is not null) bytes.AddRange(StoryId.TlSerialize());
            return bytes.ToArray();
        }

        public new static StoryFwdHeader TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var modifiedLocal = (flagsLocal & 8) is 0 ? default : true ;
            var fromLocal = (flagsLocal & 1) is 0 ? default : PeerBase.TlDeserialize(des) ;
            var fromNameLocal = (flagsLocal & 2) is 0 ? default : des.As<string>().Read() ;
            var storyIdLocal = (flagsLocal & 4) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Modified = modifiedLocal,
            From = fromLocal,
            FromName = fromNameLocal,
            StoryId = storyIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PostInteractionCountersNs {
    public class PostInteractionCountersMessage : PostInteractionCountersBase, ITlSerializable, ITlDeserializable<PostInteractionCountersMessage> {
        public static readonly byte[] Identifier = [127,142,5,231,];
        public required int MsgId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(MsgId.TlSerialize());
            bytes.AddRange(Views.TlSerialize());
            bytes.AddRange(Forwards.TlSerialize());
            bytes.AddRange(Reactions.TlSerialize());
            return bytes.ToArray();
        }

        public new static PostInteractionCountersMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var msgIdLocal =  des.As<int>().Read();
            var viewsLocal =  des.As<int>().Read();
            var forwardsLocal =  des.As<int>().Read();
            var reactionsLocal =  des.As<int>().Read();
            return new() {
            MsgId = msgIdLocal,
            Views = viewsLocal,
            Forwards = forwardsLocal,
            Reactions = reactionsLocal,
            };
        }
    }
    public class PostInteractionCountersStory : PostInteractionCountersBase, ITlSerializable, ITlDeserializable<PostInteractionCountersStory> {
        public static readonly byte[] Identifier = [39,14,72,138,];
        public required int StoryId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(StoryId.TlSerialize());
            bytes.AddRange(Views.TlSerialize());
            bytes.AddRange(Forwards.TlSerialize());
            bytes.AddRange(Reactions.TlSerialize());
            return bytes.ToArray();
        }

        public new static PostInteractionCountersStory TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var storyIdLocal =  des.As<int>().Read();
            var viewsLocal =  des.As<int>().Read();
            var forwardsLocal =  des.As<int>().Read();
            var reactionsLocal =  des.As<int>().Read();
            return new() {
            StoryId = storyIdLocal,
            Views = viewsLocal,
            Forwards = forwardsLocal,
            Reactions = reactionsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StatsStoryStatsNs {
    public class StatsStoryStats : StatsStoryStatsBase, ITlSerializable, ITlDeserializable<StatsStoryStats> {
        public static readonly byte[] Identifier = [124,6,205,80,];
        public required StatsGraphBase ViewsGraph {get;set;}
        public required StatsGraphBase ReactionsByEmotionGraph {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(ViewsGraph.TlSerialize());
            bytes.AddRange(ReactionsByEmotionGraph.TlSerialize());
            return bytes.ToArray();
        }

        public new static StatsStoryStats TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var viewsGraphLocal =  StatsGraphBase.TlDeserialize(des);
            var reactionsByEmotionGraphLocal =  StatsGraphBase.TlDeserialize(des);
            return new() {
            ViewsGraph = viewsGraphLocal,
            ReactionsByEmotionGraph = reactionsByEmotionGraphLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PublicForwardNs {
    public class PublicForwardMessage : PublicForwardBase, ITlSerializable, ITlDeserializable<PublicForwardMessage> {
        public static readonly byte[] Identifier = [74,191,242,1,];
        public required MessageBase Message {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Message.TlSerialize());
            return bytes.ToArray();
        }

        public new static PublicForwardMessage TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var messageLocal =  MessageBase.TlDeserialize(des);
            return new() {
            Message = messageLocal,
            };
        }
    }
    public class PublicForwardStory : PublicForwardBase, ITlSerializable, ITlDeserializable<PublicForwardStory> {
        public static readonly byte[] Identifier = [208,173,243,237,];
        public required PeerBase Peer {get;set;}
        public required StoryItemBase Story {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(Story.TlSerialize());
            return bytes.ToArray();
        }

        public new static PublicForwardStory TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerLocal =  PeerBase.TlDeserialize(des);
            var storyLocal =  StoryItemBase.TlDeserialize(des);
            return new() {
            Peer = peerLocal,
            Story = storyLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StatsPublicForwardsNs {
    public class StatsPublicForwards : StatsPublicForwardsBase, ITlSerializable, ITlDeserializable<StatsPublicForwards> {
        public static readonly byte[] Identifier = [32,126,3,147,];
        private int Flags;
        public required int Count {get;set;}
        public required List<PublicForwardBase> Forwards {get;set;}
        public string? NextOffset {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (NextOffset is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(Forwards.TlSerialize());
            if(NextOffset is not null) bytes.AddRange(NextOffset.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static StatsPublicForwards TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var countLocal =  des.As<int>().Read();
            var forwardsLocal =  des.Read<PublicForwardBase>();
            var nextOffsetLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Flags = flagsLocal,
            Count = countLocal,
            Forwards = forwardsLocal,
            NextOffset = nextOffsetLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.PeerColorNs {
    public class PeerColor : PeerColorBase, ITlSerializable, ITlDeserializable<PeerColor> {
        public static readonly byte[] Identifier = [207,90,75,181,];
        private int Flags;
        public int? Color {get;set;}
        public long? BackgroundEmojiId {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Color is not null ? 1 : 0) | (BackgroundEmojiId is not null ? 2 : 0) ).TlSerialize());
            if(Color is not null) bytes.AddRange(Color.TlSerialize());
            if(BackgroundEmojiId is not null) bytes.AddRange(BackgroundEmojiId.TlSerialize());
            return bytes.ToArray();
        }

        public new static PeerColor TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var colorLocal = (flagsLocal & 1) is 0 ? default : des.As<int>().Read() ;
            var backgroundEmojiIdLocal = (flagsLocal & 2) is 0 ? default : des.As<long>().Read() ;
            return new() {
            Flags = flagsLocal,
            Color = colorLocal,
            BackgroundEmojiId = backgroundEmojiIdLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.HelpPeerColorSetNs {
    public class HelpPeerColorSet : HelpPeerColorSetBase, ITlSerializable, ITlDeserializable<HelpPeerColorSet> {
        public static readonly byte[] Identifier = [88,154,33,38,];
        public required List<int> Colors {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Colors.TlSerialize());
            return bytes.ToArray();
        }

        public new static HelpPeerColorSet TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var colorsLocal =  des.ReadNumbers<int>();
            return new() {
            Colors = colorsLocal,
            };
        }
    }
    public class HelpPeerColorProfileSet : HelpPeerColorSetBase, ITlSerializable, ITlDeserializable<HelpPeerColorProfileSet> {
        public static readonly byte[] Identifier = [235,97,125,118,];
        public required List<int> PaletteColors {get;set;}
        public required List<int> BgColors {get;set;}
        public required List<int> StoryColors {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PaletteColors.TlSerialize());
            bytes.AddRange(BgColors.TlSerialize());
            bytes.AddRange(StoryColors.TlSerialize());
            return bytes.ToArray();
        }

        public new static HelpPeerColorProfileSet TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var paletteColorsLocal =  des.ReadNumbers<int>();
            var bgColorsLocal =  des.ReadNumbers<int>();
            var storyColorsLocal =  des.ReadNumbers<int>();
            return new() {
            PaletteColors = paletteColorsLocal,
            BgColors = bgColorsLocal,
            StoryColors = storyColorsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.HelpPeerColorOptionNs {
    public class HelpPeerColorOption : HelpPeerColorOptionBase, ITlSerializable, ITlDeserializable<HelpPeerColorOption> {
        public static readonly byte[] Identifier = [171,48,132,239,];
        private int Flags;
        public bool Hidden {get;set;}
        public required int ColorId {get;set;}
        public HelpPeerColorSetBase? Colors {get;set;}
        public HelpPeerColorSetBase? DarkColors {get;set;}
        public int? ChannelMinLevel {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (Colors is not null ? 2 : 0) | (DarkColors is not null ? 4 : 0) | (ChannelMinLevel is not null ? 8 : 0) ).TlSerialize());
            bytes.AddRange(ColorId.TlSerialize());
            if(Colors is not null) bytes.AddRange(Colors.TlSerialize());
            if(DarkColors is not null) bytes.AddRange(DarkColors.TlSerialize());
            if(ChannelMinLevel is not null) bytes.AddRange(ChannelMinLevel.TlSerialize());
            return bytes.ToArray();
        }

        public new static HelpPeerColorOption TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var hiddenLocal = (flagsLocal & 1) is 0 ? default : true ;
            var colorIdLocal =  des.As<int>().Read();
            var colorsLocal = (flagsLocal & 2) is 0 ? default : HelpPeerColorSetBase.TlDeserialize(des) ;
            var darkColorsLocal = (flagsLocal & 4) is 0 ? default : HelpPeerColorSetBase.TlDeserialize(des) ;
            var channelMinLevelLocal = (flagsLocal & 8) is 0 ? default : des.As<int>().Read() ;
            return new() {
            Flags = flagsLocal,
            Hidden = hiddenLocal,
            ColorId = colorIdLocal,
            Colors = colorsLocal,
            DarkColors = darkColorsLocal,
            ChannelMinLevel = channelMinLevelLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.HelpPeerColorsNs {
    public class HelpPeerColorsNotModified : HelpPeerColorsBase, ITlSerializable, ITlDeserializable<HelpPeerColorsNotModified> {
        public static readonly byte[] Identifier = [206,245,161,43,];
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            return bytes.ToArray();
        }

        public new static HelpPeerColorsNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            return new() {
            };
        }
    }
    public class HelpPeerColors : HelpPeerColorsBase, ITlSerializable, ITlDeserializable<HelpPeerColors> {
        public static readonly byte[] Identifier = [8,237,248,0,];
        public required int Hash {get;set;}
        public required List<HelpPeerColorOption> Colors {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Hash.TlSerialize());
            bytes.AddRange(Colors.TlSerialize());
            return bytes.ToArray();
        }

        public new static HelpPeerColors TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var hashLocal =  des.As<int>().Read();
            var colorsLocal =  des.Read<HelpPeerColorOption>();
            return new() {
            Hash = hashLocal,
            Colors = colorsLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StoryReactionNs {
    public class StoryReaction : StoryReactionBase, ITlSerializable, ITlDeserializable<StoryReaction> {
        public static readonly byte[] Identifier = [213,214,144,96,];
        public required PeerBase PeerId {get;set;}
        public required int Date {get;set;}
        public required ReactionBase Reaction {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PeerId.TlSerialize());
            bytes.AddRange(Date.TlSerialize());
            bytes.AddRange(Reaction.TlSerialize());
            return bytes.ToArray();
        }

        public new static StoryReaction TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerIdLocal =  PeerBase.TlDeserialize(des);
            var dateLocal =  des.As<int>().Read();
            var reactionLocal =  ReactionBase.TlDeserialize(des);
            return new() {
            PeerId = peerIdLocal,
            Date = dateLocal,
            Reaction = reactionLocal,
            };
        }
    }
    public class StoryReactionPublicForward : StoryReactionBase, ITlSerializable, ITlDeserializable<StoryReactionPublicForward> {
        public static readonly byte[] Identifier = [67,38,171,187,];
        public required MessageBase Message {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Message.TlSerialize());
            return bytes.ToArray();
        }

        public new static StoryReactionPublicForward TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var messageLocal =  MessageBase.TlDeserialize(des);
            return new() {
            Message = messageLocal,
            };
        }
    }
    public class StoryReactionPublicRepost : StoryReactionBase, ITlSerializable, ITlDeserializable<StoryReactionPublicRepost> {
        public static readonly byte[] Identifier = [19,15,205,207,];
        public required PeerBase PeerId {get;set;}
        public required StoryItemBase Story {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(PeerId.TlSerialize());
            bytes.AddRange(Story.TlSerialize());
            return bytes.ToArray();
        }

        public new static StoryReactionPublicRepost TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var peerIdLocal =  PeerBase.TlDeserialize(des);
            var storyLocal =  StoryItemBase.TlDeserialize(des);
            return new() {
            PeerId = peerIdLocal,
            Story = storyLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.StoriesStoryReactionsListNs {
    public class StoriesStoryReactionsList : StoriesStoryReactionsListBase, ITlSerializable, ITlDeserializable<StoriesStoryReactionsList> {
        public static readonly byte[] Identifier = [156,120,95,170,];
        private int Flags;
        public required int Count {get;set;}
        public required List<StoryReactionBase> Reactions {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public string? NextOffset {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange((0 | (NextOffset is not null ? 1 : 0) ).TlSerialize());
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(Reactions.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            if(NextOffset is not null) bytes.AddRange(NextOffset.TlSerialize());
            return bytes.ToArray();
        }

        public new static StoriesStoryReactionsList TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var countLocal =  des.As<int>().Read();
            var reactionsLocal =  des.Read<StoryReactionBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            var nextOffsetLocal = (flagsLocal & 1) is 0 ? default : des.As<string>().Read() ;
            return new() {
            Flags = flagsLocal,
            Count = countLocal,
            Reactions = reactionsLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            NextOffset = nextOffsetLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.SavedDialogNs {
    public class SavedDialog : SavedDialogBase, ITlSerializable, ITlDeserializable<SavedDialog> {
        public static readonly byte[] Identifier = [108,203,135,189,];
        private int Flags;
        public bool Pinned {get;set;}
        public required PeerBase Peer {get;set;}
        public required int TopMessage {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(0.TlSerialize());
            bytes.AddRange(Peer.TlSerialize());
            bytes.AddRange(TopMessage.TlSerialize());
            return bytes.ToArray();
        }

        public new static SavedDialog TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var flagsLocal =  des.As<int>().Read();
            var pinnedLocal = (flagsLocal & 4) is 0 ? default : true ;
            var peerLocal =  PeerBase.TlDeserialize(des);
            var topMessageLocal =  des.As<int>().Read();
            return new() {
            Flags = flagsLocal,
            Pinned = pinnedLocal,
            Peer = peerLocal,
            TopMessage = topMessageLocal,
            };
        }
    }


}
namespace SharpGram.Tl.Constructors.MessagesSavedDialogsNs {
    public class MessagesSavedDialogs : MessagesSavedDialogsBase, ITlSerializable, ITlDeserializable<MessagesSavedDialogs> {
        public static readonly byte[] Identifier = [33,226,58,248,];
        public required List<SavedDialogBase> Dialogs {get;set;}
        public required List<MessageBase> Messages {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Dialogs.TlSerialize());
            bytes.AddRange(Messages.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesSavedDialogs TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var dialogsLocal =  des.Read<SavedDialogBase>();
            var messagesLocal =  des.Read<MessageBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Dialogs = dialogsLocal,
            Messages = messagesLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }
    public class MessagesSavedDialogsSlice : MessagesSavedDialogsBase, ITlSerializable, ITlDeserializable<MessagesSavedDialogsSlice> {
        public static readonly byte[] Identifier = [217,157,186,68,];
        public required int Count {get;set;}
        public required List<SavedDialogBase> Dialogs {get;set;}
        public required List<MessageBase> Messages {get;set;}
        public required List<ChatBase> Chats {get;set;}
        public required List<UserBase> Users {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Count.TlSerialize());
            bytes.AddRange(Dialogs.TlSerialize());
            bytes.AddRange(Messages.TlSerialize());
            bytes.AddRange(Chats.TlSerialize());
            bytes.AddRange(Users.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesSavedDialogsSlice TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var countLocal =  des.As<int>().Read();
            var dialogsLocal =  des.Read<SavedDialogBase>();
            var messagesLocal =  des.Read<MessageBase>();
            var chatsLocal =  des.Read<ChatBase>();
            var usersLocal =  des.Read<UserBase>();
            return new() {
            Count = countLocal,
            Dialogs = dialogsLocal,
            Messages = messagesLocal,
            Chats = chatsLocal,
            Users = usersLocal,
            };
        }
    }
    public class MessagesSavedDialogsNotModified : MessagesSavedDialogsBase, ITlSerializable, ITlDeserializable<MessagesSavedDialogsNotModified> {
        public static readonly byte[] Identifier = [232,111,31,192,];
        public required int Count {get;set;}
        public new byte[] TlSerialize() {
            List<byte> bytes = [];
            bytes.AddRange(Identifier);
            bytes.AddRange(Count.TlSerialize());
            return bytes.ToArray();
        }

        public new static MessagesSavedDialogsNotModified TlDeserialize(Deserializer des) {
            ArgumentOutOfRangeException.ThrowIfNotEqual(des.IsCorrectId(Identifier), true);
            var countLocal =  des.As<int>().Read();
            return new() {
            Count = countLocal,
            };
        }
    }


}
